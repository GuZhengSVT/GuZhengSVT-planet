<html><head></head><body><p>更新：这么翻着看太麻烦了，做了个小工具，这里就先不更新了。</p><p><a href="http://www.jiujiuer.xyz/pages/xdoj-util/">点击前往</a></p><hr/><p>听说XDOJ上的题有200多道，刷的题在这记下，以后备用。</p><p>过于简单的就直接放代码了。</p><hr/><p><em>不知道哪找的题，题解写这了</em></p><h3 id="1-数列分段"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#1-%E6%95%B0%E5%88%97%E5%88%86%E6%AE%B5" class="headerlink" title="1.数列分段"></a>1.数列分段</h3><h4 id="问题描述"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定一个整数数列，数列中连续相同的最长整数序列算成一段，问数列中共有多少段？</p><h4 id="输入格式"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入的第一行包含一个整数n，表示数列中整数的个数。</p><p>第二行包含n个整数a1, a2, …, an，表示给定的数列，相邻的整数之间用一个空格分隔。</p><h4 id="输出格式"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示给定的数列有多个段。</p><h4 id="样例输入"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#%E6%A0%B7%E4%BE%8B%E8%BE%93%E5%85%A5" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line">8</span><br/><span class="line">8 8 8 0 12 12 8 0</span><br/></pre></td></tr></tbody></table></figure><h4 id="样例输出"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#%E6%A0%B7%E4%BE%8B%E8%BE%93%E5%87%BA" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">5</span><br/></pre></td></tr></tbody></table></figure><h4 id="题解"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#%E9%A2%98%E8%A7%A3" class="headerlink" title="题解"></a>题解</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/></pre></td><td class="code"><pre><span class="line"><span class="comment">/* array_count.c - by xeonds - 2021.10.15 23:00 */</span></span><br/><span class="line"></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> i,j,num_curr,num_prev,count;</span><br/><span class="line"></span><br/><span class="line">    <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>,&amp;i);</span><br/><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>,count=<span class="number">1</span>;j&lt;i;j++)</span><br/><span class="line">    {</span><br/><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>)</span><br/><span class="line">        {</span><br/><span class="line">            <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>,&amp;num_prev);</span><br/><span class="line">            <span class="keyword">continue</span>;</span><br/><span class="line">        }</span><br/><span class="line">        <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>,&amp;num_curr);</span><br/><span class="line">        <span class="keyword">if</span>(num_curr!=num_prev)</span><br/><span class="line">            count++;</span><br/><span class="line">        num_prev=num_curr;</span><br/><span class="line">    }</span><br/><span class="line">    <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>,count);</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><blockquote><p>没来得及提交，不知道能不能过（<br/>反正本地gcc运行是没问题的。但是OJ平台好像是VC6（叹<br/>更新：已经找到题了，过了（</p></blockquote><hr/><p><em>第一次上机的练习题。大多数都很简单，除了一个隐式转换的坑。</em></p><h3 id="2-A-B-C"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#2-A-B-C" class="headerlink" title="2.A+B+C"></a>2.A+B+C</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">int</span> a,b,c;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d %d %d&#34;</span>,&amp;a,&amp;b,&amp;c);</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>,a+b+c);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="3-求三角形面积"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#3-%E6%B1%82%E4%B8%89%E8%A7%92%E5%BD%A2%E9%9D%A2%E7%A7%AF" class="headerlink" title="3.求三角形面积"></a>3.求三角形面积</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/></pre></td><td class="code"><pre><span class="line"><span class="comment">/* calc triangle area - by xeonds */</span></span><br/><span class="line"></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">float</span> a,b,c,p;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%f %f %f&#34;</span>,&amp;a,&amp;b,&amp;c);</span><br/><span class="line"> p=(a+b+c)/<span class="number">2</span>;</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%.2f&#34;</span>,<span class="built_in">sqrt</span>(p*(p-a)*(p-b)*(p-c)));</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="4-整数简单运算"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#4-%E6%95%B4%E6%95%B0%E7%AE%80%E5%8D%95%E8%BF%90%E7%AE%97" class="headerlink" title="4.整数简单运算"></a>4.整数简单运算</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">int</span> a,b;</span><br/><span class="line"> </span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d %d&#34;</span>,&amp;a, &amp;b);</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%d\n%d\n%d\n%d\n&#34;</span>,a+b,a-b,a*b,a/b);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="5-字符输入输出"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#5-%E5%AD%97%E7%AC%A6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA" class="headerlink" title="5.字符输入输出"></a>5.字符输入输出</h3><p>这里注意下，字母大小写转换可以用ascii码的方式进行，也可以用二进制格式按位操作的方式完成。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">int</span> ch;</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br/><span class="line"> {</span><br/><span class="line">  ch=getchar();</span><br/><span class="line">  <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)</span><br/><span class="line">   <span class="built_in">putchar</span>(ch+<span class="number">32</span>);</span><br/><span class="line"> }</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;!&#34;</span>);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="6-计算长方体体积"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#6-%E8%AE%A1%E7%AE%97%E9%95%BF%E6%96%B9%E4%BD%93%E4%BD%93%E7%A7%AF" class="headerlink" title="6.计算长方体体积"></a>6.计算长方体体积</h3><p>注意，转换说明要和数据类型匹配。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">float</span> a,b,c;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%f %f %f&#34;</span>,&amp;a,&amp;b,&amp;c);</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%.3f&#34;</span>,a*b*c);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="7-数字字符"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#7-%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6" class="headerlink" title="7.数字字符"></a>7.数字字符</h3><p>这里不能用减的原因是，减有可能会产生负数，这在ascii码体系中是未定义的。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/></pre></td><td class="code"><pre><span class="line"><span class="comment">/* int add char - by xeonds */</span></span><br/><span class="line"></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">int</span> a,ch;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d,%d&#34;</span>,&amp;a,&amp;ch);</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%d,%d&#34;</span>,a+ch+<span class="number">48</span>,a+ch);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="8-计算球体重量"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#8-%E8%AE%A1%E7%AE%97%E7%90%83%E4%BD%93%E9%87%8D%E9%87%8F" class="headerlink" title="8.计算球体重量"></a>8.计算球体重量</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.1415926</span></span><br/><span class="line"><span class="meta">#<span class="keyword">define</span> FE 7.86</span></span><br/><span class="line"><span class="meta">#<span class="keyword">define</span> AG 19.3</span></span><br/><span class="line"></span><br/><span class="line"><span class="type">float</span> <span class="title function_">mass</span><span class="params">(<span class="type">int</span> a,<span class="type">float</span> p)</span>;</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">int</span> d_1,d_2;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d %d&#34;</span>,&amp;d_1,&amp;d_2);</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%.3f %.3f&#34;</span>,mass(d_1,FE),mass(d_2,AG));</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">float</span> <span class="title function_">mass</span><span class="params">(<span class="type">int</span> a, <span class="type">float</span> p)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">float</span> m;</span><br/><span class="line"> </span><br/><span class="line"> m = <span class="number">4</span>*PI*a*a*a*p/<span class="number">3</span>/<span class="number">1000</span>/<span class="number">8</span>;</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> m;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="9-整除判断1"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#9-%E6%95%B4%E9%99%A4%E5%88%A4%E6%96%AD1" class="headerlink" title="9.整除判断1"></a>9.整除判断1</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">int</span> a,b;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d %d&#34;</span>,&amp;a,&amp;b);</span><br/><span class="line"> <span class="keyword">if</span>(a%b==<span class="number">0</span>)</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;yes&#34;</span>);</span><br/><span class="line"> <span class="keyword">else</span></span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;%d %d&#34;</span>,a/b,a%b);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="10-求三位整数各位之和"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#10-%E6%B1%82%E4%B8%89%E4%BD%8D%E6%95%B4%E6%95%B0%E5%90%84%E4%BD%8D%E4%B9%8B%E5%92%8C" class="headerlink" title="10.求三位整数各位之和"></a>10.求三位整数各位之和</h3><p>本来是想写得更通用一些，但是任务太简单，没必要。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">int</span> i;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>,&amp;i);</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>,i%<span class="number">10</span>+(i%<span class="number">100</span>-i%<span class="number">10</span>)/<span class="number">10</span>+(i-i%<span class="number">100</span>)/<span class="number">100</span>);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>更通用一点的算法：任意位（不超过int范围）各位求和：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/></pre></td><td class="code"><pre><span class="line"><span class="comment">/* calc_bit_sum.c -by xeonds - 2021.10.16 15:11 */</span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">calc</span><span class="params">(<span class="type">int</span> num)</span>;</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> num;</span><br/><span class="line"></span><br/><span class="line">    <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;num);</span><br/><span class="line">    <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>, calc(num));</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">calc</span><span class="params">(<span class="type">int</span> num)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="keyword">if</span> (num &gt;= <span class="number">10</span>)</span><br/><span class="line">        <span class="keyword">return</span> num % <span class="number">10</span> + calc((num - num % <span class="number">10</span>) / <span class="number">10</span>);</span><br/><span class="line">    <span class="keyword">else</span></span><br/><span class="line">        <span class="keyword">return</span> num;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="11-温度转换"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#11-%E6%B8%A9%E5%BA%A6%E8%BD%AC%E6%8D%A2" class="headerlink" title="11.温度转换"></a>11.温度转换</h3><p>这有个坑，好多人都掉进来了：数据的隐式转换。赋值表达式右值的数据类型会自动转换成其中容纳范围最大的项的数据类型。</p><p>比如，<code>c=1+3/2</code>的结果是2，而<code>c=1+3/2.0</code>的结果是<code>2.50</code>。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/></pre></td><td class="code"><pre><span class="line"><span class="comment">/* temperature convert - by xeonds */</span></span><br/><span class="line"></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">float</span> <span class="title function_">f_to_c</span><span class="params">(<span class="type">int</span> a)</span>;</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">int</span> f;</span><br/><span class="line"> </span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>,&amp;f);</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%.2f&#34;</span>,f_to_c(f));</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">float</span> <span class="title function_">f_to_c</span><span class="params">(<span class="type">int</span> a)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">float</span> c;</span><br/><span class="line"> </span><br/><span class="line"> c = (a<span class="number">-32.00</span>)*<span class="number">5.00</span>/<span class="number">9.00</span>;</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> c;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><hr/><p><em>第二次上机练习的题，都很简单。注意下文档编码问题，包含中文的最好用<code>GB2312编码</code></em></p><h3 id="12-四则运算"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#12-%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97" class="headerlink" title="12.四则运算"></a>12.四则运算</h3><p>输入二元表达式，进行运算。初中写过一个计算器，比这个复杂些。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">calc</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">char</span> calc)</span>;</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> num_1, num_2;</span><br/><span class="line">    <span class="type">char</span> ch;</span><br/><span class="line"></span><br/><span class="line">    <span class="built_in">scanf</span>(<span class="string">&#34;%d%c%d&#34;</span>, &amp;num_1, &amp;ch, &amp;num_2);</span><br/><span class="line">    <span class="built_in">printf</span>(<span class="string">&#34;%d%c%d=%d&#34;</span>, num_1, ch, num_2, calc(num_1, num_2, ch));</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">calc</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">char</span> calc)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="keyword">switch</span> (calc)</span><br/><span class="line">    {</span><br/><span class="line">    <span class="keyword">case</span> <span class="string">&#39;+&#39;</span>:</span><br/><span class="line">        <span class="keyword">return</span> a + b;</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">case</span> <span class="string">&#39;-&#39;</span>:</span><br/><span class="line">        <span class="keyword">return</span> a - b;</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">case</span> <span class="string">&#39;*&#39;</span>:</span><br/><span class="line">        <span class="keyword">return</span> a * b;</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">case</span> <span class="string">&#39;/&#39;</span>:</span><br/><span class="line">        <span class="keyword">return</span> a / b;</span><br/><span class="line">    <span class="keyword">case</span> <span class="string">&#39;%&#39;</span>:</span><br/><span class="line">        <span class="keyword">return</span> a % b;</span><br/><span class="line">    }</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>注意，C语言中整数的除法结果都是带余除法，取余运算是<code>%</code>，是二元运算符，<strong>只接受整数作为运算对象</strong>。</p><h3 id="13-数位输出"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#13-%E6%95%B0%E4%BD%8D%E8%BE%93%E5%87%BA" class="headerlink" title="13.数位输出"></a>13.数位输出</h3><p>输出数字的各位。相当于给各位间加了个空格。这里用的是数学办法。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> a, i;</span><br/><span class="line"></span><br/><span class="line">    <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;a);</span><br/><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; a &gt;= i; i *= <span class="number">10</span>)</span><br/><span class="line">        ;</span><br/><span class="line">    i /= <span class="number">10</span>;</span><br/><span class="line">    <span class="keyword">for</span> (; a &gt; <span class="number">0</span>;)</span><br/><span class="line">    {</span><br/><span class="line">        <span class="built_in">printf</span>(<span class="string">&#34;%d &#34;</span>, a / i);</span><br/><span class="line">        a -= a / i * i;</span><br/><span class="line">        i /= <span class="number">10</span>;</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>注意空语句。它只有一个符号<code>;</code>，但是是一个完整的语句。</p><h3 id="14-冰箱温度预测"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#14-%E5%86%B0%E7%AE%B1%E6%B8%A9%E5%BA%A6%E9%A2%84%E6%B5%8B" class="headerlink" title="14.冰箱温度预测"></a>14.冰箱温度预测</h3><p>很简单。注意将数据类型隐式转换为浮点数即可。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/></pre></td><td class="code"><pre><span class="line"><span class="comment">/*    2.3 温度计算 - by xeonds    */</span></span><br/><span class="line"></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> h, m;</span><br/><span class="line"></span><br/><span class="line">    <span class="built_in">scanf</span>(<span class="string">&#34;%d %d&#34;</span>, &amp;h, &amp;m);</span><br/><span class="line">    <span class="built_in">printf</span>(<span class="string">&#34;%.2f\n&#34;</span>, <span class="number">4.0</span> * (h + m / <span class="number">60.0</span>) * (h + m / <span class="number">60.0</span>) / ((h + m / <span class="number">60.0</span>) + <span class="number">2</span>) - <span class="number">20</span>);</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="15-除法计算器"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#15-%E9%99%A4%E6%B3%95%E8%AE%A1%E7%AE%97%E5%99%A8" class="headerlink" title="15.除法计算器"></a>15.除法计算器</h3><p>怎么又是小明（(╯‵□′)╯︵┻━┻）</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> m, n, q, r;</span><br/><span class="line"></span><br/><span class="line">    <span class="built_in">scanf</span>(<span class="string">&#34;%d %d %d %d&#34;</span>, &amp;m, &amp;n, &amp;q, &amp;r);</span><br/><span class="line">    <span class="keyword">if</span> (m / n == q &amp;&amp; m % n == r)</span><br/><span class="line">        <span class="built_in">printf</span>(<span class="string">&#34;yes&#34;</span>);</span><br/><span class="line">    <span class="keyword">else</span></span><br/><span class="line">        <span class="built_in">printf</span>(<span class="string">&#34;%d %d&#34;</span>, m / n, m % n);</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="16-简单程序"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#16-%E7%AE%80%E5%8D%95%E7%A8%8B%E5%BA%8F" class="headerlink" title="16.简单程序"></a>16.简单程序</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="built_in">puts</span>(<span class="string">&#34;C programming language is useful!&#34;</span>);</span><br/><span class="line">    <span class="built_in">puts</span>(<span class="string">&#34;I like it very much.&#34;</span>);</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="17-求平均值"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#17-%E6%B1%82%E5%B9%B3%E5%9D%87%E5%80%BC" class="headerlink" title="17.求平均值"></a>17.求平均值</h3><p>注意隐式转换。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> a, b, c;</span><br/><span class="line"></span><br/><span class="line">    <span class="built_in">scanf</span>(<span class="string">&#34;%d %d %d&#34;</span>, &amp;a, &amp;b, &amp;c);</span><br/><span class="line">    <span class="built_in">printf</span>(<span class="string">&#34;%.2f&#34;</span>, (a + b + c) / <span class="number">3.0</span>);</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="18-计算球的体积"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#18-%E8%AE%A1%E7%AE%97%E7%90%83%E7%9A%84%E4%BD%93%E7%A7%AF" class="headerlink" title="18.计算球的体积"></a>18.计算球的体积</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">float</span> r;</span><br/><span class="line"></span><br/><span class="line">    <span class="built_in">scanf</span>(<span class="string">&#34;%f&#34;</span>, &amp;r);</span><br/><span class="line">    <span class="built_in">printf</span>(<span class="string">&#34;%.2f&#34;</span>, <span class="number">4</span> * <span class="number">3.14</span> * r * r * r / <span class="number">3</span>);</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="19-工资发放"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#19-%E5%B7%A5%E8%B5%84%E5%8F%91%E6%94%BE" class="headerlink" title="19.工资发放"></a>19.工资发放</h3><p>下面的程序可以抽象成函数来简化。</p><p>待会写（咕</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> salary, m100 = <span class="number">0</span>, m50 = <span class="number">0</span>, m20 = <span class="number">0</span>, m10 = <span class="number">0</span>, m5 = <span class="number">0</span>, m1 = <span class="number">0</span>;</span><br/><span class="line"></span><br/><span class="line">    <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;salary);</span><br/><span class="line">    <span class="keyword">if</span> (salary &gt;= <span class="number">100</span>)</span><br/><span class="line">        m100 = salary / <span class="number">100</span>, salary = salary % <span class="number">100</span>;</span><br/><span class="line">    <span class="keyword">if</span> (salary &gt;= <span class="number">50</span>)</span><br/><span class="line">        m50 = salary / <span class="number">50</span>, salary = salary % <span class="number">50</span>;</span><br/><span class="line">    <span class="keyword">if</span> (salary &gt;= <span class="number">20</span>)</span><br/><span class="line">        m20 = salary / <span class="number">20</span>, salary = salary % <span class="number">20</span>;</span><br/><span class="line">    <span class="keyword">if</span> (salary &gt;= <span class="number">10</span>)</span><br/><span class="line">        m10 = salary / <span class="number">10</span>, salary = salary % <span class="number">10</span>;</span><br/><span class="line">    <span class="keyword">if</span> (salary &gt;= <span class="number">5</span>)</span><br/><span class="line">        m5 = salary / <span class="number">5</span>, salary = salary % <span class="number">5</span>;</span><br/><span class="line">    <span class="keyword">if</span> (salary &gt;= <span class="number">1</span>)</span><br/><span class="line">        m1 = salary / <span class="number">1</span>;</span><br/><span class="line">    <span class="built_in">printf</span>(<span class="string">&#34;%d %d %d %d %d %d&#34;</span>, m100, m50, m20, m10, m5, m1);</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>写出来之后感觉完全没有简化（笑）</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> *<span class="title function_">m_calc</span><span class="params">(<span class="type">int</span> m_size, <span class="type">int</span> salary)</span>;</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> salary;</span><br/><span class="line"></span><br/><span class="line">    <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;salary);</span><br/><span class="line">    <span class="built_in">printf</span>(<span class="string">&#34;%d %d %d %d %d %d&#34;</span>, m_calc(<span class="number">100</span>, salary)[<span class="number">0</span>],</span><br/><span class="line">           m_calc(<span class="number">50</span>, m_calc(<span class="number">100</span>, salary)[<span class="number">1</span>])[<span class="number">0</span>],</span><br/><span class="line">           m_calc(<span class="number">20</span>, m_calc(<span class="number">50</span>, m_calc(<span class="number">100</span>, salary)[<span class="number">1</span>])[<span class="number">1</span>])[<span class="number">0</span>],</span><br/><span class="line">           m_calc(<span class="number">10</span>, m_calc(<span class="number">20</span>, m_calc(<span class="number">50</span>, m_calc(<span class="number">100</span>, salary)[<span class="number">1</span>])[<span class="number">1</span>])[<span class="number">1</span>])[<span class="number">0</span>],</span><br/><span class="line">           m_calc(<span class="number">5</span>, m_calc(<span class="number">10</span>, m_calc(<span class="number">20</span>, m_calc(<span class="number">50</span>, m_calc(<span class="number">100</span>, salary)[<span class="number">1</span>])[<span class="number">1</span>])[<span class="number">1</span>])[<span class="number">1</span>])[<span class="number">0</span>],</span><br/><span class="line">           m_calc(<span class="number">1</span>, m_calc(<span class="number">5</span>, m_calc(<span class="number">10</span>, m_calc(<span class="number">20</span>, m_calc(<span class="number">50</span>, m_calc(<span class="number">100</span>, salary)[<span class="number">1</span>])[<span class="number">1</span>])[<span class="number">1</span>])[<span class="number">1</span>])[<span class="number">1</span>])[<span class="number">0</span>]);</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> *<span class="title function_">m_calc</span><span class="params">(<span class="type">int</span> m_size, <span class="type">int</span> salary)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> *res;</span><br/><span class="line"></span><br/><span class="line">    res = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">2</span>);</span><br/><span class="line">    res[<span class="number">0</span>] = salary / m_size; <span class="comment">//number of money</span></span><br/><span class="line">    res[<span class="number">1</span>] = salary % m_size; <span class="comment">//rest of salary</span></span><br/><span class="line">    <span class="keyword">return</span> res;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="20-三角形判别"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#20-%E4%B8%89%E8%A7%92%E5%BD%A2%E5%88%A4%E5%88%AB" class="headerlink" title="20.三角形判别"></a>20.三角形判别</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> a, b, c;</span><br/><span class="line"></span><br/><span class="line">    <span class="built_in">scanf</span>(<span class="string">&#34;%d %d %d&#34;</span>, &amp;a, &amp;b, &amp;c);</span><br/><span class="line">    <span class="keyword">if</span> (a + b &gt; c &amp;&amp; a + c &gt; b &amp;&amp; b + c &gt; a)</span><br/><span class="line">        <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>, a + b + c);</span><br/><span class="line">    <span class="keyword">else</span></span><br/><span class="line">        <span class="built_in">printf</span>(<span class="string">&#34;No&#34;</span>);</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>判断部分可以用三目运算符简化成这样：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">(a + b &gt; c &amp;&amp; a + c &gt; b &amp;&amp; b + c &gt; a)?<span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>, a + b + c):<span class="built_in">printf</span>(<span class="string">&#34;No&#34;</span>);</span><br/></pre></td></tr></tbody></table></figure><h3 id="21-判断奇偶性"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#21-%E5%88%A4%E6%96%AD%E5%A5%87%E5%81%B6%E6%80%A7" class="headerlink" title="21.判断奇偶性"></a>21.判断奇偶性</h3><p><em>utf-8大法好，gb2312太谔谔了（ψ(｀^´)ψ</em></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/></pre></td><td class="code"><pre><span class="line"><span class="comment">//encoding: GB2312</span></span><br/><span class="line"></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> a;</span><br/><span class="line"></span><br/><span class="line">    <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;a);</span><br/><span class="line">    <span class="keyword">if</span> (a &gt; <span class="number">0</span>)</span><br/><span class="line">        <span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">1</span>)</span><br/><span class="line">            <span class="built_in">printf</span>(<span class="string">&#34;奇数&#34;</span>);</span><br/><span class="line">        <span class="keyword">else</span></span><br/><span class="line">            <span class="built_in">printf</span>(<span class="string">&#34;偶数&#34;</span>);</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="22-整除判断2"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#22-%E6%95%B4%E9%99%A4%E5%88%A4%E6%96%AD2" class="headerlink" title="22.整除判断2"></a>22.整除判断2</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">int</span> num;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>,&amp;num);</span><br/><span class="line"> <span class="keyword">if</span>(num%<span class="number">35</span>==<span class="number">0</span>)</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;yes&#34;</span>);</span><br/><span class="line"> <span class="keyword">else</span></span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;no&#34;</span>);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="23-出租车计价"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#23-%E5%87%BA%E7%A7%9F%E8%BD%A6%E8%AE%A1%E4%BB%B7" class="headerlink" title="23.出租车计价"></a>23.出租车计价</h3><p>注意四舍五入的技巧：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> num=<span class="number">5.4</span>;</span><br/><span class="line">(<span class="type">int</span>)(num+<span class="number">0.5</span>);    <span class="comment">//四舍五入</span></span><br/></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">float</span> <span class="title function_">calc</span><span class="params">(<span class="type">float</span> s,<span class="type">int</span> t)</span>;</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">float</span> s;</span><br/><span class="line"> <span class="type">int</span> t;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%f %d&#34;</span>,&amp;s,&amp;t);</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>,(<span class="type">int</span>)(calc(s,t)+<span class="number">0.5</span>));</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">float</span> <span class="title function_">calc</span><span class="params">(<span class="type">float</span> s,<span class="type">int</span> t)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">float</span> res=<span class="number">0</span>;</span><br/><span class="line"></span><br/><span class="line"> res=t/<span class="number">5</span>*<span class="number">2</span>;</span><br/><span class="line"> <span class="keyword">if</span>(s&gt;<span class="number">10</span>)</span><br/><span class="line">  res+=<span class="number">24</span>+<span class="number">3</span>*(s<span class="number">-10</span>);</span><br/><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(s&gt;<span class="number">3</span>)</span><br/><span class="line">  res+=<span class="number">10</span>+<span class="number">2</span>*(s<span class="number">-3</span>);</span><br/><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(s&gt;<span class="number">0</span>)</span><br/><span class="line">  res+=<span class="number">10</span>;</span><br/><span class="line"> </span><br/><span class="line"> <span class="keyword">return</span> res;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="24-利率计算"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#24-%E5%88%A9%E7%8E%87%E8%AE%A1%E7%AE%97" class="headerlink" title="24.利率计算"></a>24.利率计算</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">float</span> r,p=<span class="number">1</span>;</span><br/><span class="line"> <span class="type">int</span> n;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%f %d&#34;</span>,&amp;r,&amp;n);</span><br/><span class="line"> <span class="keyword">for</span>(;n&gt;<span class="number">0</span>;n--)</span><br/><span class="line">  p*=<span class="number">1</span>+r;</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%.2f&#34;</span>,p);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="25-购房贷款计算"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#25-%E8%B4%AD%E6%88%BF%E8%B4%B7%E6%AC%BE%E8%AE%A1%E7%AE%97" class="headerlink" title="25.购房贷款计算"></a>25.购房贷款计算</h3><blockquote><p>纯粹拿来恶心人的（虽然确实有实际应用背景</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">float</span> month=<span class="number">0</span>,d,p,r;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%f %f %f&#34;</span>,&amp;d,&amp;p,&amp;r);</span><br/><span class="line"> month=<span class="built_in">log10</span>((<span class="type">double</span>)(p/(p-d*r)))/<span class="built_in">log10</span>(<span class="number">1</span>+(<span class="type">double</span>)r);</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%.2f&#34;</span>,month);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="26-字符加密"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#26-%E5%AD%97%E7%AC%A6%E5%8A%A0%E5%AF%86" class="headerlink" title="26.字符加密"></a>26.字符加密</h3><p>正经解法：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">int</span> ch[<span class="number">5</span>] = <span class="string">&#34;China&#34;</span>, i;</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br/><span class="line">  <span class="built_in">putchar</span>(ch[i] + <span class="number">4</span>);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>不正经解法（大家别学我）：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;Glmre&#34;</span>);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>其实这就是crypto（密码学）中的凯撒密码。</p><h3 id="27-课堂练习题-沸水降温曲线"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#27-%E8%AF%BE%E5%A0%82%E7%BB%83%E4%B9%A0%E9%A2%98-%E6%B2%B8%E6%B0%B4%E9%99%8D%E6%B8%A9%E6%9B%B2%E7%BA%BF" class="headerlink" title="27.课堂练习题-沸水降温曲线"></a>27.课堂练习题-沸水降温曲线</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">int</span> m,s;</span><br/><span class="line"> <span class="type">float</span> t;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d %d&#34;</span>,&amp;m,&amp;s);</span><br/><span class="line"> t=m+s/<span class="number">60.0</span>;</span><br/><span class="line"> <span class="keyword">if</span>(t&gt;<span class="number">50</span>)</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;%.1f&#34;</span>,<span class="number">20.0</span>);</span><br/><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(t&gt;<span class="number">30</span>)</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;%.1f&#34;</span>,<span class="number">30</span>-(t<span class="number">-30</span>)/<span class="number">2</span>);</span><br/><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(t&gt;<span class="number">10</span>)</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;%.1f&#34;</span>,<span class="number">50</span>-(t<span class="number">-10</span>));</span><br/><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(t&gt;=<span class="number">0</span>)</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;%.1f&#34;</span>,<span class="number">100</span><span class="number">-5</span>*t);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><hr/><p><em>第三次上机的题（不过标的是2？）难度很简单，唯一的问题是我没睡醒</em><br/><em>《关于我8:00-12:00上机，我11:30醒这件事》</em></p><h3 id="1-数列分段-1"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#1-%E6%95%B0%E5%88%97%E5%88%86%E6%AE%B5-1" class="headerlink" title="1.数列分段"></a>1.数列分段</h3><p>这下我终于知道那个第一题是哪来的了（</p><p>还请跳到第一题（</p><p><em>为了保持序号数值和xdoj题数一样，此处序号就用1了</em></p><h3 id="28-最小差值"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#28-%E6%9C%80%E5%B0%8F%E5%B7%AE%E5%80%BC" class="headerlink" title="28.最小差值"></a>28.最小差值</h3><p>因为任意两个数都得作差，所以偷了个懒，用<code>malloc</code>把输入存到一个数组里了。</p><p>其实<code>malloc</code>完后，和数组的用法就差不多了。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> i, j, res, a, *arr;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;a);</span><br/><span class="line"> arr = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * a);</span><br/><span class="line"> <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; a; i++) {</span><br/><span class="line">  <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;arr[i]);</span><br/><span class="line"> }</span><br/><span class="line"> <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; a - <span class="number">1</span>; i++)</span><br/><span class="line">  <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; a; j++)</span><br/><span class="line">   <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">1</span>)</span><br/><span class="line">    res = arr[i] - arr[j] &lt; <span class="number">0</span> ? arr[j] - arr[i] : arr[i] - arr[j];</span><br/><span class="line">   <span class="keyword">else</span> {</span><br/><span class="line">    <span class="keyword">if</span> (res &gt; (arr[i] - arr[j] &lt; <span class="number">0</span> ? arr[j] - arr[i] : arr[i] - arr[j]))</span><br/><span class="line">     res = (arr[i] - arr[j] &lt; <span class="number">0</span> ? arr[j] - arr[i] : arr[i] - arr[j]);</span><br/><span class="line">   }</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>, res);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="29-车牌限行-分支结构"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#29-%E8%BD%A6%E7%89%8C%E9%99%90%E8%A1%8C-%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84" class="headerlink" title="29.车牌限行_分支结构"></a>29.车牌限行_分支结构</h3><p>看到群里有人在<code>if</code>里套了<code>switch</code>。其实没必要，限行的号码都是很有规律的。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> a, b, c;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d %d %d&#34;</span>, &amp;a, &amp;b, &amp;c);</span><br/><span class="line"> <span class="keyword">if</span> (a &gt; <span class="number">5</span> || b &lt; <span class="number">200</span>)</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;%d no&#34;</span>, c % <span class="number">10</span>);</span><br/><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (b &lt; <span class="number">400</span>)</span><br/><span class="line">  <span class="keyword">if</span> (c % <span class="number">5</span> == a % <span class="number">5</span>)</span><br/><span class="line">   <span class="built_in">printf</span>(<span class="string">&#34;%d yes&#34;</span>, c % <span class="number">10</span>);</span><br/><span class="line">  <span class="keyword">else</span></span><br/><span class="line">   <span class="built_in">printf</span>(<span class="string">&#34;%d no&#34;</span>, c % <span class="number">10</span>);</span><br/><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (b &gt;= <span class="number">400</span>)</span><br/><span class="line">  <span class="keyword">if</span> (c % <span class="number">2</span> == a % <span class="number">2</span>)</span><br/><span class="line">   <span class="built_in">printf</span>(<span class="string">&#34;%d yes&#34;</span>, c % <span class="number">10</span>);</span><br/><span class="line">  <span class="keyword">else</span></span><br/><span class="line">   <span class="built_in">printf</span>(<span class="string">&#34;%d no&#34;</span>, c % <span class="number">10</span>);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>另外可别学我<code>if</code>和<code>else</code>不加括号，初学的话很容易弄不清<code>else</code>是属于哪个<code>else</code>的。对于这个，知道<code>else</code>属于最近的<code>if</code>就行。</p><h3 id="30-计算某月天数-分支结构"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#30-%E8%AE%A1%E7%AE%97%E6%9F%90%E6%9C%88%E5%A4%A9%E6%95%B0-%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84" class="headerlink" title="30.计算某月天数_分支结构"></a>30.计算某月天数_分支结构</h3><p>这里有个<code>switch</code>的小技巧：<code>case</code>语句可以通过不加<code>break</code>来合并。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">calc</span><span class="params">(<span class="type">int</span> y, <span class="type">int</span> m)</span> {</span><br/><span class="line"> <span class="keyword">switch</span> (m) {</span><br/><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br/><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br/><span class="line">  <span class="keyword">case</span> <span class="number">5</span>:</span><br/><span class="line">  <span class="keyword">case</span> <span class="number">7</span>:</span><br/><span class="line">  <span class="keyword">case</span> <span class="number">8</span>:</span><br/><span class="line">  <span class="keyword">case</span> <span class="number">10</span>:</span><br/><span class="line">  <span class="keyword">case</span> <span class="number">12</span>:</span><br/><span class="line">   <span class="keyword">return</span> <span class="number">31</span>;</span><br/><span class="line"></span><br/><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br/><span class="line">  <span class="keyword">case</span> <span class="number">6</span>:</span><br/><span class="line">  <span class="keyword">case</span> <span class="number">9</span>:</span><br/><span class="line">  <span class="keyword">case</span> <span class="number">11</span>:</span><br/><span class="line">   <span class="keyword">return</span> <span class="number">30</span>;</span><br/><span class="line"></span><br/><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br/><span class="line">   <span class="keyword">return</span> (y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>) || y % <span class="number">400</span> == <span class="number">0</span> ? <span class="number">29</span> : <span class="number">28</span>;</span><br/><span class="line"> }</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> a, b;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d %d&#34;</span>, &amp;a, &amp;b);</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>, calc(a, b));</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="31-计算整数各位数字之和"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#31-%E8%AE%A1%E7%AE%97%E6%95%B4%E6%95%B0%E5%90%84%E4%BD%8D%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C" class="headerlink" title="31.计算整数各位数字之和"></a>31.计算整数各位数字之和</h3><p>正好就是上面写的通用方法（</p><p>请上翻到10的通用写法。</p><p>所以说嘛，多想一点总是没错的。</p><h3 id="32-最大公约数"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#32-%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0" class="headerlink" title="32.最大公约数"></a>32.最大公约数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> {</span><br/><span class="line"> <span class="type">int</span> res = <span class="number">0</span>, i;</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">if</span> (a &gt; b) {</span><br/><span class="line">  i = a;</span><br/><span class="line">  a = b;</span><br/><span class="line">  b = i;</span><br/><span class="line"> }</span><br/><span class="line"> <span class="keyword">if</span> (a == <span class="number">0</span>)</span><br/><span class="line">  <span class="keyword">return</span> b;</span><br/><span class="line"> <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= a; i++)</span><br/><span class="line">  <span class="keyword">if</span> (a % i == <span class="number">0</span> &amp;&amp; b % i == <span class="number">0</span>)</span><br/><span class="line">   res = i;</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> res;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> a, b;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d %d&#34;</span>, &amp;a, &amp;b);</span><br/><span class="line"> <span class="keyword">if</span> (a &gt;= <span class="number">0</span> &amp;&amp; b &lt; <span class="number">10000</span>)</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>, gcd(a, b));</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>本来是想用</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">i=a,a=b,b=i;</span><br/></pre></td></tr></tbody></table></figure><p>来做a和b值的交换的，但是平台上那个hmp编译器好像不支持逗号运算符？</p><p>还是我搞错编译器了呢？（笑）</p><h3 id="33-角谷定理"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#33-%E8%A7%92%E8%B0%B7%E5%AE%9A%E7%90%86" class="headerlink" title="33.角谷定理"></a>33.角谷定理</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> a, i;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;a);</span><br/><span class="line"> <span class="keyword">for</span> (i = <span class="number">0</span>; a != <span class="number">1</span>; i++)</span><br/><span class="line">  <span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">0</span>)</span><br/><span class="line">   a /= <span class="number">2</span>;</span><br/><span class="line">  <span class="keyword">else</span></span><br/><span class="line">   a = (a *= <span class="number">3</span>) + <span class="number">1</span>;</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>, i);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="34-PM2-5"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#34-PM2-5" class="headerlink" title="34.PM2.5"></a>34.PM2.5</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> res[<span class="number">6</span>] = {<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>}, data, a, i, sum;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;a);</span><br/><span class="line"> <span class="keyword">for</span> (i = <span class="number">0</span>, sum = <span class="number">0</span>; i &lt; a; i++) {</span><br/><span class="line">  <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;data);</span><br/><span class="line">  <span class="keyword">if</span> (data &gt; <span class="number">300</span>)</span><br/><span class="line">   res[<span class="number">5</span>]++;</span><br/><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (data &gt; <span class="number">200</span>)</span><br/><span class="line">   res[<span class="number">4</span>]++;</span><br/><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (data &gt; <span class="number">150</span>)</span><br/><span class="line">   res[<span class="number">3</span>]++;</span><br/><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (data &gt; <span class="number">100</span>)</span><br/><span class="line">   res[<span class="number">2</span>]++;</span><br/><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (data &gt; <span class="number">50</span>)</span><br/><span class="line">   res[<span class="number">1</span>]++;</span><br/><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (data &gt;= <span class="number">0</span>)</span><br/><span class="line">   res[<span class="number">0</span>]++;</span><br/><span class="line">  sum += data;</span><br/><span class="line"> }</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%.2f\n&#34;</span>, (<span class="type">float</span>)sum / a);</span><br/><span class="line"> <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;%d &#34;</span>, res[i]);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="35-气温波动"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#35-%E6%B0%94%E6%B8%A9%E6%B3%A2%E5%8A%A8" class="headerlink" title="35.气温波动"></a>35.气温波动</h3><p>注意，是<strong>相邻两天波动的绝对值最大值</strong>，而不是所有天温度的最大值减去最小值。</p><p>这里的<code>prev</code>和<code>curr</code>表示上一个和当前的，是写链表的习惯。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> curr, prev, res, a, i, tmp;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;a);</span><br/><span class="line"> <span class="keyword">if</span> (a &gt;= <span class="number">2</span> &amp;&amp; a &lt;= <span class="number">30</span>) {</span><br/><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>, res = <span class="number">0</span>; i &lt; a; i++) {</span><br/><span class="line">   <span class="keyword">if</span> (i == <span class="number">0</span>) {</span><br/><span class="line">    <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;prev);</span><br/><span class="line">    <span class="keyword">continue</span>;</span><br/><span class="line">   }</span><br/><span class="line">   <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;curr);</span><br/><span class="line">   <span class="keyword">if</span> (<span class="built_in">abs</span>(curr - prev) &gt; res)</span><br/><span class="line">    res = <span class="built_in">abs</span>(curr - prev);</span><br/><span class="line">   prev = curr;</span><br/><span class="line">  }</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>, res);</span><br/><span class="line"> }</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="36-完全平方数"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#36-%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0" class="headerlink" title="36.完全平方数"></a>36.完全平方数</h3><p>前面有个同学问到过这个。需要注意，<code>==</code>的使用前提是两边的数据类型相同，所以可以这么写：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">sqrt</span>(a) - (<span class="type">int</span>)<span class="built_in">sqrt</span>(a) == <span class="number">0</span>)</span><br/><span class="line">    statement;</span><br/></pre></td></tr></tbody></table></figure><p>而不能这么写：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">sqrt</span>(a) == (<span class="type">int</span>)<span class="built_in">sqrt</span>(a))</span><br/><span class="line">    statement;</span><br/></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> a;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;a);</span><br/><span class="line"> <span class="keyword">if</span> (<span class="built_in">sqrt</span>(a) - (<span class="type">int</span>)<span class="built_in">sqrt</span>(a) == <span class="number">0</span>)</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>, (<span class="type">int</span>)<span class="built_in">sqrt</span>(a));</span><br/><span class="line"> <span class="keyword">else</span></span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;no&#34;</span>);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="37-选号程序"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#37-%E9%80%89%E5%8F%B7%E7%A8%8B%E5%BA%8F" class="headerlink" title="37.选号程序"></a>37.选号程序</h3><p>做这题的时候又犯迷糊了。。其实只需要相邻两数依次比较就行。第一回做的时候直接来了个<code>O(n!)</code>的比较，纯属没睡醒。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">calc</span><span class="params">(<span class="type">int</span> num)</span>;</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> a, i, data, res;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;a);</span><br/><span class="line"> <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; a; i++) {</span><br/><span class="line">  <span class="keyword">if</span> (i == <span class="number">0</span>) {</span><br/><span class="line">   <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;res);</span><br/><span class="line">   <span class="keyword">continue</span>;</span><br/><span class="line">  }</span><br/><span class="line">  <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;data);</span><br/><span class="line">  <span class="keyword">if</span> (calc(res) &lt; calc(data))</span><br/><span class="line">   res = data;</span><br/><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (calc(res) == calc(data))</span><br/><span class="line">   res = res &gt; data ? res : data;</span><br/><span class="line"> }</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>, res);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">calc</span><span class="params">(<span class="type">int</span> num)</span> {</span><br/><span class="line"> <span class="keyword">if</span> (num &gt;= <span class="number">10</span>)</span><br/><span class="line">  <span class="keyword">return</span> num % <span class="number">10</span> + calc((num - num % <span class="number">10</span>) / <span class="number">10</span>);</span><br/><span class="line"> <span class="keyword">else</span></span><br/><span class="line">  <span class="keyword">return</span> num;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="38-自然数分解"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#38-%E8%87%AA%E7%84%B6%E6%95%B0%E5%88%86%E8%A7%A3" class="headerlink" title="38.自然数分解"></a>38.自然数分解</h3><p>其实好多时候都没有用函数的必要，除了必须递归的算法。</p><p>大多数时候，我这么用，只是用了自己总结的模板而已：大多数题都是输入数，经过处理再输出数。</p><p>重复的部分我是懒得再敲一遍的。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">calc</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> i)</span> {</span><br/><span class="line"> <span class="keyword">return</span> <span class="number">2</span> * i - (a + <span class="number">1</span>);</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> a, i;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;a);</span><br/><span class="line"> <span class="keyword">if</span> (a &gt; <span class="number">0</span> &amp;&amp; a &lt; <span class="number">30</span>)</span><br/><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; a + <span class="number">1</span>; i++)</span><br/><span class="line">   <span class="built_in">printf</span>(<span class="string">&#34;%d &#34;</span>, a * a + calc(a, i));</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="39-日期计算"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#39-%E6%97%A5%E6%9C%9F%E8%AE%A1%E7%AE%97" class="headerlink" title="39.日期计算"></a>39.日期计算</h3><p>怎么说呢，难度简单，就是做的有些晕。</p><p>果然下次还是得睡好啊（叹）。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> y, m, d, n, n0, i, </span><br/><span class="line">  arr_n[<span class="number">12</span>] = {<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>}, </span><br/><span class="line">  arr_o[<span class="number">12</span>] = {<span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>};</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d %d&#34;</span>, &amp;y, &amp;n);</span><br/><span class="line"> <span class="keyword">if</span> (y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span> || y % <span class="number">400</span> == <span class="number">0</span>) {</span><br/><span class="line">  <span class="keyword">for</span> (m = <span class="number">1</span>; m &lt;= <span class="number">12</span>; m++) {</span><br/><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>, n0 = <span class="number">0</span>; i &lt; m; i++)</span><br/><span class="line">    n0 += arr_o[i];</span><br/><span class="line">   <span class="keyword">if</span> (n &lt;= n0) {</span><br/><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, n0 = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++)</span><br/><span class="line">     n0 += arr_o[i];</span><br/><span class="line">    d = n - n0;</span><br/><span class="line">    <span class="keyword">break</span>;</span><br/><span class="line">   }</span><br/><span class="line">  }</span><br/><span class="line"> } <span class="keyword">else</span> {</span><br/><span class="line">  <span class="keyword">for</span> (m = <span class="number">1</span>; m &lt;= <span class="number">12</span>; m++) {</span><br/><span class="line">   <span class="keyword">for</span> (n0 = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; m; i++)</span><br/><span class="line">    n0 += arr_n[i];</span><br/><span class="line">   <span class="keyword">if</span> (n &lt;= n0) {</span><br/><span class="line">    <span class="keyword">for</span> (n0 = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++)</span><br/><span class="line">     n0 += arr_n[i];</span><br/><span class="line">    d = n - n0;</span><br/><span class="line">    <span class="keyword">break</span>;</span><br/><span class="line">   }</span><br/><span class="line">  }</span><br/><span class="line"> }</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%d %d&#34;</span>, m, d);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="40-跳一跳"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#40-%E8%B7%B3%E4%B8%80%E8%B7%B3" class="headerlink" title="40.跳一跳"></a>40.跳一跳</h3><p>有个坑：第一个值为2的话，如果没初始化<code>flag=0</code>的话就会出错。</p><p>给未初始化的值自增肯定有问题啊。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> a, res = <span class="number">0</span>, flag=<span class="number">0</span>;</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;a) &amp;&amp; a != <span class="number">0</span>)</span><br/><span class="line">  <span class="keyword">if</span> (a == <span class="number">1</span>) {</span><br/><span class="line">   res++;</span><br/><span class="line">   flag = <span class="number">0</span>;</span><br/><span class="line">  } <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">2</span>) {</span><br/><span class="line">   flag++;</span><br/><span class="line">   res += <span class="number">2</span> * flag;</span><br/><span class="line">  }</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>, res);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="41-累加和校验"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#41-%E7%B4%AF%E5%8A%A0%E5%92%8C%E6%A0%A1%E9%AA%8C" class="headerlink" title="41.累加和校验"></a>41.累加和校验</h3><p>md，搞了半天，原来是输入得用<code>EOF</code>结束。我就说看错误列表里全是time out，原来oj上输入的终止符是<code>EOF</code>。刚开始用的<code>&#39;\n&#39;</code>，难怪过不了。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">char</span> ch;</span><br/><span class="line"> <span class="type">int</span> res = <span class="number">0</span>;</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">while</span> ((ch = getchar()) != EOF)</span><br/><span class="line">  res += ch;</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%d\n&#34;</span>, res % <span class="number">256</span>);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><hr/><p><em>第四次上机题很简单，不用想，但是写起来挺费时间</em><br/><em>待会再写分析</em></p><h3 id="42-阶梯电价1-分支结构"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#42-%E9%98%B6%E6%A2%AF%E7%94%B5%E4%BB%B71-%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84" class="headerlink" title="42.阶梯电价1_分支结构"></a>42.阶梯电价1_分支结构</h3><p>浪费时间。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">double</span> a, res;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%lf&#34;</span>, &amp;a);</span><br/><span class="line"> <span class="keyword">if</span> (a &gt; <span class="number">210</span>) {</span><br/><span class="line">  res = (a - <span class="number">210</span>) * <span class="number">0.70</span> + <span class="number">110</span>;</span><br/><span class="line"> } <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; <span class="number">110</span>) {</span><br/><span class="line">  res = (a - <span class="number">110</span>) * <span class="number">0.55</span> + <span class="number">55</span>;</span><br/><span class="line"> } <span class="keyword">else</span> <span class="keyword">if</span> (a &gt;= <span class="number">0</span>) {</span><br/><span class="line">  res = a * <span class="number">0.5</span>;</span><br/><span class="line"> }</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%.2lf&#34;</span>, res);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="43-完数"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#43-%E5%AE%8C%E6%95%B0" class="headerlink" title="43.完数"></a>43.完数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">is_ok_num</span><span class="params">(<span class="type">int</span> num)</span>;</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> i, a, b;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d %d&#34;</span>, &amp;a, &amp;b);</span><br/><span class="line"> <span class="keyword">for</span> (i = a; i &lt;= b; i++)</span><br/><span class="line">  <span class="keyword">if</span> (is_ok_num(i))</span><br/><span class="line">   <span class="built_in">printf</span>(<span class="string">&#34;%d\n&#34;</span>, i);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">is_ok_num</span><span class="params">(<span class="type">int</span> num)</span> {</span><br/><span class="line"> <span class="type">int</span> i, add;</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">for</span> (i = <span class="number">1</span>, add = <span class="number">0</span>; i &lt; num; i++)</span><br/><span class="line">  add += (num % i == <span class="number">0</span> ? i : <span class="number">0</span>);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> num == add ? <span class="number">1</span> : <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="44-整数分析"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#44-%E6%95%B4%E6%95%B0%E5%88%86%E6%9E%90" class="headerlink" title="44.整数分析"></a>44.整数分析</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> a, max, min, bit;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;a);</span><br/><span class="line"> max = min = a % <span class="number">10</span>;</span><br/><span class="line"> bit = a == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br/><span class="line"> <span class="keyword">while</span> (a != <span class="number">0</span>) {</span><br/><span class="line">  <span class="type">int</span> c = a % <span class="number">10</span>;</span><br/><span class="line">  max = max &gt;= c ? max : c;</span><br/><span class="line">  min = min &lt;= c ? min : c;</span><br/><span class="line">  a = (a -= a % <span class="number">10</span>) / <span class="number">10</span>;</span><br/><span class="line">  bit++;</span><br/><span class="line"> }</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%d %d %d\n&#34;</span>, bit, max, min);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="45-折点计数"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#45-%E6%8A%98%E7%82%B9%E8%AE%A1%E6%95%B0" class="headerlink" title="45.折点计数"></a>45.折点计数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> a, i, curr, prev, next, count;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;a);</span><br/><span class="line"> <span class="keyword">for</span> (i = <span class="number">1</span>, count = <span class="number">0</span>; i &lt; a - <span class="number">1</span>; i++)</span><br/><span class="line">  <span class="keyword">if</span> (i == <span class="number">1</span>) {</span><br/><span class="line">   <span class="built_in">scanf</span>(<span class="string">&#34;%d %d %d&#34;</span>, &amp;prev, &amp;curr, &amp;next);</span><br/><span class="line">   <span class="keyword">if</span> ((curr - prev) * (next - curr) &lt; <span class="number">0</span>)</span><br/><span class="line">    count++;</span><br/><span class="line">   prev = curr, curr = next;</span><br/><span class="line">  } <span class="keyword">else</span> {</span><br/><span class="line">   <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;next);</span><br/><span class="line">   <span class="keyword">if</span> ((curr - prev) * (next - curr) &lt; <span class="number">0</span>)</span><br/><span class="line">    count++;</span><br/><span class="line">   prev = curr, curr = next;</span><br/><span class="line">  }</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>, count);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="46-寻找最大整数-分支结构"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#46-%E5%AF%BB%E6%89%BE%E6%9C%80%E5%A4%A7%E6%95%B4%E6%95%B0-%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84" class="headerlink" title="46.寻找最大整数_分支结构"></a>46.寻找最大整数_分支结构</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> num, i;</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br/><span class="line">  <span class="keyword">if</span> (i == <span class="number">1</span>) {</span><br/><span class="line">   <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;num);</span><br/><span class="line">   <span class="keyword">continue</span>;</span><br/><span class="line">  } <span class="keyword">else</span> {</span><br/><span class="line">   <span class="type">int</span> curr;</span><br/><span class="line">   <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;curr);</span><br/><span class="line">   num = curr &gt; num ? curr : num;</span><br/><span class="line">  }</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>, num);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="47-字符处理-分支结构"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#47-%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86-%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84" class="headerlink" title="47.字符处理_分支结构"></a>47.字符处理_分支结构</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> ch;</span><br/><span class="line"></span><br/><span class="line"> ch = getchar();</span><br/><span class="line"> <span class="keyword">if</span> (ch &gt;= <span class="number">65</span> &amp;&amp; ch &lt;= <span class="number">90</span>)</span><br/><span class="line">  <span class="built_in">putchar</span>(ch + <span class="number">32</span>);</span><br/><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (ch &gt;= <span class="number">97</span> &amp;&amp; ch &lt;= <span class="number">122</span>)</span><br/><span class="line">  <span class="built_in">putchar</span>(ch - <span class="number">32</span>);</span><br/><span class="line"> <span class="keyword">else</span></span><br/><span class="line">  <span class="built_in">putchar</span>(ch);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="48-成绩分级1-分支结构"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#48-%E6%88%90%E7%BB%A9%E5%88%86%E7%BA%A71-%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84" class="headerlink" title="48.成绩分级1_分支结构"></a>48.成绩分级1_分支结构</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> score;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;score);</span><br/><span class="line"> <span class="keyword">if</span> (score &gt;= <span class="number">90</span> &amp;&amp; score &lt;= <span class="number">100</span>)</span><br/><span class="line">  <span class="built_in">putchar</span>(<span class="string">&#39;A&#39;</span>);</span><br/><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>)</span><br/><span class="line">  <span class="built_in">putchar</span>(<span class="string">&#39;B&#39;</span>);</span><br/><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>)</span><br/><span class="line">  <span class="built_in">putchar</span>(<span class="string">&#39;C&#39;</span>);</span><br/><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>)</span><br/><span class="line">  <span class="built_in">putchar</span>(<span class="string">&#39;D&#39;</span>);</span><br/><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">0</span>)</span><br/><span class="line">  <span class="built_in">putchar</span>(<span class="string">&#39;E&#39;</span>);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="49-abc组合"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#49-abc%E7%BB%84%E5%90%88" class="headerlink" title="49.abc组合"></a>49.abc组合</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> num, a, b, c;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;num);</span><br/><span class="line"> <span class="keyword">for</span> (a = <span class="number">0</span>; a &lt;= <span class="number">9</span>; a++)</span><br/><span class="line">  <span class="keyword">for</span> (b = <span class="number">0</span>; b &lt;= <span class="number">9</span>; b++)</span><br/><span class="line">   <span class="keyword">for</span> (c = <span class="number">0</span>; c &lt;= <span class="number">9</span>; c++)</span><br/><span class="line">    <span class="keyword">if</span> ((a + c) * <span class="number">100</span> + b * <span class="number">20</span> + (a + c) == num)</span><br/><span class="line">     <span class="built_in">printf</span>(<span class="string">&#34;%d %d %d\n&#34;</span>, a, b, c);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="50-直角三角形判断-分支结构"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#50-%E7%9B%B4%E8%A7%92%E4%B8%89%E8%A7%92%E5%BD%A2%E5%88%A4%E6%96%AD-%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84" class="headerlink" title="50.直角三角形判断_分支结构"></a>50.直角三角形判断_分支结构</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> a[<span class="number">3</span>], i, j, tmp;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d %d %d&#34;</span>, &amp;a[<span class="number">0</span>], &amp;a[<span class="number">1</span>], &amp;a[<span class="number">2</span>]);</span><br/><span class="line"> <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br/><span class="line">  <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; <span class="number">3</span>; j++)</span><br/><span class="line">   <span class="keyword">if</span> (a[i] &gt; a[j])</span><br/><span class="line">    tmp = a[i], a[i] = a[j], a[j] = tmp;</span><br/><span class="line"> <span class="keyword">if</span> (a[<span class="number">0</span>] + a[<span class="number">1</span>] &gt; a[<span class="number">2</span>] &amp;&amp; a[<span class="number">0</span>] + a[<span class="number">2</span>] &gt; a[<span class="number">1</span>] &amp;&amp; a[<span class="number">1</span>] + a[<span class="number">2</span>] &gt; a[<span class="number">0</span>])</span><br/><span class="line">  <span class="keyword">if</span> (a[<span class="number">0</span>] * a[<span class="number">0</span>] + a[<span class="number">1</span>] * a[<span class="number">1</span>] == a[<span class="number">2</span>] * a[<span class="number">2</span>])</span><br/><span class="line">   <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>, a[<span class="number">0</span>]*a[<span class="number">1</span>]);</span><br/><span class="line">  <span class="keyword">else</span></span><br/><span class="line">   <span class="built_in">printf</span>(<span class="string">&#34;no&#34;</span>);</span><br/><span class="line"> <span class="keyword">else</span></span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;no&#34;</span>);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="51-工资计算-分支结构"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#51-%E5%B7%A5%E8%B5%84%E8%AE%A1%E7%AE%97-%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84" class="headerlink" title="51.工资计算_分支结构"></a>51.工资计算_分支结构</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> num;</span><br/><span class="line"> <span class="type">double</span> res;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;num);</span><br/><span class="line"> <span class="keyword">if</span> (num &gt; <span class="number">3500</span>) {</span><br/><span class="line">  num -= <span class="number">3500</span>;</span><br/><span class="line">  <span class="keyword">if</span> (num &gt; <span class="number">35000</span>)</span><br/><span class="line">   res = (num - <span class="number">35000</span>) * <span class="number">0.7</span> + <span class="number">26000</span> * <span class="number">0.75</span> + <span class="number">4500</span> * <span class="number">0.8</span> +  <span class="number">3000</span> * <span class="number">0.9</span> + <span class="number">1500</span> * <span class="number">0.97</span>;</span><br/><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (num &gt; <span class="number">9000</span>)</span><br/><span class="line">   res = (num - <span class="number">9000</span>) * <span class="number">0.75</span> + <span class="number">4500</span> * <span class="number">0.8</span> +  <span class="number">3000</span> * <span class="number">0.9</span> + <span class="number">1500</span> * <span class="number">0.97</span>;</span><br/><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (num &gt; <span class="number">4500</span>)</span><br/><span class="line">   res = (num - <span class="number">4500</span>) * <span class="number">0.8</span> + <span class="number">3000</span> * <span class="number">0.9</span> + <span class="number">1500</span> * <span class="number">0.97</span>;</span><br/><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (num &gt; <span class="number">1500</span>)</span><br/><span class="line">   res = (num - <span class="number">1500</span>) * <span class="number">0.9</span> + <span class="number">1500</span> * <span class="number">0.97</span>;</span><br/><span class="line">  <span class="keyword">else</span></span><br/><span class="line">   res = num * <span class="number">0.97</span>;</span><br/><span class="line">  res += <span class="number">3500</span>;</span><br/><span class="line"> } <span class="keyword">else</span></span><br/><span class="line">  res = num;</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>, (<span class="type">int</span>)res);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="52-平均数"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#52-%E5%B9%B3%E5%9D%87%E6%95%B0" class="headerlink" title="52.平均数"></a>52.平均数</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> a, i, num;</span><br/><span class="line"> <span class="type">double</span> res;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;a);</span><br/><span class="line"> <span class="keyword">for</span> (i = <span class="number">0</span>, res = <span class="number">0</span>; i &lt; a; i++) {</span><br/><span class="line">  <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;num);</span><br/><span class="line">  res += <span class="number">1</span> / (<span class="type">double</span>)a * (<span class="type">double</span>)num;</span><br/><span class="line"> }</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%.2lf&#34;</span>, res);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><hr/><p><em>第五次上机练习题</em></p><p><em>难度简单，随便做就行</em></p><p><em>服务器卡的让人没心情做。。</em></p><h2 id="53-水仙花数"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#53-%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0" class="headerlink" title="53.水仙花数"></a>53.水仙花数</h2><p>水仙花数指<strong>大于等于三位</strong>的数，如果<strong>各位的位数次幂的和等于自身</strong>，则称为水仙花数。</p><p>要求交一个函数。。就，稍微有点麻烦。本来想用函数中声明函数的奇淫技巧，但是这样就没意思了，所以还是算了。。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">function</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="comment">/*  tmp     ：临时变量，用于交换a，b的值 </span></span><br/><span class="line"><span class="comment">        i       ：计数变量，用于表示a到b（含a，b）之间的所有数</span></span><br/><span class="line"><span class="comment">        count   ：计数变量，用于存储水仙花数的个数</span></span><br/><span class="line"><span class="comment">    */</span></span><br/><span class="line">    <span class="type">int</span> tmp, i, count;</span><br/><span class="line"></span><br/><span class="line">    <span class="comment">/*  交换a，b的值来确保a&lt;b */</span></span><br/><span class="line">    a &gt; b ? tmp = a, a = b, b = tmp : <span class="number">1</span>;</span><br/><span class="line">    <span class="comment">/*  循环，遍历含a，b的在a，b间的所有数 */</span></span><br/><span class="line">    <span class="keyword">for</span> (i = a, count = <span class="number">0</span>; i &lt;= b; i++)</span><br/><span class="line">    {</span><br/><span class="line">        <span class="comment">/*  bit     ：存储数字i的位数</span></span><br/><span class="line"><span class="comment">            bit_sum ：存储数字i的各位幂次和</span></span><br/><span class="line"><span class="comment">            i_cpy   ：i的复制，用来参与求i位数的计算，防止i的值改变，影响循环</span></span><br/><span class="line"><span class="comment">            j       ：循环变量，用来参与求i各位幂次和的运算</span></span><br/><span class="line"><span class="comment">        */</span></span><br/><span class="line">        <span class="type">int</span> bit, bit_sum, i_cpy = i, j;</span><br/><span class="line">        <span class="comment">/*  计算i的位数，存储到变量bit中 */</span></span><br/><span class="line">        <span class="keyword">for</span> (bit = <span class="number">1</span>; i_cpy / (<span class="type">int</span>)<span class="built_in">pow</span>(<span class="number">10</span>, bit) != <span class="number">0</span>; bit++)</span><br/><span class="line">            ;</span><br/><span class="line">        <span class="comment">/*  恢复i_cpy的值为i，以便于参与接下来求i各位幂次和的运算 */</span></span><br/><span class="line">        i_cpy = i;</span><br/><span class="line">        <span class="comment">/*  计算i的各位幂次和 */</span></span><br/><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>, bit_sum = <span class="number">0</span>; j &lt; bit; j++)</span><br/><span class="line">            bit_sum += (<span class="type">int</span>)<span class="built_in">pow</span>(i_cpy % <span class="number">10</span>, bit), i_cpy /= <span class="number">10</span>;</span><br/><span class="line">        <span class="comment">/*  根据水仙花数的定义（大于等于三位，各位幂次和为其本身）判断i是否为水仙花数 */</span></span><br/><span class="line">        <span class="keyword">if</span> (i == bit_sum &amp;&amp; bit &gt; <span class="number">2</span>)</span><br/><span class="line">            count++;</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> count;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="54-哥德巴赫猜想"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#54-%E5%93%A5%E5%BE%B7%E5%B7%B4%E8%B5%AB%E7%8C%9C%E6%83%B3" class="headerlink" title="54.哥德巴赫猜想"></a>54.哥德巴赫猜想</h2><p>先吐槽下XDOJ上的<strong>歌德巴赫猜想</strong>（xswl</p><p>思路就是<code>for</code>循环，逐组尝试。注意C语言的模块化思想，设计程序时从抽象到具体。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">is_prime</span><span class="params">(<span class="type">int</span> num)</span> {</span><br/><span class="line"> <span class="type">int</span> i, res;</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">for</span> (i = <span class="number">1</span>, res = <span class="number">1</span>; i &lt; num; i++)</span><br/><span class="line">  <span class="keyword">if</span> (num % i == <span class="number">0</span> &amp;&amp; i != <span class="number">1</span>)</span><br/><span class="line">   res = <span class="number">0</span>;</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> res;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> a, i, min, max;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;a);</span><br/><span class="line"> <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; a; i++)</span><br/><span class="line">  <span class="keyword">if</span> (is_prime(i) &amp;&amp; is_prime(a - i)) {</span><br/><span class="line">   <span class="built_in">printf</span>(<span class="string">&#34;%d %d&#34;</span>, i, a - i);</span><br/><span class="line">   <span class="keyword">break</span>;</span><br/><span class="line">  }</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="55-斐波纳契数列素数判断"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#55-%E6%96%90%E6%B3%A2%E7%BA%B3%E5%A5%91%E6%95%B0%E5%88%97%E7%B4%A0%E6%95%B0%E5%88%A4%E6%96%AD" class="headerlink" title="55.斐波纳契数列素数判断"></a>55.斐波纳契数列素数判断</h2><p>直接把上面写好的<code>is_prime</code>拿过来，再写个<code>fib</code>，就完成了。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">is_prime</span><span class="params">(<span class="type">int</span> num)</span> {</span><br/><span class="line"> <span class="type">int</span> i, res;</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">for</span> (i = <span class="number">1</span>, res = <span class="number">1</span>; i &lt; num; i++)</span><br/><span class="line">  <span class="keyword">if</span> (num % i == <span class="number">0</span> &amp;&amp; i != <span class="number">1</span>)</span><br/><span class="line">   res = <span class="number">0</span>;</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> res;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> i)</span> {</span><br/><span class="line"> <span class="keyword">if</span> (i &gt; <span class="number">2</span>)</span><br/><span class="line">  <span class="keyword">return</span> fib(i - <span class="number">1</span>) + fib(i - <span class="number">2</span>);</span><br/><span class="line"> <span class="keyword">else</span></span><br/><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> num;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;num);</span><br/><span class="line"> <span class="keyword">if</span> (is_prime(fib(num)))</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;yes&#34;</span>);</span><br/><span class="line"> <span class="keyword">else</span></span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>, fib(num));</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="56-数列求和"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#56-%E6%95%B0%E5%88%97%E6%B1%82%E5%92%8C" class="headerlink" title="56.数列求和"></a>56.数列求和</h2><p>一个关于斐波那契数列的数列，对其求和。</p><p>思路很清晰，就是先用斐波那契数列表示出来这个数列，然后再进行逐项求和运算。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">double</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> i)</span> {</span><br/><span class="line"> <span class="keyword">if</span> (i &gt; <span class="number">2</span>)</span><br/><span class="line">  <span class="keyword">return</span> fib(i - <span class="number">1</span>) + fib(i - <span class="number">2</span>);</span><br/><span class="line"> <span class="keyword">else</span></span><br/><span class="line">  <span class="keyword">return</span> <span class="number">1.0</span>;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> i, n;</span><br/><span class="line"> <span class="type">double</span> res;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;n);</span><br/><span class="line"> <span class="keyword">for</span> (i = <span class="number">0</span>, res = <span class="number">0</span>; i &lt; n; i++)</span><br/><span class="line">  res += fib(i + <span class="number">3</span>) / fib(i + <span class="number">2</span>);</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%.2f&#34;</span>, res);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="57-字符串元素统计"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#57-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%85%83%E7%B4%A0%E7%BB%9F%E8%AE%A1" class="headerlink" title="57.字符串元素统计"></a>57.字符串元素统计</h2><p>注意<code>ASCII码</code>的灵活运用。还有就是<code>ch=getchar()</code>的终止条件不要选错，不然就是死循环了。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> </span><br/><span class="line">{</span><br/><span class="line"> <span class="type">int</span> ch, a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">while</span> ((ch = getchar()) != EOF &amp;&amp; ch != <span class="string">&#39;\n&#39;</span>)</span><br/><span class="line">  <span class="keyword">if</span> (ch &gt;= <span class="string">&#39;0&#39;</span> &amp;&amp; ch &lt;= <span class="string">&#39;9&#39;</span>)</span><br/><span class="line">   a++;</span><br/><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ((ch &gt;= <span class="string">&#39;a&#39;</span> &amp;&amp; ch &lt;= <span class="string">&#39;z&#39;</span>) || (ch &gt;= <span class="string">&#39;A&#39;</span> &amp;&amp; ch &lt;= <span class="string">&#39;Z&#39;</span>))</span><br/><span class="line">   b++;</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%d,%d&#34;</span>, b, a);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="58-字符串查找"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#58-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE" class="headerlink" title="58.字符串查找"></a>58.字符串查找</h2><p>查找字母在字符串中的出现次数。把上面那个题删减一下就行。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> ch, c = <span class="number">0</span>;</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">while</span> ((ch = getchar()) != EOF &amp;&amp; ch != <span class="string">&#39;\n&#39;</span>)</span><br/><span class="line">  <span class="keyword">if</span> ((ch &gt;= <span class="string">&#39;a&#39;</span> &amp;&amp; ch &lt;= <span class="string">&#39;z&#39;</span>) || (ch &gt;= <span class="string">&#39;A&#39;</span> &amp;&amp; ch &lt;= <span class="string">&#39;Z&#39;</span>))</span><br/><span class="line">   c++;</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>, c);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="59-字符串筛选"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#59-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AD%9B%E9%80%89" class="headerlink" title="59.字符串筛选"></a>59.字符串筛选</h2><p>隔一个输出。所以用一个计数器就行了。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">char</span> *ch)</span> {</span><br/><span class="line"> <span class="type">int</span> i;</span><br/><span class="line"> <span class="keyword">for</span> (i = <span class="number">0</span>; *ch != <span class="string">&#39;\0&#39;</span>; i++)</span><br/><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br/><span class="line">   <span class="built_in">putchar</span>(*ch++);</span><br/><span class="line">  <span class="keyword">else</span></span><br/><span class="line">   ch++;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">char</span> ch[<span class="number">100</span>];</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%s&#34;</span>, &amp;ch);</span><br/><span class="line"> fun(ch);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="60-字符串连接"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#60-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9E%E6%8E%A5" class="headerlink" title="60.字符串连接"></a>60.字符串连接</h2><p>不正经解法。别学我（</p><p>正经解法是：读入两个字符串常量，然后存储在res数组中，最后返回它的指针即可。</p><p><em>懒得写了</em></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">char</span> *<span class="title function_">fun</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span> *b)</span> {</span><br/><span class="line"> <span class="type">char</span> res[<span class="number">200</span>];</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%s%s&#34;</span>, a, b);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> res;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> ch, a[<span class="number">100</span>], b[<span class="number">100</span>], *res, i;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%s %s&#34;</span>, a, b);</span><br/><span class="line"> fun(a, b);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="61-整数转换为字符串"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#61-%E6%95%B4%E6%95%B0%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2" class="headerlink" title="61.整数转换为字符串"></a>61.整数转换为字符串</h2><p>除了下面的解法，也可以严格按照题目要求来解：<code>gechar</code>读入字符，再输出就行。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> a;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;a);</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>, a);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>实在是不知道这题存在的意义。。</p><h2 id="62-十六进制转换为十进制"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#62-%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%8D%81%E8%BF%9B%E5%88%B6" class="headerlink" title="62.十六进制转换为十进制"></a>62.十六进制转换为十进制</h2><p>如果是十三进制转十进制这样的，就有难度了。。</p><p>这个的解法可以参照我前面写的进制转换那篇，回头我也会再写一个更通用的。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> {</span><br/><span class="line"> <span class="type">int</span> a;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%x&#34;</span>, &amp;a);</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>, a);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="63-递归数列"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#63-%E9%80%92%E5%BD%92%E6%95%B0%E5%88%97" class="headerlink" title="63.递归数列"></a>63.递归数列</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">function</span><span class="params">(<span class="type">int</span> n)</span> {</span><br/><span class="line"> <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br/><span class="line">  <span class="keyword">return</span> <span class="number">1.000000</span>;</span><br/><span class="line"> <span class="keyword">else</span></span><br/><span class="line">  <span class="keyword">return</span> <span class="number">1.000000</span> / (<span class="number">1.000000</span> + function(--n));</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="64-Fibonacci数列"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#64-Fibonacci%E6%95%B0%E5%88%97" class="headerlink" title="64.Fibonacci数列"></a>64.Fibonacci数列</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br/><span class="line">        <span class="keyword">return</span> <span class="number">7</span>;</span><br/><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br/><span class="line">        <span class="keyword">return</span> <span class="number">11</span>;</span><br/><span class="line">    <span class="keyword">else</span></span><br/><span class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="65-数字处理"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#65-%E6%95%B0%E5%AD%97%E5%A4%84%E7%90%86" class="headerlink" title="65.数字处理"></a>65.数字处理</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">bit_sum</span><span class="params">(<span class="type">int</span> num)</span></span><br/><span class="line">{ </span><br/><span class="line"> <span class="keyword">return</span> num&gt;=<span class="number">10</span>?num%<span class="number">10</span>+bit_sum(num/<span class="number">10</span>):num;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">int</span> num;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>,&amp;num);</span><br/><span class="line"> <span class="keyword">while</span>(num&gt;=<span class="number">10</span>)</span><br/><span class="line">  num=bit_sum(num);</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>,num);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="66-阶乘计算"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#66-%E9%98%B6%E4%B9%98%E8%AE%A1%E7%AE%97" class="headerlink" title="66.阶乘计算"></a>66.阶乘计算</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">double</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> num)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="keyword">if</span>(num&gt;<span class="number">1</span>)</span><br/><span class="line">  <span class="keyword">return</span> <span class="number">1.0</span>*num * mul(num<span class="number">-1</span>);</span><br/><span class="line"> <span class="keyword">else</span></span><br/><span class="line">  <span class="keyword">return</span> <span class="number">1.0</span>;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">int</span> m,n,tmp;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d %d&#34;</span>,&amp;m,&amp;n);</span><br/><span class="line"> <span class="keyword">if</span>(m&lt;n)</span><br/><span class="line">  tmp=m,m=n,n=tmp;</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%.2f&#34;</span>,mul(m)/mul(n)/mul(m-n));</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="67-金字塔打印"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#67-%E9%87%91%E5%AD%97%E5%A1%94%E6%89%93%E5%8D%B0" class="headerlink" title="67.金字塔打印"></a>67.金字塔打印</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">void</span> <span class="title function_">tow</span><span class="params">(<span class="type">int</span> ch,<span class="type">int</span> line)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">int</span> i;</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;line;i++)</span><br/><span class="line"> {</span><br/><span class="line">  <span class="comment">/* 1.print space */</span></span><br/><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;line<span class="number">-1</span>;j++)</span><br/><span class="line">   <span class="built_in">putchar</span>(<span class="string">&#39; &#39;</span>);</span><br/><span class="line">  <span class="comment">/* 2.print char */</span></span><br/><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">2</span>*i+<span class="number">1</span>;k++)</span><br/><span class="line">   <span class="built_in">putchar</span>(k%<span class="number">2</span>==<span class="number">0</span>?ch:<span class="string">&#39; &#39;</span>);</span><br/><span class="line">  <span class="comment">/* 3.start a new line */</span></span><br/><span class="line">  <span class="keyword">if</span>(i!=line<span class="number">-1</span>)</span><br/><span class="line">   <span class="built_in">puts</span>(<span class="string">&#34;&#34;</span>);</span><br/><span class="line"> }</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">int</span> ch,n;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%c %d&#34;</span>,&amp;ch,&amp;n);</span><br/><span class="line"> tow(ch,n);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="68-字符逆序排放"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#68-%E5%AD%97%E7%AC%A6%E9%80%86%E5%BA%8F%E6%8E%92%E6%94%BE" class="headerlink" title="68.字符逆序排放"></a>68.字符逆序排放</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">int</span> ch[<span class="number">100</span>],i=<span class="number">0</span>;</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">while</span>(ch[i]=getchar(),ch[i]!=EOF&amp;&amp;ch[i]!=<span class="string">&#39;\n&#39;</span>)</span><br/><span class="line">  i++;</span><br/><span class="line"> <span class="keyword">while</span>(i--)</span><br/><span class="line">  <span class="built_in">putchar</span>(ch[i]);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="69-素数判断"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#69-%E7%B4%A0%E6%95%B0%E5%88%A4%E6%96%AD" class="headerlink" title="69.素数判断"></a>69.素数判断</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">is_prime</span><span class="params">(<span class="type">int</span> num)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;num;i++)</span><br/><span class="line">  <span class="keyword">if</span>(num%i==<span class="number">0</span>&amp;&amp;num!=<span class="number">2</span>)</span><br/><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">int</span> num;</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>,&amp;num);</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%s&#34;</span>,is_prime(num)?<span class="string">&#34;YES&#34;</span>:<span class="string">&#34;NO&#34;</span>);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="70-调用函数求素数"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#70-%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E6%B1%82%E7%B4%A0%E6%95%B0" class="headerlink" title="70.调用函数求素数"></a>70.调用函数求素数</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span>* arr)</span>;</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">int</span> num,i,j=<span class="number">0</span>,arr[<span class="number">64</span>];</span><br/><span class="line"></span><br/><span class="line"> <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>,&amp;num);</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;%d\n&#34;</span>,i=fun(num,arr));</span><br/><span class="line"> <span class="keyword">while</span>(i-j)</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;%d &#34;</span>,arr[j]),j++;</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span>* arr)</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">int</span> res=<span class="number">0</span>;</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=num;i++)</span><br/><span class="line"> {</span><br/><span class="line">  <span class="type">int</span> flag=<span class="number">1</span>;</span><br/><span class="line">  <span class="keyword">if</span>(i==<span class="number">2</span>);</span><br/><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(i&gt;<span class="number">2</span>)</span><br/><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;i;j++)</span><br/><span class="line">    <span class="keyword">if</span>(i%j==<span class="number">0</span>)</span><br/><span class="line">     flag=<span class="number">0</span>;</span><br/><span class="line">  <span class="keyword">if</span>(flag)</span><br/><span class="line">   *arr++=i,res++;</span><br/><span class="line"> }</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> res;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="71-函数与数组"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#71-%E5%87%BD%E6%95%B0%E4%B8%8E%E6%95%B0%E7%BB%84" class="headerlink" title="71.函数与数组"></a>71.函数与数组</h2><p><em>这题啥也没有，直接提交就行</em></p><p><em>估计是忘放题了</em></p><hr/><p><em>已经忘了是多少次练习了。。</em></p><h2 id="72-消除类游戏"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#72-%E6%B6%88%E9%99%A4%E7%B1%BB%E6%B8%B8%E6%88%8F" class="headerlink" title="72.消除类游戏"></a>72.消除类游戏</h2><p><em>之前写2048的时候写过类似算法</em></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/><span class="line">42</span><br/><span class="line">43</span><br/><span class="line">44</span><br/><span class="line">45</span><br/><span class="line">46</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> arr[<span class="number">30</span>][<span class="number">30</span>], arr_new[<span class="number">30</span>][<span class="number">30</span>];</span><br/><span class="line">    <span class="type">int</span> m, n, i, j;</span><br/><span class="line"></span><br/><span class="line">    <span class="built_in">scanf</span>(<span class="string">&#34;%d %d&#34;</span>, &amp;m, &amp;n);</span><br/><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br/><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br/><span class="line">            <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;arr[i][j]), arr_new[i][j] = arr[i][j];</span><br/><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br/><span class="line">    {</span><br/><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br/><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; j++)</span><br/><span class="line">        {</span><br/><span class="line">            <span class="keyword">if</span> (arr[i][j] == arr[i][j + <span class="number">1</span>])</span><br/><span class="line">                flag++;</span><br/><span class="line">            <span class="keyword">else</span></span><br/><span class="line">                flag = <span class="number">0</span>;</span><br/><span class="line">            <span class="keyword">if</span> (flag &gt;= <span class="number">2</span>)</span><br/><span class="line">                arr_new[i][j - <span class="number">1</span>] = arr_new[i][j] = arr_new[i][j + <span class="number">1</span>] = <span class="number">0</span>;</span><br/><span class="line">        }</span><br/><span class="line">    }</span><br/><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br/><span class="line">    {</span><br/><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br/><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++)</span><br/><span class="line">        {</span><br/><span class="line">            <span class="keyword">if</span> (arr[i][j] == arr[i + <span class="number">1</span>][j])</span><br/><span class="line">                flag++;</span><br/><span class="line">            <span class="keyword">else</span></span><br/><span class="line">                flag = <span class="number">0</span>;</span><br/><span class="line">            <span class="keyword">if</span> (flag &gt;= <span class="number">2</span>)</span><br/><span class="line">                arr_new[i - <span class="number">1</span>][j] = arr_new[i][j] = arr_new[i + <span class="number">1</span>][j] = <span class="number">0</span>;</span><br/><span class="line">        }</span><br/><span class="line">    }</span><br/><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br/><span class="line">    {</span><br/><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br/><span class="line">            <span class="built_in">printf</span>(<span class="string">&#34;%d &#34;</span>, arr_new[i][j]);</span><br/><span class="line">        <span class="built_in">puts</span>(<span class="string">&#34;&#34;</span>);</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>稍微解释下吧。一共四个<code>for</code>循环，首尾两个负责输入输出，中间两个分别用于处理每一行和每一列。</p><p>处理思路很简单，参考第一题。</p><p>代码很丑，本想重构一下，抽个函数出来，结果让指针绊住了。。还是学艺不精.jpg</p><h2 id="73-数字排序"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#73-%E6%95%B0%E5%AD%97%E6%8E%92%E5%BA%8F" class="headerlink" title="73.数字排序"></a>73.数字排序</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">bit_sum</span><span class="params">(<span class="type">int</span> num)</span>;</span><br/><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> i, j, n, *arr, tmp;</span><br/><span class="line"></span><br/><span class="line">    <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;n);</span><br/><span class="line">    arr = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * n);</span><br/><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br/><span class="line">        <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;arr[i]);</span><br/><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br/><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++)</span><br/><span class="line">            <span class="keyword">if</span> (compare(arr[i], arr[j]) &lt; <span class="number">0</span>||(compare(arr[i], arr[j]) == <span class="number">0</span>&amp;&amp;arr[i] &gt; arr[j]))</span><br/><span class="line">                tmp = arr[i], arr[i] = arr[j], arr[j] = tmp;</span><br/><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br/><span class="line">        <span class="built_in">printf</span>(<span class="string">&#34;%d %d\n&#34;</span>, arr[i], bit_sum(arr[i]));</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">bit_sum</span><span class="params">(<span class="type">int</span> num)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">while</span> (num)</span><br/><span class="line">        res += num % <span class="number">10</span>, num /= <span class="number">10</span>;</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> res;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="keyword">return</span> bit_sum(a) &gt; bit_sum(b)?<span class="number">1</span>:bit_sum(a) == bit_sum(b)?<span class="number">0</span>:<span class="number">-1</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p><code>bit_sum</code>是计算各位和的函数，<code>compare</code>是比较两个数各位和大小的函数。逻辑在主程序中完成。</p><h2 id="74-矩阵"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#74-%E7%9F%A9%E9%98%B5" class="headerlink" title="74.矩阵"></a>74.矩阵</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> len)</span>;</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> n, *arr, *res, i, j;</span><br/><span class="line"></span><br/><span class="line">    <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;n);</span><br/><span class="line">    res = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * n * <span class="number">2</span> + <span class="number">2</span>);</span><br/><span class="line">    arr = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * n * n);</span><br/><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n * n; i++)</span><br/><span class="line">        <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;arr[i]);</span><br/><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br/><span class="line">        <span class="keyword">for</span> (res[i] = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; n; j++)</span><br/><span class="line">            res[i] += arr[i * n + j];</span><br/><span class="line">    <span class="keyword">for</span> (; i &lt; n * <span class="number">2</span>; i++)</span><br/><span class="line">        <span class="keyword">for</span> (res[i] = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; n; j++)</span><br/><span class="line">            res[i] += arr[i - n + j * n];</span><br/><span class="line">    <span class="keyword">for</span> (j = res[i] = res[i + <span class="number">1</span>] = <span class="number">0</span>; j &lt; n; j++)</span><br/><span class="line">    {</span><br/><span class="line">        res[i] += arr[j + j * n];</span><br/><span class="line">        res[i + <span class="number">1</span>] += arr[n - <span class="number">1</span> - j + j * n];</span><br/><span class="line">    }</span><br/><span class="line">    sort(res, n * <span class="number">2</span> + <span class="number">2</span>);</span><br/><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n * <span class="number">2</span> + <span class="number">2</span>; i++)</span><br/><span class="line">        <span class="built_in">printf</span>(<span class="string">&#34;%d &#34;</span>, res[i]);</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> len)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> i, j, tmp;</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br/><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; len; j++)</span><br/><span class="line">            <span class="keyword">if</span> (arr[i] &lt; arr[j])</span><br/><span class="line">                tmp = arr[i], arr[i] = arr[j], arr[j] = tmp;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>大概算了一下规律，然后用一维数组解决了。</p><p>比较有意思的一个是，我们可以把这个<code>sort</code>函数改进一下，变成一个更通用的排序函数。这样，上一个题也能用它解决了。</p><p>上代码：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> len,<span class="type">int</span> (*cmp)(<span class="type">int</span> a,<span class="type">int</span> b))</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> <span class="title function_">exchange</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *b)</span>{<span class="type">int</span> i;i=*a,*a=*b,*b=i;}</span><br/><span class="line">    <span class="type">int</span> i, j, tmp;</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br/><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; len; j++)</span><br/><span class="line">            <span class="keyword">if</span> (arr[i] &lt; arr[j])</span><br/><span class="line">                exchange(&amp;arr[i], &amp;arr[j]);</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>这里的函数嵌套是C语言支持但不推荐的特性。我用<code>gcc</code>可以编译。</p><p>用它来解决上一题：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br/><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> len,<span class="type">int</span> (*cmp)(<span class="type">int</span> a,<span class="type">int</span> b))</span>;</span><br/><span class="line"><span class="type">int</span> <span class="title function_">bit_sum</span><span class="params">(<span class="type">int</span> num)</span>{<span class="keyword">return</span> res&gt;<span class="number">0</span>?res%<span class="number">10</span>+bit_sum(res/<span class="number">10</span>):<span class="number">0</span>;}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> i, j, n, *arr, tmp;</span><br/><span class="line"></span><br/><span class="line">    <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;n);</span><br/><span class="line">    arr = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * n);</span><br/><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br/><span class="line">        <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;arr[i]);</span><br/><span class="line">    sort(arr, n, cmp_bit_sum);</span><br/><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br/><span class="line">        <span class="built_in">printf</span>(<span class="string">&#34;%d %d\n&#34;</span>, arr[i], bit_sum(arr[i]));</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">cmp_bit_sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="keyword">return</span> bit_sum(a) &gt; bit_sum(b)?<span class="number">1</span>:bit_sum(a) == bit_sum(b)?<span class="number">0</span>:<span class="number">-1</span>;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> len,<span class="type">int</span> (*cmp)(<span class="type">int</span> a,<span class="type">int</span> b))</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> <span class="title function_">exchange</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *b)</span>{<span class="type">int</span> i;i=*a,*a=*b,*b=i;}</span><br/><span class="line">    <span class="type">int</span> i, j;</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br/><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; len; j++)</span><br/><span class="line">            <span class="keyword">if</span> (arr[i] &lt; arr[j])</span><br/><span class="line">                exchange(&amp;arr[i], &amp;arr[j]);</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="75-回文数"><a href="https://xeonds.github.io/2021/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/XDOJ-archive/#75-%E5%9B%9E%E6%96%87%E6%95%B0" class="headerlink" title="75.回文数"></a>75.回文数</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/><span class="line">42</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"><span class="type">int</span> <span class="title function_">is_rev</span><span class="params">(<span class="type">int</span> num)</span>;</span><br/><span class="line"><span class="type">int</span> <span class="title function_">bit_sum</span><span class="params">(<span class="type">int</span> num)</span>;</span><br/><span class="line"><span class="type">int</span> <span class="title function_">get_bit</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> bit)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> <span class="title function_">xpow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> { <span class="keyword">return</span> b &gt; <span class="number">0</span> ? a * xpow(a, b - <span class="number">1</span>) : <span class="number">1</span>; }</span><br/><span class="line">    <span class="keyword">return</span> (num % (xpow(<span class="number">10</span>, bit)) - num % (xpow(<span class="number">10</span>, bit - <span class="number">2</span>))) / xpow(<span class="number">10</span>, bit - <span class="number">1</span>);</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> num;</span><br/><span class="line"></span><br/><span class="line">    <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;num);</span><br/><span class="line">    <span class="keyword">if</span> (is_rev(num))</span><br/><span class="line">        <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>, bit_sum(num));</span><br/><span class="line">    <span class="keyword">else</span></span><br/><span class="line">        <span class="built_in">printf</span>(<span class="string">&#34;no&#34;</span>);</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">is_rev</span><span class="params">(<span class="type">int</span> num)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> origin = num, bit = <span class="number">0</span>, i, end = <span class="number">0</span>;</span><br/><span class="line">    <span class="keyword">if</span> (num == <span class="number">0</span>)</span><br/><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br/><span class="line">    <span class="keyword">else</span></span><br/><span class="line">        <span class="keyword">while</span> (bit++, num /= <span class="number">10</span>);</span><br/><span class="line">    num = origin;</span><br/><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>, end = bit % <span class="number">2</span> == <span class="number">0</span> ? bit / <span class="number">2</span> : (bit - <span class="number">1</span>) / <span class="number">2</span>; i &lt;= end; i++)</span><br/><span class="line">        <span class="keyword">if</span> (get_bit(num, i) != get_bit(num, bit - i + <span class="number">1</span>))</span><br/><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">bit_sum</span><span class="params">(<span class="type">int</span> num)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br/><span class="line">    <span class="keyword">while</span> (res += num % <span class="number">10</span>, num /= <span class="number">10</span>);</span><br/><span class="line">    <span class="keyword">return</span> res;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>这题思路很多，愿意的话也可以用字符串处理来完成。</p><p>总是自己写<code>pow</code>是因为我这边本地环境里<code>pow</code>好像是坏的。。</p></body></html>