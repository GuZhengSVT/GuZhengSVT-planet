<html><head></head><body><h1 style="color:red;">Pay Attention!!!</h1><h1 style="color:red;">Pay Attention!!!</h1><h1 style="color:red;">Pay Attention!!!</h1><script>alert("本篇博客内容已无参考性")</script><p>因为 NoneBot 项目更新，本篇博客内容已无参考性！！！</p><p>因为 NoneBot 项目更新，本篇博客内容已无参考性！！！</p><p>因为 NoneBot 项目更新，本篇博客内容已无参考性！！！</p><p><del>（等有时间了整个新的）</del></p><h1 id="折腾NoneBot-2"><a href="https://blog.ksfu.top/posts/ec36/#%E6%8A%98%E8%85%BENoneBot-2" class="headerlink" title="折腾NoneBot 2"></a>折腾NoneBot 2</h1><p><del>看群里机器人挺有意思，然后翻学长GitHub（<a href="https://github.com/Reverier-Xu">Reverier-Xu</a>和<a href="https://github.com/frankli0324">Frank</a>）的时候翻到了这个叫NoneBot的东西，就动手搞搞，刚好手头有不用的小号</del></p><p><strong>全程在Manjaro下进行</strong></p><h2 id="参考资料"><a href="https://blog.ksfu.top/posts/ec36/#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p><a href="https://v2.nonebot.dev/">NoneBot官方手册</a></p><p><a href="https://docs.nonebot.dev/">NoneBot官方文档</a></p><p><a href="https://blog.csdn.net/qq_42059060/article/details/114424753">在centos上装载NoneBot2_ChenYX的博客-CSDN博客</a></p><p><a href="https://muyuuuu.github.io/2019/09/21/python-virenv/">manjaro下python创建虚拟环境 | Just for Life. (muyuuuu.github.io)</a></p><p><a href="https://www.jianshu.com/p/7acbffa17c28">Arch/Manjaro安装deb安装包 - 简书 (jianshu.com)</a></p><p><a href="https://www.cnblogs.com/tujia/p/13597602.html">virtualenvwrapper 的安装与使用 - Tiac - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/lzping/p/13534385.html">Linux pip安装速度慢（超时报错），为pip换源 - lzping - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/qq_42059060/article/details/114449178">开启QBot_ChenYX的博客-CSDN博客</a></p></blockquote><h2 id="概览"><a href="https://blog.ksfu.top/posts/ec36/#%E6%A6%82%E8%A7%88" class="headerlink" title="概览"></a>概览</h2><p>NoneBot2 是一个可扩展的 Python 异步机器人框架，它会对机器人收到的事件进行解析和处理，并以插件化的形式，按优先级分发给事件所对应的事件响应器，来完成具体的功能。</p><p>除了起到解析事件的作用，NoneBot 还为插件提供了大量实用的预设操作和权限控制机制。对于命令处理，它更是提供了完善且易用的会话机制和内部调用机制，以分别适应命令的连续交互和插件内部功能复用等需求。</p><p>需要注意的是，NoneBot 仅支持 <strong>Python 3.7+</strong></p><h4 id="Linux-pip安装速度慢（超时报错），为pip换源"><a href="https://blog.ksfu.top/posts/ec36/#Linux-pip%E5%AE%89%E8%A3%85%E9%80%9F%E5%BA%A6%E6%85%A2%EF%BC%88%E8%B6%85%E6%97%B6%E6%8A%A5%E9%94%99%EF%BC%89%EF%BC%8C%E4%B8%BApip%E6%8D%A2%E6%BA%90" class="headerlink" title="Linux pip安装速度慢（超时报错），为pip换源"></a>Linux pip安装速度慢（超时报错），为pip换源</h4><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/.pip/<span class="token function">nano</span> pip.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p><code>pip.conf</code> 中内容如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>global<span class="token punctuation">]</span>index-url<span class="token operator">=</span>http://mirrors.aliyun.com/pypi/simple/<span class="token punctuation">[</span>install<span class="token punctuation">]</span>trusted-host<span class="token operator">=</span>mirrors.aliyun.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="安装"><a href="https://blog.ksfu.top/posts/ec36/#%E5%AE%89%E8%A3%85" class="headerlink" title="安装"></a>安装</h2><h3 id="虚拟环境"><a href="https://blog.ksfu.top/posts/ec36/#%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83" class="headerlink" title="虚拟环境"></a>虚拟环境</h3><p>为了装载 NoneBot2 并保证相关配置包不会冲突，我们需要安装一个纯净的 python 空间。这里我们就要用到 virtualenv 工具包了。</p><p><strong>virtualenvwrapper</strong> 是一个python项目环境管理工具，一个项目一个独立环境（可随心切换），<strong>防止不同项目依赖环境的相互污染</strong>。</p><h3 id="virtualenv-的安装"><a href="https://blog.ksfu.top/posts/ec36/#virtualenv-%E7%9A%84%E5%AE%89%E8%A3%85" class="headerlink" title="virtualenv 的安装"></a>virtualenv 的安装</h3><p>首先使用 pip 命令安装两个需要的包</p><p><strong>如果 pip 软链接没有修改成 pip3 的话要输入 pip3</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3 <span class="token function">install</span> virtualenvpip3 <span class="token function">install</span> virtualenvwrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>然后创建一个文件夹，用于存放所有的虚拟环境：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/virtualenvs <span class="token punctuation">(</span>目录自定义<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><strong>注意：安装完虚拟环境后，如果提示找不到mkvirtualenv命令，须配置环境变量：</strong></p><p>首先查看一下 <code>virtualenvwrapper.sh</code>  和 <code>python3</code> 的安装目录</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">which</span> virtualenvwrapper.sh<span class="token function">which</span> python3<span class="token punctuation">(</span>用whereis也行<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>修改文件 <code>.bashrc</code> ,这就是用户配置文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~<span class="token function">sudo</span> <span class="token function">nano</span> .bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>文件末尾添加</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">WORKON_HOME</span><span class="token operator">=</span>/usr/local/virtualenvs <span class="token punctuation">(</span>绝对路径<span class="token punctuation">)</span><span class="token builtin class-name">source</span> /home/cyk/.local/bin/virtualenvwrapper.sh<span class="token assign-left variable">VIRTUALENVWRAPPER_PYTHON</span><span class="token operator">=</span>/usr/bin/python3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>这里注意，WORKON_HOME的绝对路径需要填写你刚刚创建的文件夹地址。source 里要填写你刚刚 pip 安装 virtualenvwrapper 的位置，就是上面找到的</p><p><strong>再然后更新环境变量</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="激活"><a href="https://blog.ksfu.top/posts/ec36/#%E6%BF%80%E6%B4%BB" class="headerlink" title="激活"></a>激活</h4><p>在终端输入</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> virtualenvwrapper.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="创建虚拟环境"><a href="https://blog.ksfu.top/posts/ec36/#%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h4><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkvirtualenv 你的虚拟环境名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><strong>进入虚拟环境后命令行会有所变化。（一定不要<code>sudo</code>）</strong></p><p>如果报错了，说明我们没有给 <code>virtualenv</code> 创建软链接，然后就ok了</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> <span class="token parameter variable">-s</span> /home/cyk/.local/bin/virtualenv /usr/bin/virtualenv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p><strong>如果出现类似<code>virtualenv: error: argument dest: the destination . is not write-able at /usr/local/virtualenvs</code>的错误</strong></p><p>该错误是由于.virtualenvs没有可写的权限引起的，可对该文件赋予可读可写可执行的权限</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">777</span> /usr/local/virtualenvs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>之后再次创建虚拟环境</p><h4 id="列出虚拟环境"><a href="https://blog.ksfu.top/posts/ec36/#%E5%88%97%E5%87%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83" class="headerlink" title="列出虚拟环境"></a>列出虚拟环境</h4><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">workon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="启动虚拟环境"><a href="https://blog.ksfu.top/posts/ec36/#%E5%90%AF%E5%8A%A8%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83" class="headerlink" title="启动虚拟环境"></a>启动虚拟环境</h4><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">workon <span class="token punctuation">[</span>venvname<span class="token punctuation">(</span>你虚拟环境的名字<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="退出虚拟环境"><a href="https://blog.ksfu.top/posts/ec36/#%E9%80%80%E5%87%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h4><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="删除虚拟环境"><a href="https://blog.ksfu.top/posts/ec36/#%E5%88%A0%E9%99%A4%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83" class="headerlink" title="删除虚拟环境"></a>删除虚拟环境</h4><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rmvirtualenv <span class="token punctuation">[</span>venvname<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="安装NoneBot"><a href="https://blog.ksfu.top/posts/ec36/#%E5%AE%89%E8%A3%85NoneBot" class="headerlink" title="安装NoneBot"></a>安装NoneBot</h3><p><strong>一定要进入虚拟环境</strong></p><h4 id="通过脚手架安装"><a href="https://blog.ksfu.top/posts/ec36/#%E9%80%9A%E8%BF%87%E8%84%9A%E6%89%8B%E6%9E%B6%E5%AE%89%E8%A3%85" class="headerlink" title="通过脚手架安装"></a>通过脚手架安装</h4><p>使用 <code>pip</code> 或 其他包管理工具 安装 <code>nb-cli</code>，<code>nonebot2</code> 会作为其依赖被一起安装</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3 <span class="token function">install</span> nb-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这样我们就安装完成了，可以发现这里会安装一大堆的包，如果不在虚拟环境中很难保证不会产生冲突。</p><p>我们尝试运行下面命令，在虚拟环境目录下搭建一个机器人工程进行测试</p><p>记得<strong>换好目录</strong>，我忘了……bot现在在 <code>/home/cyk/</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nb create<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后一步一步安装就行（协议端使用的是<strong>cqhttp</strong>）</p><p>搭建完成后，我们可以在目录下可以看到一个和你bot名字一样的文件夹</p><p>进入后 <code>bot.py</code> ，就是我们的机器人初始化代码。而 src 内(或者和你bot名字一样的文件夹)的 plugins 文件夹则是我们存放机器人插件的地方</p><p>插件我们可以自己编写然后存入 plugins 中，也可以直接安装官方大佬们编写的插件使机器人可以快速上线</p><h3 id="安装插件"><a href="https://blog.ksfu.top/posts/ec36/#%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6" class="headerlink" title="安装插件"></a>安装插件</h3><p>插件可以通过 <code>nb-cli</code> 进行安装，也可以自行安装并加载插件。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出所有的插件</span>nb plugin list<span class="token comment"># 搜索插件</span>nb plugin search xxx<span class="token comment"># 安装插件</span>nb plugin <span class="token function">install</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="加载插件"><a href="https://blog.ksfu.top/posts/ec36/#%E5%8A%A0%E8%BD%BD%E6%8F%92%E4%BB%B6" class="headerlink" title="加载插件"></a>加载插件</h3><h4 id="加载内置插件"><a href="https://blog.ksfu.top/posts/ec36/#%E5%8A%A0%E8%BD%BD%E5%86%85%E7%BD%AE%E6%8F%92%E4%BB%B6" class="headerlink" title="加载内置插件"></a>加载内置插件</h4><p>在 <code>bot.py</code> 文件中添加以下行</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> nonebot<span class="token keyword">from</span> nonebot<span class="token punctuation">.</span>adapters<span class="token punctuation">.</span>cqhttp <span class="token keyword">import</span> Botnonebot<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>driver <span class="token operator">=</span> nonebot<span class="token punctuation">.</span>get_driver<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>register_adapter<span class="token punctuation">(</span><span class="token string">&#34;cqhttp&#34;</span><span class="token punctuation">,</span> Bot<span class="token punctuation">)</span><span class="token comment"># 注册 CQHTTP 的 Adapter</span>nonebot<span class="token punctuation">.</span>load_builtin_plugins<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 加载 nonebot 内置插件</span>app <span class="token operator">=</span> nonebot<span class="token punctuation">.</span>get_asgi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#34;__main__&#34;</span><span class="token punctuation">:</span>    nonebot<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p><strong>WARNING</strong></p><p>目前, 内建插件仅支持 CQHTTP 的 Adapter</p><p>如果您使用的是其他 Adapter, 请移步该 Adapter 相应的文档</p></blockquote><p><strong>这将会加载 nonebot 内置的插件，它包含：</strong></p><ul><li>命令 <code>say</code>：可由<strong>superuser</strong>使用，可以将消息内容由特殊纯文本转为富文本</li><li>命令 <code>echo</code>：可由任何人使用，将消息原样返回</li></ul><p>以上命令均需要指定机器人，即私聊、群聊内@机器人、群聊内称呼机器人昵称。参考 <a href="https://v2.nonebot.dev/api/rule.html#to-me">Rule: to_me</a></p><h4 id="加载插件目录"><a href="https://blog.ksfu.top/posts/ec36/#%E5%8A%A0%E8%BD%BD%E6%8F%92%E4%BB%B6%E7%9B%AE%E5%BD%95" class="headerlink" title="加载插件目录"></a>加载插件目录</h4><p>在 <code>bot.py</code> 文件中添加以下行</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> nonebotnonebot<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 加载插件目录，该目录下为各插件，以下划线开头的插件将不会被加载</span>nonebot<span class="token punctuation">.</span>load_plugins<span class="token punctuation">(</span><span class="token string">&#34;awesome_bot/plugins&#34;</span><span class="token punctuation">)</span>app <span class="token operator">=</span> nonebot<span class="token punctuation">.</span>get_asgi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#34;__main__&#34;</span><span class="token punctuation">:</span>    nonebot<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>提示</p><p>加载插件目录时，目录下以 <code>_</code> 下划线开头的插件将不会被加载！</p><p><strong>不能存在相同名称的插件！</strong></p></blockquote><h4 id="加载单个插件"><a href="https://blog.ksfu.top/posts/ec36/#%E5%8A%A0%E8%BD%BD%E5%8D%95%E4%B8%AA%E6%8F%92%E4%BB%B6" class="headerlink" title="加载单个插件"></a>加载单个插件</h4><p>在 <code>bot.py</code> 文件中添加以下行</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> nonebotnonebot<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 加载一个 pip 安装的插件</span>nonebot<span class="token punctuation">.</span>load_plugin<span class="token punctuation">(</span><span class="token string">&#34;nonebot_plugin_status&#34;</span><span class="token punctuation">)</span><span class="token comment"># 加载本地的单独插件</span>nonebot<span class="token punctuation">.</span>load_plugin<span class="token punctuation">(</span><span class="token string">&#34;awesome_bot.plugins.xxx&#34;</span><span class="token punctuation">)</span>app <span class="token operator">=</span> nonebot<span class="token punctuation">.</span>get_asgi<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#34;__main__&#34;</span><span class="token punctuation">:</span>    nonebot<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="其他方式"><a href="https://blog.ksfu.top/posts/ec36/#%E5%85%B6%E4%BB%96%E6%96%B9%E5%BC%8F" class="headerlink" title="其他方式"></a>其他方式</h4><p>看文档</p><h4 id="运行结果"><a href="https://blog.ksfu.top/posts/ec36/#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C" class="headerlink" title="运行结果"></a>运行结果</h4><p>尝试运行 <code>nb run</code> 或者 <code>python bot.py</code>，可以看到日志输出了类似如下内容</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">09-19 <span class="token number">21</span>:51:59 <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> nonebot <span class="token operator">|</span> Succeeded to <span class="token function">import</span> <span class="token string">&#34;nonebot.plugins.base&#34;</span>09-19 <span class="token number">21</span>:51:59 <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> nonebot <span class="token operator">|</span> Succeeded to <span class="token function">import</span> <span class="token string">&#34;plugin_in_folder&#34;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="CQHTTP-协议使用指南"><a href="https://blog.ksfu.top/posts/ec36/#CQHTTP-%E5%8D%8F%E8%AE%AE%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97" class="headerlink" title="CQHTTP 协议使用指南"></a>CQHTTP 协议使用指南</h3><h4 id="配置-CQHTTP-协议端（以-QQ-为例）"><a href="https://blog.ksfu.top/posts/ec36/#%E9%85%8D%E7%BD%AE-CQHTTP-%E5%8D%8F%E8%AE%AE%E7%AB%AF%EF%BC%88%E4%BB%A5-QQ-%E4%B8%BA%E4%BE%8B%EF%BC%89" class="headerlink" title="配置 CQHTTP 协议端（以 QQ 为例）"></a>配置 CQHTTP 协议端（以 QQ 为例）</h4><p>单纯运行 NoneBot 实例并不会产生任何效果，因为此刻 QQ 这边还不知道 NoneBot 的存在，也就无法把消息发送给它，因此现在需要使用一个无头 QQ 来把消息等事件上报给 NoneBot。</p><p>QQ 协议端举例:</p><ul><li><a href="https://github.com/Mrs4s/go-cqhttp">go-cqhttp</a>(基于 <a href="https://github.com/Mrs4s/MiraiGo">MiraiGo</a>)</li><li><a href="https://github.com/yyuueexxiinngg/cqhttp-mirai/tree/embedded">cqhttp-mirai-embedded</a></li><li><a href="https://github.com/mamoe/mirai">Mirai</a>+ <a href="https://github.com/yyuueexxiinngg/cqhttp-mirai">cqhttp-mirai</a></li><li><a href="https://github.com/mamoe/mirai">Mirai</a>+ <a href="https://github.com/iTXTech/mirai-native">Mirai Native</a>+ <a href="https://github.com/richardchien/coolq-http-api">CQHTTP</a></li><li><a href="https://github.com/takayama-lily/onebot">OICQ-http-api</a>(基于 <a href="https://github.com/takayama-lily/oicq">OICQ</a>)</li></ul><p>这里以 go-cqhttp为例</p><ol><li><p>下载 go-cqhttp 对应平台的 release 文件，<a href="https://github.com/Mrs4s/go-cqhttp/releases">点此前往</a></p><blockquote><p>我下载的</p><p><a href="https://github.com/Mrs4s/go-cqhttp/releases/download/v1.0.0-beta4/go-cqhttp_1.0.0-beta4_linux_arm64.deb">go-cqhttp_1.0.0-beta4_linux_arm64.deb</a></p><p>下载速度好慢的，找到个加速的网站</p><p><a href="http://zygxsq.cn/github/">Github 加速下载 - 在线工具 (zygxsq.cn)</a></p><p>安装教程</p><p><a href="https://zhuanlan.zhihu.com/p/100959322">manjaro安装deb包 - 知乎 (zhihu.com)</a></p><p>不过我包解出来后双击安装的~</p></blockquote></li><li><p>运行 exe 文件或者使用 <code>./go-cqhttp</code> 启动</p></li><li><p>生成默认配置文件并修改默认配置(机器人目录下的 <code>config.yml</code> )</p></li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">{</span>  uin: 机器人QQ号  password: 机器人密码  encrypt_password: <span class="token boolean">false</span>  password_encrypted: <span class="token string">&#34;&#34;</span>  enable_db: <span class="token boolean">true</span>  access_token: <span class="token string">&#34;&#34;</span>  relogin: <span class="token punctuation">{</span>    enabled: <span class="token boolean">true</span>    relogin_delay: <span class="token number">3</span>    max_relogin_times: <span class="token number">0</span>  <span class="token punctuation">}</span>  _rate_limit: <span class="token punctuation">{</span>    enabled: <span class="token boolean">false</span>    frequency: <span class="token number">1</span>    bucket_size: <span class="token number">1</span>  <span class="token punctuation">}</span>  ignore_invalid_cqcode: <span class="token boolean">false</span>  force_fragmented: <span class="token boolean">false</span>  heartbeat_interval: <span class="token number">0</span>  http_config: <span class="token punctuation">{</span>    enabled: <span class="token boolean">false</span>    host: <span class="token string">&#34;0.0.0.0&#34;</span>    port: <span class="token number">5700</span>    timeout: <span class="token number">0</span>    post_urls: <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  ws_config: <span class="token punctuation">{</span>    enabled: <span class="token boolean">false</span>    host: <span class="token string">&#34;0.0.0.0&#34;</span>    port: <span class="token number">6700</span>  <span class="token punctuation">}</span>  ws_reverse_servers: <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      enabled: <span class="token boolean">true</span>      reverse_url: ws://127.0.0.1:8080/cqhttp/ws      reverse_api_url: ws://you_websocket_api.server      reverse_event_url: ws://you_websocket_event.server      reverse_reconnect_interval: <span class="token number">3000</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span>  post_message_format: array  use_sso_address: <span class="token boolean">false</span>  debug: <span class="token boolean">false</span>  log_level: <span class="token string">&#34;&#34;</span>  web_ui: <span class="token punctuation">{</span>    enabled: <span class="token boolean">false</span>    host: <span class="token number">127.0</span>.0.1    web_ui_port: <span class="token number">9999</span>    web_input: <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>其中 <code>ws://127.0.0.1:8080/cqhttp/ws</code> 中的 <code>127.0.0.1</code> 和 <code>8080</code> 应分别对应 nonebot 配置的 HOST 和 PORT。</p><p><strong>如果要修改</strong></p><p>在机器人目录打开终端</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nano</span> .env.dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>打开该文件，里面的 host 和 port 就是我们工程与 cqhttp 建立联系的通道地址</p><p><code>cqhttp</code> 是前述 <code>register_adapter</code> 时传入的第一个参数，代表设置的 <code>CQHTTPBot</code> 适配器的路径，你可以对不同的适配器设置不同路径以作区别。</p><h3 id="启动机器人"><a href="https://blog.ksfu.top/posts/ec36/#%E5%90%AF%E5%8A%A8%E6%9C%BA%E5%99%A8%E4%BA%BA" class="headerlink" title="启动机器人"></a>启动机器人</h3><p>注意go-cqhttp目录</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">which</span> go-cqhttp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>我的是在<code>/usr/bin/go-cqhttp</code></p><p>打开一个终端</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./go-cqhttp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>也可设置后台启动</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> /usr/bin/go-cqhttp <span class="token operator">&gt;&gt;</span> cqhttp.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>机器人目录下打开终端（<strong>注意要在虚拟环境下</strong>）</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nb run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><strong>Accepted!好耶</strong></p></body></html>