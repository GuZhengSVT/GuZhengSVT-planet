<html><head></head><body><blockquote><p>编辑 打算加一部分讲怎么更简洁地部署博客的教程。现在GitHub Actions已经很好用了，完全可以用它进一步简化博客部署步骤</p></blockquote><p>博客站点是一种个人日志记录站点，也是Web1.0-2.0时代撑起互联网主体的重要部分之一。如今虽然它被各大APP不断挤占生存空间，但是它依旧重要：一篇高质量的博文，往往能够成为无数后人解决一个问题的宝贵参考资料。</p><p>对于个人而言，如何去写它，利用它由你决定。你可以用它宣传自己，可以把它当作自己的读书笔记甚至课程笔记，也可以用它去记录生活中的时时刻刻。你写出的内容，永远属于你，也可为你所用。</p><blockquote><p>为了防止现场网速太拉，建议大家提前完成下面的准备工作</p></blockquote><h2 id="准备工作"><a href="https://mxts.jiujiuer.xyz/2022/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="软件安装"><a href="https://mxts.jiujiuer.xyz/2022/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85" class="headerlink" title="软件安装"></a>软件安装</h3><p>首先需要在电脑上准备好用来写博客&amp;生成静态站点的工具。需要在电脑上安装这些软件：</p><ul><li><a href="https://npmmirror.com/mirrors/node/v18.12.1/node-v18.12.1-x64.msi">node.js（点击下载）</a>   它是我们安装hexo的工具</li><li><a href="https://registry.npmmirror.com/-/binary/git-for-windows/v2.39.0.windows.2/Git-2.39.0.2-64-bit.exe">git（点击下载）</a>       我们用它向GitHub推送我们生成的静态站</li></ul><p>上面的链接如果下不了，也可以看群文件or自己搜</p><p>注意：<strong>安装node.js的时候，一定保证下图的<code>Add to PATH</code>是确认的。</strong></p><p><img src="https://mxts.jiujiuer.xyz/img/20221125-112418.png" alt="(*/ω＼*)"/></p><p>装好node.js之后，我们需要在电脑上安装<strong>hexo</strong>，这是生成博客站点的核心工具。</p><p>用<code>Win+R</code>键打开运行，输入<code>cmd</code>并回车，在随后弹出来的黑框框中输入下面的指令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br/></pre></td></tr></tbody></table></figure><p>如果网速太慢，可以用下面的指令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">npm --registry https://registry.npm.taobao.org install hexo-cli -g</span><br/></pre></td></tr></tbody></table></figure><p><img src="https://mxts.jiujiuer.xyz/img/20221125-112056.png" alt="我装过了所以没有提示"/></p><p>如果输出内容没有红底的<code>ERR</code>，就说明装好了。</p><h3 id="GitHub账号注册"><a href="https://mxts.jiujiuer.xyz/2022/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#GitHub%E8%B4%A6%E5%8F%B7%E6%B3%A8%E5%86%8C" class="headerlink" title="GitHub账号注册"></a>GitHub账号注册</h3><p>之后，我们还需要在GitHub上注册一个账号。<a href="https://github.com/">点击此处前往</a></p><p>在主页上找到Sign Up按钮，点击之后按照注册流程即可。<strong>用户名和邮箱是重要信息，后面会用到</strong>。</p><p><img src="https://mxts.jiujiuer.xyz/img/20221125-111839.png" alt="或者中间那个也行"/></p><p>随后我们还需要安装一个MarkDown编辑器，或者装了VS Code也可以用VS Code代替。</p><p>推荐几个 MarkDown 编辑器：Typora、Obsidian</p><h2 id="开始搭建-ver-1"><a href="https://mxts.jiujiuer.xyz/2022/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA-ver-1" class="headerlink" title="开始搭建(ver.1)"></a>开始搭建(ver.1)</h2><h3 id="初始化博客目录"><a href="https://mxts.jiujiuer.xyz/2022/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8D%9A%E5%AE%A2%E7%9B%AE%E5%BD%95" class="headerlink" title="初始化博客目录"></a>初始化博客目录</h3><blockquote><p><em>如何用cmd切换到对应文件夹</em>：你可以在文件管理器里打开你的博客目录，然后在地址栏里输入<code>cmd</code>并回车，就像下面这样：<br/><img src="https://mxts.jiujiuer.xyz/img/20221127-182556.png" alt="QAQ"/></p></blockquote><p>首先，<strong>新建一个存放博文的文件夹</strong>，例如我是放在<code>C:/Users/[我的用户名]/blog/</code>下的，你们也可以放在其他目录，比如<code>D:/blog</code>。创建对应的文件夹，并在那个目录打开<code>cmd</code>（参考上面的说明）（<strong>这个cmd别关，别关，别关，后面大多数操作都会用它</strong>）</p><p>然后，在<code>cmd</code>中，运行<code>hexo init</code>初始化博客仓库。这个过程可能比较缓慢，失败或者卡住不动的话可以按<code>Ctrl+C</code>停止多试几次</p><blockquote><p>像这样就完成了<br/><img src="https://mxts.jiujiuer.xyz/img/20221127-184326.png" alt="Warning什么的无视就好了"/></p></blockquote><p>此外，还需要安装下面的工具。在同一个框里继续输入就好了：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/></pre></td><td class="code"><pre><span class="line">npm i hexo-deployer-git     <span class="comment"># git推送插件</span></span><br/><span class="line">npm i hexo-server           <span class="comment"># 本地预览插件</span></span><br/><span class="line">npm i hexo-generator-feed   <span class="comment"># RSS文件生成插件</span></span><br/></pre></td></tr></tbody></table></figure><p><img src="https://mxts.jiujiuer.xyz/img/20221127-184500.png" alt="这样就没有问题了，嗯"/></p><h3 id="建立仓库"><a href="https://mxts.jiujiuer.xyz/2022/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E5%BB%BA%E7%AB%8B%E4%BB%93%E5%BA%93" class="headerlink" title="建立仓库"></a>建立仓库</h3><p>在GitHub上建立仓库，**名称必须是<code>username.github.io</code>**，其中，<code>username</code>是你的用户名，其余选项默认即可，如下图所示（我已经创建过了所以会标红）。</p><p><img src="https://mxts.jiujiuer.xyz/img/Pasted%20image%2020221127193522.png"/></p><p>接着，还是在上面的命令行窗口中，输入下面的指令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&#34;[username]&#34;</span></span><br/><span class="line">git config --global user.email <span class="string">&#34;[email]&#34;</span></span><br/></pre></td></tr></tbody></table></figure><p>把上面的<code>[username]</code>和<code>[email]</code>换成你的GitHub用户名和注册邮箱即可。</p><h3 id="配置远程推送"><a href="https://mxts.jiujiuer.xyz/2022/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81" class="headerlink" title="配置远程推送"></a>配置远程推送</h3><p>完成后，打开博客文件夹，打开<code>_config.yml</code>并翻到最底下：</p><p><img src="https://mxts.jiujiuer.xyz/img/20221127-184838.png" alt="就是框选的部分"/></p><p>把这部分用下面的部分覆盖：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br/><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br/><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/[username]/[username].github.io.git</span></span><br/><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br/></pre></td></tr></tbody></table></figure><p>其中，把<code>[username]</code>替换为你的GitHub用户名即可。</p><p>最后，还是在上面的命令行窗口中，执行<code>hexo clean &amp;&amp; hexo d</code>，等待完成即可。</p><p>这个过程中，会让你输入GitHub账号密码，跟随提示输入即可。</p><h3 id="验证"><a href="https://mxts.jiujiuer.xyz/2022/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E9%AA%8C%E8%AF%81" class="headerlink" title="验证"></a>验证</h3><p>完成之后，在浏览器里访问<code>https://[username].github.io</code>，能看见下面的界面就代表推送配置成功了：</p><p><img src="https://mxts.jiujiuer.xyz/img/20221127-190658.png" alt="(*/ω＼*)"/></p><blockquote><p>如果没有成功，可以等待2分钟再打开看看。</p></blockquote><p>由于网络问题，上面涉及GitHub和npm的部分，可能会遇到很慢甚至卡死的情况。这种情况只能试几次或者搭梯子解决。</p><p>或者，也可以先在本地验证博客是否正确配置。还是在上面的命令行窗口中，输入<code>hexo s</code>，完成后在浏览器里粘贴并打开网址：<code>127.0.0.1:4000</code>，我们就能看到博客是否正确配置。</p><hr/><h2 id="开始搭建-ver-2"><a href="https://mxts.jiujiuer.xyz/2022/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA-ver-2" class="headerlink" title="开始搭建(ver.2)"></a>开始搭建(ver.2)</h2><p>第二版的教程会借助<code>GitHub Action</code>来让博客搭建变得更简单，而且让你的文章目录更加简洁，可维护。</p><p>在搭建完成后，我们会得到一个只包含原来的<code>source</code>目录下所有文件的新的目录。并且在编写完成后，只需要使用<code>git push</code>将我们写好的博文推送到GitHub就完成了所有的步骤。</p><blockquote><p>注意：这个版本的教程可能需要一些常用开发工具的使用经验，建议小白先试试上面那个版本的</p></blockquote><h3 id="准备？"><a href="https://mxts.jiujiuer.xyz/2022/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E5%87%86%E5%A4%87%EF%BC%9F" class="headerlink" title="准备？"></a>准备？</h3><p>由于我们将大部分的复杂度都转移到了GitHub上，所以初次配置会更加繁琐。不过别急，<del>让我先急</del>只要跟着步骤做下来基本都没啥问题的。实在不行大不了fork一份仓库然后直接用（不</p><p>这次的步骤需要使用到<code>git</code>和<code>hexo</code>两个工具，并且我们需要创建三个分支用来实现自动化博客部署。</p><blockquote><p>啊对了，如果不想自己搭建直接用的话，也不是不可以。只需要打开我的<a href="https://github.com/xeonds/xeonds.github.io">仓库页面</a>，然后点击那个fork，接着到你的仓库下继续操作：首先把<code>.github/workflows/hexo-deploy.yml</code>最后的<code>REPOSITORY_NAME</code>改成你自己博客的名字（xxx.github.io)，然后把仓库名字改成刚才设置的名字，再检查仓库设置的Pages页面和Actions-&gt;General页面的设置项是否和底下的一样。完成后，clone到本地，把我的博文换成你的，再到deploy分支配置好你的博客发布设置，最后push到GitHub检查一下有没有问题即可。</p></blockquote><h3 id="开始！"><a href="https://mxts.jiujiuer.xyz/2022/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E5%BC%80%E5%A7%8B%EF%BC%81" class="headerlink" title="开始！"></a>开始！</h3><p>首先，在GitHub上创建你的博客仓库：</p><blockquote><p>特别注意，这里我建这个名字只是作为示范，你们建立仓库的时候直接用<code>用户名.github.io</code>当仓库名就ok</p></blockquote><p><img src="https://mxts.jiujiuer.xyz/img/Pasted%20image%2020230521011305.png"/></p><p>并克隆到本地：</p><p><img src="https://mxts.jiujiuer.xyz/img/Pasted%20image%2020230521011417.png"/></p><p>完成后打开：</p><p><img src="https://mxts.jiujiuer.xyz/img/Pasted%20image%2020230521005753.png"/></p><p>上面我已经用VSCode打开了。创建好之后，在当前目录下打开命令行工具，再使用下面的命令创建两个分支：<code>deploy</code>和<code>html</code>。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line">git branch deploy</span><br/><span class="line">git branch html</span><br/></pre></td></tr></tbody></table></figure><p>三个分支（<code>main</code>是默认分支）分别用来存储博客文章，保存博客构建工具以及存储生成的博客静态页面。</p><p>至此，三个分支就准备好了。下面就是重头戏了。</p><h3 id="初始化博客构建工具"><a href="https://mxts.jiujiuer.xyz/2022/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8D%9A%E5%AE%A2%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7" class="headerlink" title="初始化博客构建工具"></a>初始化博客构建工具</h3><p>先用<code>git checkout deploy</code>切换到构建分支，<strong>并删除LICENSE和README.md</strong>。随后创建一个临时目录<code>tmp</code>，并在其中运行<code>hexo init</code>来初始化博客构建工具hexo。</p><p><img src="https://mxts.jiujiuer.xyz/img/Pasted%20image%2020230521012200.png"/></p><p>随后将<code>tmp</code>下除了<code>.git</code>的所有文件移动到文件夹根目录下，并删除<code>tmp</code>目录。然后运行一下<code>npm i</code>再安装下依赖。</p><p><img src="https://mxts.jiujiuer.xyz/img/Pasted%20image%2020230521012421.png"/></p><p>然后和上面一样，在根目录下安装必要的依赖：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">npm i hexo-deployer-git hexo-server hexo-generator-feed --save</span><br/></pre></td></tr></tbody></table></figure><p>并更改<code>_config.yml</code>中的最底下的部分如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br/><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br/><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/[username]/[username].github.io.git</span></span><br/><span class="line">  <span class="attr">branch:</span> <span class="string">html</span></span><br/></pre></td></tr></tbody></table></figure><p>这时候应该就可以试着推送一下。没有问题的话会看到这个结果：</p><p><img src="https://mxts.jiujiuer.xyz/img/Pasted%20image%2020230521013346.png"/></p><p>这证明我们的推送已经配置好了。如果之前没设置git的用户名和邮箱的话会出问题，设置一下就好了。</p><p>然后就随便你怎么定制你的博客了，方法和上面那个版本的教程一样。</p><p>最后记得把<code>source</code>下的所有文件移动到文件夹外边，待会会再用到的。这里不移动出去，到时候可能会出现merge合并问题，比较麻烦。</p><h3 id="配置主分支"><a href="https://mxts.jiujiuer.xyz/2022/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E9%85%8D%E7%BD%AE%E4%B8%BB%E5%88%86%E6%94%AF" class="headerlink" title="配置主分支"></a>配置主分支</h3><p>这一步是实现自动化的关键。因为其实做到现在这一步，我们其实已经可以用上面第一版的教程部署博客了。这里多增加的，就是一点点git技巧和GitHub技巧啦。</p><p>首先，在上面的部署工具配置完成后，使用<code>git add .</code>和<code>git commit -m &#34;deploy branch configure&#34;</code>来将deploy分支的改动保存到这个分支中。</p><p>完成这一步后，我们用<code>git checkout main</code>切换到main分支，开始我们最后的工作。不过在这之前，先在根目录添加一个<code>.gitignore</code>，把这几个文件添加进去：</p><p><img src="https://mxts.jiujiuer.xyz/img/Pasted%20image%2020230521015420.png"/></p><p>完成之后，我们就可以把之前移出去的source目录下的所有东西移动进来了。</p><p>下面是一份GitHub Actions配置清单，先把最底下的<code>REPOSITORY_NAME</code>替换为你的博客仓库地址，随后，把它保存到<code>.github/workflows/hexo-deploy.yml</code>中。</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Deploy</span></span><br/><span class="line"><span class="attr">on:</span></span><br/><span class="line">  <span class="attr">push:</span></span><br/><span class="line">    <span class="attr">branches:</span></span><br/><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br/><span class="line"><span class="attr">jobs:</span></span><br/><span class="line">  <span class="attr">build:</span></span><br/><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br/><span class="line">    <span class="attr">steps:</span></span><br/><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">deploy</span> <span class="string">branch</span></span><br/><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br/><span class="line">        <span class="attr">with:</span></span><br/><span class="line">          <span class="attr">ref:</span> <span class="string">deploy</span></span><br/><span class="line">          <span class="attr">path:</span> <span class="string">./</span></span><br/><span class="line"></span><br/><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">blog</span> <span class="string">repo</span></span><br/><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br/><span class="line">        <span class="attr">with:</span></span><br/><span class="line">          <span class="attr">ref:</span> <span class="string">main</span></span><br/><span class="line">          <span class="attr">path:</span> <span class="string">./source</span></span><br/><span class="line"></span><br/><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Node.js</span></span><br/><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span></span><br/><span class="line">        <span class="attr">with:</span></span><br/><span class="line">          <span class="attr">node-version:</span> <span class="number">14</span></span><br/><span class="line"></span><br/><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br/><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br/><span class="line"><span class="string">          npm install &amp;&amp; npm run build</span></span><br/><span class="line"><span class="string"></span></span><br/><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br/><span class="line">        <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@releases/v3</span></span><br/><span class="line">        <span class="attr">with:</span></span><br/><span class="line">          <span class="attr">REPOSITORY_NAME:</span> <span class="string">xeonds/hexo-actions</span></span><br/><span class="line">          <span class="attr">BRANCH:</span> <span class="string">html</span></span><br/><span class="line">          <span class="attr">FOLDER:</span> <span class="string">public</span></span><br/><span class="line"></span><br/></pre></td></tr></tbody></table></figure><p>保存更改并推送到GitHub：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/></pre></td><td class="code"><pre><span class="line">git add .</span><br/><span class="line">git commit -m <span class="string">&#34;main workflow configure&#34;</span></span><br/><span class="line">git push -u origin deploy</span><br/></pre></td></tr></tbody></table></figure><p>这次推送会触发GitHub Action，并且会失败。完成接下来的配置之后，我们的配置才能算彻底完成。</p><h3 id="GitHub仓库配置"><a href="https://mxts.jiujiuer.xyz/2022/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#GitHub%E4%BB%93%E5%BA%93%E9%85%8D%E7%BD%AE" class="headerlink" title="GitHub仓库配置"></a>GitHub仓库配置</h3><p>现在可以关掉其他东西，打开浏览器了。找到我们的仓库，点开设置并找到<strong>Pages</strong>选项卡：</p><p><img src="https://mxts.jiujiuer.xyz/img/Pasted%20image%2020230523215123.png"/></p><p>按照上图的设置进行配置：首先在Source选项中，选择<strong>Deploy from a branch</strong>，然后在Branch选项中，选择<code>html</code>分支的<code>/(root)</code>目录作为部署的源路径。</p><p>保存之后，在左侧找到<strong>Actions &gt; General</strong>选项卡：</p><p><img src="https://mxts.jiujiuer.xyz/img/Pasted%20image%2020230523215832.png"/></p><p>翻到最底下，把<strong>Workflow Permossions</strong>的选项改成<strong>Read and write permissions</strong>，然后保存。</p><p>到这里，我们的配置工作就基本结束了。</p><h3 id="验证部署结果"><a href="https://mxts.jiujiuer.xyz/2022/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E9%AA%8C%E8%AF%81%E9%83%A8%E7%BD%B2%E7%BB%93%E6%9E%9C" class="headerlink" title="验证部署结果"></a>验证部署结果</h3><p>打开我们的博客目录，在<code>_posts</code>目录下写一篇新的博客，并标注<code>frontmatter</code>信息后，在git中提交并推送它到GitHub。</p><p>随后，等待大概1分钟左右，打开你的仓库首页，查看GitHub Action运行情况：</p><p><img src="https://mxts.jiujiuer.xyz/img/Pasted%20image%2020230523220538.png"/></p><p>一切顺利的话，就会看到成功的对勾和右下角的Environments为Active。此时打开你的GitHub Pages链接（通常是<code>https://[用户名].github.io/</code>），应该就能正常看到你的博客首页了。</p><p>如果出现异常，你可以去GitHub Action页面中查看你的Workflow详情，并根据报错信息在网上找解决方案（实在不行也可以问问New Bing之类的）。</p><p>总之是结束了，可喜可贺，可喜可贺。</p><blockquote><p>写这篇教程的时候，看到了不少和我思路一样的，不过不少都因为时效性问题无法部署，而且我的部署方式比较特别，是一个仓库实现hexo配置存储、博客文章存储以及静态页面预览，所以操作方法也不太一样。<br/>总之想了下还是写了这篇教程。<br/>以及中间关于Actions权限设置的问题，我翻了好久才在一个Issue里看到解决方案，之前真的是一头雾水。如果去翻翻官方文档的话，应该能更早解决吧<br/><del>不管了反正终于结束了删库跑路删库跑路</del></p></blockquote><h2 id="开始写作！"><a href="https://mxts.jiujiuer.xyz/2022/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#%E5%BC%80%E5%A7%8B%E5%86%99%E4%BD%9C%EF%BC%81" class="headerlink" title="开始写作！"></a>开始写作！</h2><p>一篇博客的写作流程大概是这样：</p><ol><li>在博客目录打开命令行，输入 <code>hexo new &#34;文章标题&#34;</code> 来创建一篇新文章</li><li>用写作软件打开上面创建的文件，开始写作</li><li>完成之后，在命令行中输入 <code>hexo clean &amp;&amp; hexo d</code> 发布文章到GitHub</li></ol><p>熟悉写作流程之后，就可以对博客进行进一步定制了，比如安装主题，安装其他插件等。后续我会列出来一些参考资料（<em>＾-＾</em>）</p><h3 id="Obsidian-Hexo-x3D"><a href="https://mxts.jiujiuer.xyz/2022/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#Obsidian-Hexo-x3D" class="headerlink" title="Obsidian+Hexo=?"></a>Obsidian+Hexo=?</h3><p>Obsidian（黑曜石）是一个很好用的专业Markdown写作和管理工具。下面我简单介绍下用Obsidian结合hexo进行博客写作的流程。</p><p>首先，安装<a href="https://github.com/obsidianmd/obsidian-releases/releases/download/v1.1.9/Obsidian.1.1.9.exe">Obsidian</a>，下不下来就用梯子。安装完成后打开你的博客文件夹：</p><p><img src="https://mxts.jiujiuer.xyz/img/Pasted%20image%2020230210143902.png" alt="就中间那个打开本地仓库"/></p><p>打开之后进入设置，在文件与链接最底下的忽略文件中添加<code>node_modules</code>、<code>scaffolds</code>、<code>public</code>和<code>themes</code>四个文件夹。随后往上拉，存放新建笔记的文件夹改为<code>source/_posts</code>。</p><p>还是在设置中，点击左侧<code>模板</code>，模板文件夹位置选择<code>scaffolds</code>。然后关闭设置，点开<code>scaffolds</code>目录：</p><p><img src="https://mxts.jiujiuer.xyz/img/Pasted%20image%2020230520234621.png" alt="=。="/></p><p>改为下面的格式即可（author后面改成你自己的名字）。简单介绍下，title标题，date文章创建日期，author作者，toc目录（table of contents），excerpt文章简介，tags文章标签。</p><p>如果是使用部署方案2，那么只需要用obsidian打开仓库根目录，然后把scaffolds目录复制到博客目录里，然后改名成_scaffolds，然后把你要添加的模板添加到目录里，再在设置里改好，就能愉快地使用了。另外，不要忘了忽略node_modules之类的目录。</p><hr/><p>到这里就配置完了。接下来讲讲写作流程：</p><p>打开Obsidian，新建文章并确定好标题。随后点击左侧模板图标，选择post模板，它会根据模板格式自动生成文章标题、作者、时间等文章元信息，随后就是写作了。</p><p>完成后，在博客目录打开命令行，运行<code>hexo s</code>预览博客发布后的效果，确认无误后使用<code>hexo g &amp;&amp; hexo d</code>来生成并发布博客到GitHub Pages。当然，如果还能折腾的动，还可以使用Obsidin的Git插件+Git命令在Obsidian中一键发布博客。</p><p>如果是使用方案2部署，那么就更简单了。直接把博客目录作为Markdown仓库打开，并设置好Obsidian Git插件，配置好模板目录。写作完成后，直接<code>Ctrl+P</code>来commit+push就行，直接推送到远程仓库，让GitHub Actions帮你发布到html分支上。</p><p>这应该就是折腾的尽头了。如果你还想再折腾的话，那可以试试更改之前的workflow，来添加你的自定义操作，比如一键部署到你的服务器上，或者邮件通知发布结果之类的。</p></body></html>