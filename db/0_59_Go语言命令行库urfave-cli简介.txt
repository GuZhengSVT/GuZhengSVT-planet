<html><head></head><body><p>很多用Go写的命令行程序都用了urfave/cli这个库，包括geth，有必要简单了解一下。</p><p>用C写过命令行程序的人应该都不陌生，我们需要根据argc/argv一个个地解析命令行参数，调用不同的函数，最后还要写一个usage()函数用于打印帮助信息。urfave/cli把这个过程做了一下封装，抽象出flag/command/subcommand这些模块，用户只需要提供一些模块的配置，参数的解析和关联在库内部完成，帮助信息也可以自动生成。</p><p>举个例子，我们想要实现下面这个命令行程序：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/></pre></td><td class="code"><pre><span class="line">NAME:   GoTest - hello world</span><br/><span class="line"></span><br/><span class="line">USAGE:   GoTest [global options] <span class="built_in">command</span> [<span class="built_in">command</span> options] [arguments...]</span><br/><span class="line"></span><br/><span class="line">VERSION:   1.2.3</span><br/><span class="line"></span><br/><span class="line">COMMANDS:     <span class="built_in">help</span>, h  Shows a list of commands or <span class="built_in">help</span> <span class="keyword">for</span> one <span class="built_in">command</span></span><br/><span class="line">arithmetic:     </span><br/><span class="line">  add, a  calc 1+1     </span><br/><span class="line">  sub, s  calc 5-3   </span><br/><span class="line">database:     </span><br/><span class="line">  db  database operations </span><br/><span class="line">  </span><br/><span class="line">GLOBAL OPTIONS:   </span><br/><span class="line">--lang FILE, -l FILE    <span class="built_in">read</span> from FILE (default: <span class="string">&#34;english&#34;</span>)   </span><br/><span class="line">--port value, -p value  listening port (default: 8000)   </span><br/><span class="line">--<span class="built_in">help</span>, -h              Help!Help!   </span><br/><span class="line">--print-version, -v     <span class="built_in">print</span> version</span><br/></pre></td></tr></tbody></table></figure><ol><li>基本结构<br/>导入包以后，通过cli.NewApp()创建一个实例，然后调用Run()方法就实现了一个最基本的命令行程序了。</li></ol><p>当然，为了让我们的程序干点事情，可以指定一下入口函数app.Action，具体写法如下：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br/><span class="line">         <span class="string">&#34;fmt&#34;</span></span><br/><span class="line">         <span class="string">&#34;gopkg.in/urfave/cli.v1&#34;</span></span><br/><span class="line">) </span><br/><span class="line">         </span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {    </span><br/><span class="line">app := cli.NewApp()    </span><br/><span class="line">app.Action = <span class="function"><span class="keyword">func</span><span class="params">(c *cli.Context)</span></span> <span class="type">error</span> {        </span><br/><span class="line">fmt.Println(<span class="string">&#34;BOOM!&#34;</span>)        </span><br/><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>    </span><br/><span class="line">} </span><br/><span class="line">    </span><br/><span class="line">err := app.Run(os.Args)    </span><br/><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {        </span><br/><span class="line">log.Fatal(err)    </span><br/><span class="line">}</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><ol start="2"><li>公共配置<br/>就是帮助里需要显示的一些基本信息：</li></ol><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/></pre></td><td class="code"><pre><span class="line">  app.Name = <span class="string">&#34;GoTest&#34;</span>  </span><br/><span class="line">  app.Usage = <span class="string">&#34;hello world&#34;</span>  </span><br/><span class="line">  app.Version = <span class="string">&#34;1.2.3&#34;</span></span><br/></pre></td></tr></tbody></table></figure><ol start="3"><li>Flag配置<br/>具体对应于帮助中的以下信息：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line">--lang FILE, -l FILE    <span class="built_in">read</span> from FILE (default: <span class="string">&#34;english&#34;</span>)</span><br/><span class="line">--port value, -p value  listening port (default: 8000)</span><br/></pre></td></tr></tbody></table></figure><p>对应代码：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> language <span class="type">string</span>     </span><br/><span class="line">app.Flags = []cli.Flag {        </span><br/><span class="line">cli.IntFlag {            </span><br/><span class="line">Name: <span class="string">&#34;port, p&#34;</span>,            </span><br/><span class="line">Value: <span class="number">8000</span>,            </span><br/><span class="line">Usage: <span class="string">&#34;listening port&#34;</span>,        </span><br/><span class="line">},        </span><br/><span class="line">cli.StringFlag {            </span><br/><span class="line">Name: <span class="string">&#34;lang, l&#34;</span>,            </span><br/><span class="line">Value: <span class="string">&#34;english&#34;</span>,            </span><br/><span class="line">Usage: <span class="string">&#34;read from `FILE`&#34;</span>,            </span><br/><span class="line">Destination: &amp;language,        </span><br/><span class="line">},    </span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>可以看到，每一个flag都对应一个cli.Flag接口的实例。</p><p>Name字段中逗号后面的字符表示flag的简写，也就是说”–port”和”-p”是等价的。</p><p>Value字段可以指定flag的默认值。</p><p>Usage字段是flag的描述信息。</p><p>Destination字段可以为该flag指定一个接收者，比如上面的language变量。解析完”–lang”这个flag后会自动存储到这个变量里，后面的代码就可以直接使用这个变量的值了。</p><p>另外，如果你想给用户增加一些属性值类型的提示，可以通过占位符（placeholder）来实现，比如上面的”–lang FILE”。占位符通过``符号来标识。</p><p>我们可以在app.Action中测试一下打印这些flag的值：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/></pre></td><td class="code"><pre><span class="line">app.Action = <span class="function"><span class="keyword">func</span><span class="params">(c *cli.Context)</span></span> <span class="type">error</span> {        </span><br/><span class="line">fmt.Println(<span class="string">&#34;BOOM!&#34;</span>)        </span><br/><span class="line">fmt.Println(c.String(<span class="string">&#34;lang&#34;</span>), c.Int(<span class="string">&#34;port&#34;</span>))        </span><br/><span class="line">fmt.Println(language)        </span><br/><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>    </span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>另外，正常来说帮助信息里的flag是按照代码里的声明顺序排列的，如果你想让它们按照字典序排列的话，可以借助于sort：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#34;sort&#34;</span></span><br/><span class="line">sort.Sort(cli.FlagsByName(app.Flags))</span><br/></pre></td></tr></tbody></table></figure><p>最后，help和version这两个flag有默认实现，也可以自己改：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/></pre></td><td class="code"><pre><span class="line">cli.HelpFlag = cli.BoolFlag {        </span><br/><span class="line">Name: <span class="string">&#34;help, h&#34;</span>,        </span><br/><span class="line">Usage: <span class="string">&#34;Help!Help!&#34;</span>,    </span><br/><span class="line">}        </span><br/><span class="line">cli.VersionFlag = cli.BoolFlag {        </span><br/><span class="line">Name: <span class="string">&#34;print-version, v&#34;</span>,        </span><br/><span class="line">Usage: <span class="string">&#34;print version&#34;</span>,    </span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><ol start="4"><li>Command配置<br/>命令行程序除了有flag，还有command（比如git log, git commit等等）。</li></ol><p>另外每个command可能还有subcommand，也就必须要通过添加两个命令行参数才能完成相应的操作。比如我们的db命令包含2个子命令，如果输入GoTest db -h会显示下面的信息：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/></pre></td><td class="code"><pre><span class="line">NAME:   GoTest db - database operations </span><br/><span class="line"></span><br/><span class="line">USAGE:   GoTest db <span class="built_in">command</span> [<span class="built_in">command</span> options] [arguments...] </span><br/><span class="line"></span><br/><span class="line">COMMANDS:   insert  insert data     </span><br/><span class="line">delete  delete data </span><br/><span class="line"></span><br/><span class="line">OPTIONS:   --<span class="built_in">help</span>, -h  Help!Help!</span><br/></pre></td></tr></tbody></table></figure><p>每个command都对应于一个cli.Command接口的实例，入口函数通过Action指定。如果你想像在帮助信息里实现分组显示，可以为每个command指定一个Category。具体代码如下：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/><span class="line">42</span><br/><span class="line">43</span><br/><span class="line">44</span><br/><span class="line">45</span><br/></pre></td><td class="code"><pre><span class="line">app.Commands = []cli.Command {        </span><br/><span class="line">{            </span><br/><span class="line">Name: <span class="string">&#34;add&#34;</span>,            </span><br/><span class="line">Aliases: []<span class="type">string</span>{<span class="string">&#34;a&#34;</span>},            </span><br/><span class="line">Usage: <span class="string">&#34;calc 1+1&#34;</span>,            </span><br/><span class="line">Category: <span class="string">&#34;arithmetic&#34;</span>,            </span><br/><span class="line">Action: <span class="function"><span class="keyword">func</span><span class="params">(c *cli.Context)</span></span> <span class="type">error</span> {                </span><br/><span class="line">fmt.Println(<span class="string">&#34;1 + 1 = &#34;</span>, <span class="number">1</span> + <span class="number">1</span>)                </span><br/><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>            </span><br/><span class="line">},        </span><br/><span class="line">},        </span><br/><span class="line">{            </span><br/><span class="line">Name: <span class="string">&#34;sub&#34;</span>,            </span><br/><span class="line">Aliases: []<span class="type">string</span>{<span class="string">&#34;s&#34;</span>},            </span><br/><span class="line">Usage: <span class="string">&#34;calc 5-3&#34;</span>,            </span><br/><span class="line">Category: <span class="string">&#34;arithmetic&#34;</span>,            </span><br/><span class="line">Action: <span class="function"><span class="keyword">func</span><span class="params">(c *cli.Context)</span></span> <span class="type">error</span> {                </span><br/><span class="line">fmt.Println(<span class="string">&#34;5 - 3 = &#34;</span>, <span class="number">5</span> - <span class="number">3</span>)                </span><br/><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>            </span><br/><span class="line">},        </span><br/><span class="line">},        </span><br/><span class="line">{            </span><br/><span class="line">Name: <span class="string">&#34;db&#34;</span>,            </span><br/><span class="line">Usage: <span class="string">&#34;database operations&#34;</span>,            </span><br/><span class="line">Category: <span class="string">&#34;database&#34;</span>,            </span><br/><span class="line">Subcommands: []cli.Command {                </span><br/><span class="line">{                    </span><br/><span class="line">Name: <span class="string">&#34;insert&#34;</span>,                    </span><br/><span class="line">Usage: <span class="string">&#34;insert data&#34;</span>,                    </span><br/><span class="line">Action: <span class="function"><span class="keyword">func</span><span class="params">(c *cli.Context)</span></span> <span class="type">error</span> {                       </span><br/><span class="line">fmt.Println(<span class="string">&#34;insert subcommand&#34;</span>)                        </span><br/><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>                    </span><br/><span class="line">},                </span><br/><span class="line">},                </span><br/><span class="line">{                    </span><br/><span class="line">Name: <span class="string">&#34;delete&#34;</span>,                    </span><br/><span class="line">Usage: <span class="string">&#34;delete data&#34;</span>,                    </span><br/><span class="line">Action: <span class="function"><span class="keyword">func</span><span class="params">(c *cli.Context)</span></span> <span class="type">error</span> {                       </span><br/><span class="line">fmt.Println(<span class="string">&#34;delete subcommand&#34;</span>)                        </span><br/><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>                    </span><br/><span class="line">},                </span><br/><span class="line">},            </span><br/><span class="line">},        </span><br/><span class="line">},    </span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>如果你想在command执行前后执行后完成一些操作，可以指定app.Before/app.After这两个字段：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/></pre></td><td class="code"><pre><span class="line">app.Before = <span class="function"><span class="keyword">func</span><span class="params">(c *cli.Context)</span></span> <span class="type">error</span> {        </span><br/><span class="line">fmt.Println(<span class="string">&#34;app Before&#34;</span>)        </span><br/><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>    </span><br/><span class="line">}    </span><br/><span class="line">app.After = <span class="function"><span class="keyword">func</span><span class="params">(c *cli.Context)</span></span> <span class="type">error</span> {        </span><br/><span class="line">fmt.Println(<span class="string">&#34;app After&#34;</span>)        </span><br/><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>    </span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>具体测试一下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line">$ GoTest add</span><br/><span class="line">$ GoTest db insert</span><br/></pre></td></tr></tbody></table></figure><ol start="5"><li>小结<br/>总体来说，urfave/cli这个库还是很好用的，完成了很多routine的工作，程序员只需要专注于具体业务逻辑的实现。</li></ol><p>附完整demo代码：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/><span class="line">42</span><br/><span class="line">43</span><br/><span class="line">44</span><br/><span class="line">45</span><br/><span class="line">46</span><br/><span class="line">47</span><br/><span class="line">48</span><br/><span class="line">49</span><br/><span class="line">50</span><br/><span class="line">51</span><br/><span class="line">52</span><br/><span class="line">53</span><br/><span class="line">54</span><br/><span class="line">55</span><br/><span class="line">56</span><br/><span class="line">57</span><br/><span class="line">58</span><br/><span class="line">59</span><br/><span class="line">60</span><br/><span class="line">61</span><br/><span class="line">62</span><br/><span class="line">63</span><br/><span class="line">64</span><br/><span class="line">65</span><br/><span class="line">66</span><br/><span class="line">67</span><br/><span class="line">68</span><br/><span class="line">69</span><br/><span class="line">70</span><br/><span class="line">71</span><br/><span class="line">72</span><br/><span class="line">73</span><br/><span class="line">74</span><br/><span class="line">75</span><br/><span class="line">76</span><br/><span class="line">77</span><br/><span class="line">78</span><br/><span class="line">79</span><br/><span class="line">80</span><br/><span class="line">81</span><br/><span class="line">82</span><br/><span class="line">83</span><br/><span class="line">84</span><br/><span class="line">85</span><br/><span class="line">86</span><br/><span class="line">87</span><br/><span class="line">88</span><br/><span class="line">89</span><br/><span class="line">90</span><br/><span class="line">91</span><br/><span class="line">92</span><br/><span class="line">93</span><br/><span class="line">94</span><br/><span class="line">95</span><br/><span class="line">96</span><br/><span class="line">97</span><br/><span class="line">98</span><br/><span class="line">99</span><br/><span class="line">100</span><br/><span class="line">101</span><br/><span class="line">102</span><br/><span class="line">103</span><br/><span class="line">104</span><br/><span class="line">105</span><br/><span class="line">106</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cli</span><br/><span class="line"></span><br/><span class="line"><span class="keyword">import</span> (</span><br/><span class="line"><span class="string">&#34;fmt&#34;</span></span><br/><span class="line"><span class="string">&#34;log&#34;</span></span><br/><span class="line"><span class="string">&#34;os&#34;</span></span><br/><span class="line"><span class="string">&#34;sort&#34;</span></span><br/><span class="line"></span><br/><span class="line"><span class="string">&#34;gopkg.in/urfave/cli.v1&#34;</span></span><br/><span class="line">)</span><br/><span class="line"></span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Run</span><span class="params">()</span></span> {</span><br/><span class="line"><span class="keyword">var</span> language <span class="type">string</span></span><br/><span class="line">app := cli.NewApp()</span><br/><span class="line">app.Name = <span class="string">&#34;GoTest&#34;</span></span><br/><span class="line">app.Usage = <span class="string">&#34;hello world&#34;</span></span><br/><span class="line">app.Version = <span class="string">&#34;1.2.3&#34;</span></span><br/><span class="line">app.Flags = []cli.Flag{</span><br/><span class="line">cli.IntFlag{</span><br/><span class="line">Name:  <span class="string">&#34;port, p&#34;</span>,</span><br/><span class="line">Value: <span class="number">8000</span>,</span><br/><span class="line">Usage: <span class="string">&#34;listening port&#34;</span>,</span><br/><span class="line">},</span><br/><span class="line">cli.StringFlag{</span><br/><span class="line">Name:        <span class="string">&#34;lang, l&#34;</span>,</span><br/><span class="line">Value:       <span class="string">&#34;english&#34;</span>,</span><br/><span class="line">Usage:       <span class="string">&#34;read from `FILE`&#34;</span>,</span><br/><span class="line">Destination: &amp;language,</span><br/><span class="line">},</span><br/><span class="line">}</span><br/><span class="line">app.Commands = []cli.Command{</span><br/><span class="line">{</span><br/><span class="line">Name:     <span class="string">&#34;add&#34;</span>,</span><br/><span class="line">Aliases:  []<span class="type">string</span>{<span class="string">&#34;a&#34;</span>},</span><br/><span class="line">Usage:    <span class="string">&#34;calc 1+1&#34;</span>,</span><br/><span class="line">Category: <span class="string">&#34;arithmetic&#34;</span>,</span><br/><span class="line">Action: <span class="function"><span class="keyword">func</span><span class="params">(c *cli.Context)</span></span> <span class="type">error</span> {</span><br/><span class="line">fmt.Println(<span class="string">&#34;1 + 1 = &#34;</span>, <span class="number">1</span>+<span class="number">1</span>)</span><br/><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br/><span class="line">},</span><br/><span class="line">},</span><br/><span class="line">{</span><br/><span class="line">Name:     <span class="string">&#34;sub&#34;</span>,</span><br/><span class="line">Aliases:  []<span class="type">string</span>{<span class="string">&#34;s&#34;</span>},</span><br/><span class="line">Usage:    <span class="string">&#34;calc 5-3&#34;</span>,</span><br/><span class="line">Category: <span class="string">&#34;arithmetic&#34;</span>,</span><br/><span class="line">Action: <span class="function"><span class="keyword">func</span><span class="params">(c *cli.Context)</span></span> <span class="type">error</span> {</span><br/><span class="line">fmt.Println(<span class="string">&#34;5 - 3 = &#34;</span>, <span class="number">5</span><span class="number">-3</span>)</span><br/><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br/><span class="line">},</span><br/><span class="line">},</span><br/><span class="line">{</span><br/><span class="line">Name:     <span class="string">&#34;db&#34;</span>,</span><br/><span class="line">Usage:    <span class="string">&#34;database operations&#34;</span>,</span><br/><span class="line">Category: <span class="string">&#34;database&#34;</span>,</span><br/><span class="line">Subcommands: []cli.Command{</span><br/><span class="line">{</span><br/><span class="line">Name:  <span class="string">&#34;insert&#34;</span>,</span><br/><span class="line">Usage: <span class="string">&#34;insert data&#34;</span>,</span><br/><span class="line">Action: <span class="function"><span class="keyword">func</span><span class="params">(c *cli.Context)</span></span> <span class="type">error</span> {</span><br/><span class="line">fmt.Println(<span class="string">&#34;insert subcommand&#34;</span>)</span><br/><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br/><span class="line">},</span><br/><span class="line">},</span><br/><span class="line">{</span><br/><span class="line">Name:  <span class="string">&#34;delete&#34;</span>,</span><br/><span class="line">Usage: <span class="string">&#34;delete data&#34;</span>,</span><br/><span class="line">Action: <span class="function"><span class="keyword">func</span><span class="params">(c *cli.Context)</span></span> <span class="type">error</span> {</span><br/><span class="line">fmt.Println(<span class="string">&#34;delete subcommand&#34;</span>)</span><br/><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br/><span class="line">},</span><br/><span class="line">},</span><br/><span class="line">},</span><br/><span class="line">},</span><br/><span class="line">}</span><br/><span class="line">app.Action = <span class="function"><span class="keyword">func</span><span class="params">(c *cli.Context)</span></span> <span class="type">error</span> {</span><br/><span class="line">fmt.Println(<span class="string">&#34;BOOM!&#34;</span>)</span><br/><span class="line">fmt.Println(c.String(<span class="string">&#34;lang&#34;</span>), c.Int(<span class="string">&#34;port&#34;</span>))</span><br/><span class="line">fmt.Println(language)</span><br/><span class="line"><span class="keyword">if</span> c.Int(<span class="string">&#34;port&#34;</span>) == <span class="number">8000</span> {</span><br/><span class="line"><span class="keyword">return</span> cli.NewExitError(<span class="string">&#34;invalid port&#34;</span>, <span class="number">88</span>)</span><br/><span class="line">}</span><br/><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br/><span class="line">}</span><br/><span class="line">app.Before = <span class="function"><span class="keyword">func</span><span class="params">(c *cli.Context)</span></span> <span class="type">error</span> {</span><br/><span class="line">fmt.Println(<span class="string">&#34;app Before&#34;</span>)</span><br/><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br/><span class="line">}</span><br/><span class="line">app.After = <span class="function"><span class="keyword">func</span><span class="params">(c *cli.Context)</span></span> <span class="type">error</span> {</span><br/><span class="line">fmt.Println(<span class="string">&#34;app After&#34;</span>)</span><br/><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br/><span class="line">}</span><br/><span class="line">sort.Sort(cli.FlagsByName(app.Flags))</span><br/><span class="line">cli.HelpFlag = cli.BoolFlag{</span><br/><span class="line">Name:  <span class="string">&#34;help, h&#34;</span>,</span><br/><span class="line">Usage: <span class="string">&#34;Help!Help!&#34;</span>,</span><br/><span class="line">}</span><br/><span class="line">cli.VersionFlag = cli.BoolFlag{</span><br/><span class="line">Name:  <span class="string">&#34;print-version, v&#34;</span>,</span><br/><span class="line">Usage: <span class="string">&#34;print version&#34;</span>,</span><br/><span class="line">}</span><br/><span class="line">err := app.Run(os.Args)</span><br/><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br/><span class="line">log.Fatal(err)</span><br/><span class="line">}</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure></body></html>