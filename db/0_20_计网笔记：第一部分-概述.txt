<html><head></head><body><h2 id="Chap-1-绪论"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#Chap-1-%E7%BB%AA%E8%AE%BA" class="headerlink" title="Chap.1.绪论"></a>Chap.1.绪论</h2><h3 id="数据通信"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1" class="headerlink" title="数据通信"></a>数据通信</h3><p><strong>数据</strong>是任何格式表示的信息，<strong>数据通信</strong>是两台设备间通过介质进行数据交换。效率取决于：</p><ol><li><strong>传递性</strong>：目的地正确</li><li><strong>准确性</strong>：数据正确</li><li><strong>及时性</strong>：时延可接受</li><li><strong>抖动性</strong>：各部分到达时延不相同</li></ol><h4 id="组成"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#%E7%BB%84%E6%88%90" class="headerlink" title="组成"></a>组成</h4><ol><li>报文</li><li>发送方</li><li>接收方</li><li>传输介质</li><li>协议</li></ol><h4 id="信息表示"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#%E4%BF%A1%E6%81%AF%E8%A1%A8%E7%A4%BA" class="headerlink" title="信息表示"></a>信息表示</h4><p>二进制/文本编码</p><h4 id="数据流"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#%E6%95%B0%E6%8D%AE%E6%B5%81" class="headerlink" title="数据流"></a>数据流</h4><ol><li>单工：数据流向是单向的，比如键盘等输入设备就是单工连接</li><li>半双工：同时只能有一个方向的数据流动，无线电设备有的就是这样</li><li>全双工：双向车道，同时可以有两个方向的数据流过，比如网线等</li></ol><h3 id="网络"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#%E7%BD%91%E7%BB%9C" class="headerlink" title="网络"></a>网络</h3><h4 id="分布式处理"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#%E5%88%86%E5%B8%83%E5%BC%8F%E5%A4%84%E7%90%86" class="headerlink" title="分布式处理"></a>分布式处理</h4><h4 id="网络准则"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#%E7%BD%91%E7%BB%9C%E5%87%86%E5%88%99" class="headerlink" title="网络准则"></a>网络准则</h4><ul><li>性能</li><li>可靠性</li><li>安全性</li></ul><h4 id="物理结构"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#%E7%89%A9%E7%90%86%E7%BB%93%E6%9E%84" class="headerlink" title="物理结构"></a>物理结构</h4><ul><li>连接类型<ul><li>点到点</li><li>多点连接</li></ul></li><li>物理拓扑结构<ul><li>网状：拥有最高的稳定性</li><li>星形</li><li>总线</li><li>环状</li><li>混合型</li></ul></li></ul><h4 id="网络模型"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B" class="headerlink" title="网络模型"></a>网络模型</h4><p>当今为止最著名的就是<strong>OSI模型</strong>和<strong>因特网模型</strong>。</p><h4 id="网络分类"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#%E7%BD%91%E7%BB%9C%E5%88%86%E7%B1%BB" class="headerlink" title="网络分类"></a>网络分类</h4><ul><li>局域网-LAN</li><li>广域网-WAN</li><li>城域网-MAN</li></ul><h3 id="因特网"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#%E5%9B%A0%E7%89%B9%E7%BD%91" class="headerlink" title="因特网"></a>因特网</h3><p>历史之类的，太长不看。因特网前身是<strong>ARPANET</strong>。</p><h3 id="协议和标准"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#%E5%8D%8F%E8%AE%AE%E5%92%8C%E6%A0%87%E5%87%86" class="headerlink" title="协议和标准"></a>协议和标准</h3><p>协议，就是规则。标准是协商达成一致的规则。</p><h4 id="协议"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#%E5%8D%8F%E8%AE%AE" class="headerlink" title="协议"></a>协议</h4><p>它规定了通信的内容、通信的方式和通信的时间。它的核心要素是语法、语义和时序。</p><ul><li>语法：数据的结构或格式</li><li>语义：每一个片段或位的含义</li><li>时序：报文发送的时间和发送的速率</li></ul><h4 id="标准"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#%E6%A0%87%E5%87%86" class="headerlink" title="标准"></a>标准</h4><p>分为事实标准和法定标准。</p><h2 id="Chap-2-网络模型"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#Chap-2-%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B" class="headerlink" title="Chap.2.网络模型"></a>Chap.2.网络模型</h2><h3 id="OSI模型"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#OSI%E6%A8%A1%E5%9E%8B" class="headerlink" title="OSI模型"></a>OSI模型</h3><p>从上到下一共有7层</p><ul><li>应用层：使得用户（人或软件）可以访问网络，它负责向应用提供服务<ul><li>具体的服务有：<strong>网络虚拟终端（ssh等），文件传输、访问和管理，邮件服务、目录服务</strong></li></ul></li><li>表示层：翻译、加密和压缩数据</li><li>会话层：对话控制（建立、管理和终止）和同步</li><li>传输层：一个报文从一个进程到另一个进程的传递<ul><li>端到端的可靠报文传递，以及差错控制</li><li>它负责<strong>服务点寻址、分段和组装、连接控制、流量控制、差错控制</strong></li></ul></li><li>网络层：将各个分组从源地址传送到目的地址<ul><li>IP协议是不可靠的传输协议</li><li>它负责<strong>逻辑寻址</strong>和<strong>路由选择</strong></li></ul></li><li>数据链路层：帧从一跳到下一跳（在节点间）的传递<ul><li>它有<strong>差错控制</strong>，<strong>流量控制</strong>和<strong>访问控制</strong>，也负责位流的<strong>成帧</strong>，同时也负责<strong>物理寻址</strong></li></ul></li><li>物理层：位从一个节点到另一个节点的传递</li></ul><blockquote><p>OSI中，只有<strong>数据链路层和传输层提供流量控制和差错控制</strong>。</p></blockquote><h3 id="TCP-x2F-IP协议族"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#TCP-x2F-IP%E5%8D%8F%E8%AE%AE%E6%97%8F" class="headerlink" title="TCP/IP协议族"></a>TCP/IP协议族</h3><p>分为5层，可以是看作简化了OSI的应用层的协议。</p><p><img src="https://xeonds.github.io/img/Pasted%20image%2020230609171458.png"/></p><p>结构和使用的协议如上图所示。</p><h4 id="网络层"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#%E7%BD%91%E7%BB%9C%E5%B1%82" class="headerlink" title="网络层"></a>网络层</h4><p>它使用网际协议<strong>Internet Protocol</strong>。而IP使用四个协议:</p><ul><li>ARP地址解析协议：将逻辑地址和物理地址关联起来</li><li>RARP：逆向ARP。用于从物理地址得到逻辑地址</li><li>ICMP：因特网控制报文协议，主机和网关使用的机制，用来向发送方通知数据报发生的问题</li><li>IGMP：因特网组报文协议，将一个报文同时发送给一组接收者</li></ul><h4 id="传输层"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#%E4%BC%A0%E8%BE%93%E5%B1%82" class="headerlink" title="传输层"></a>传输层</h4><p>主要有UDP、TCP和SCTP三个协议。其中UDP是无连接的不可靠协议，TCP是面向连接的可靠协议。SCTP则综合了前两者的优点，比较新。</p><h4 id="应用层"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#%E5%BA%94%E7%94%A8%E5%B1%82" class="headerlink" title="应用层"></a>应用层</h4><p>相当于OSI的<strong>会话层+表示层+应用层</strong>，定义了许多协议，比如<strong>SMTP，FTP，HTTP（S），DNS，SNMP，TELNET等</strong>。</p><h3 id="寻址"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#%E5%AF%BB%E5%9D%80" class="headerlink" title="寻址"></a>寻址</h3><p>TCP/IP采用四层地址：<strong>物理链路地址、逻辑地址IP、端口地址和专用地址</strong>。它们分别和物理层+数据链路层、网络层、传输层、应用层相关联。</p><h4 id="物理地址"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80" class="headerlink" title="物理地址"></a>物理地址</h4><p>也是链路地址，是网络中的节点地址，标识在网络接口卡（NIC）上。MAC地址一般使用48位（二进制数）地址表示</p><h4 id="逻辑地址"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#%E9%80%BB%E8%BE%91%E5%9C%B0%E5%9D%80" class="headerlink" title="逻辑地址"></a>逻辑地址</h4><p>目前在用IPv4。它唯一定义了连接在因特网上的一台主机。跳到跳传输时，物理地址会改变，但是逻辑地址保持不变。</p><h4 id="端口地址"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#%E7%AB%AF%E5%8F%A3%E5%9C%B0%E5%9D%80" class="headerlink" title="端口地址"></a>端口地址</h4><p>一般用来标识一个主机上的一个唯一的进程。端口号由IANA规定。</p><h4 id="专用地址"><a href="https://xeonds.github.io/2023/06/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E6%A6%82%E8%BF%B0/#%E4%B8%93%E7%94%A8%E5%9C%B0%E5%9D%80" class="headerlink" title="专用地址"></a>专用地址</h4><p>面向用户。比如URL就是专用地址，再比如电子邮件的地址也是专用地址。</p><p>上面就是概述部分的内容了。</p></body></html>