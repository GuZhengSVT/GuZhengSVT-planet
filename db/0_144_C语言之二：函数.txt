<html><head></head><body><p>函数是一组一起执行一个任务的语句。每个 C 程序都至少有一个函数，即主函数 <code>main()</code> ，所有简单的程序都可以定义其他额外的函数。</p><p>你可以把代码划分到不同的函数中。如何划分代码到不同的函数中是由你来决定的，但在逻辑上，划分通常是根据每个函数执行一个特定的任务来进行的。</p><p>函数声明告诉编译器函数的名称、返回类型和参数。函数定义提供了函数的实际主体。</p><p>C 标准库提供了大量的程序可以调用的内置函数。例如，函数 <code>strcat()</code>用来连接两个字符串，函数 <code>memcpy()</code> 用来复制内存到另一个位置。</p><p>函数还有很多叫法，比如方法、子例程或程序，等等。</p><p>定义函数<br/>C 语言中的函数定义的一般形式如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/></pre></td><td class="code"><pre><span class="line">return_type function_name( parameter list )</span><br/><span class="line">{</span><br/><span class="line">body of the function</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>在 C 语言中，函数由一个函数头和一个函数主体组成。下面列出一个函数的所有组成部分：</p><ul><li><p>返回类型（return_type）：一个函数可以返回一个值。return_type是函数返回的值的数据类型。有些函数执行所需的操作而不返回值，在这种情况下，return_type 是关键字 void。</p></li><li><p>函数名称（function_name）：这是函数的实际名称。函数名和参数列表一起构成了函数签名。</p></li><li><p>参数（parameter list）：参数就像是占位符。当函数被调用时，你向参数传递一个值，这个值被称为实际参数。参数列表包括函数参数的类型、顺序、数量。参数是可选的，也就是说，函数可能不包含参数。</p></li><li><p>函数主体（body of the function）：函数主体包含一组定义函数执行任务的语句。</p></li></ul><h5 id="实例"><a href="https://xeonds.github.io/2020/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E4%B9%8B%E4%BA%8C%EF%BC%9A%E5%87%BD%E6%95%B0/#%E5%AE%9E%E4%BE%8B" class="headerlink" title="实例"></a>实例</h5><p>以下是 max() 函数的源代码。该函数有两个参数 num1 和 num2，会返回这两个数中较大的那个数：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/></pre></td><td class="code"><pre><span class="line">/* 函数返回两个数中较大的那个数 */ </span><br/><span class="line">int max(int num1, int num2) </span><br/><span class="line">{ </span><br/><span class="line">    /* 局部变量声明 */ </span><br/><span class="line">    int result; </span><br/><span class="line"></span><br/><span class="line">    if (num1 &gt; num2) </span><br/><span class="line">        result = num1; </span><br/><span class="line">    else </span><br/><span class="line">        result = num2; </span><br/><span class="line">        </span><br/><span class="line">    return result; </span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h5 id="函数声明"><a href="https://xeonds.github.io/2020/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E4%B9%8B%E4%BA%8C%EF%BC%9A%E5%87%BD%E6%95%B0/#%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E" class="headerlink" title="函数声明"></a>函数声明</h5><p>函数声明会告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p><p>函数声明包括以下几个部分：</p><p><code>return_type function_name( parameter list );</code></p><p>针对上面定义的函数 max()，以下是函数声明：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">int max(int num1, int num2);</span><br/></pre></td></tr></tbody></table></figure><p>在函数声明中，参数的名称并不重要，只有参数的类型是必需的，因此下面也是有效的声明：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">int max(int, int);</span><br/></pre></td></tr></tbody></table></figure><p>当你在一个源文件中定义函数且在另一个文件中调用函数时，函数声明是必需的。在这种情况下，你应该在调用函数的文件顶部声明函数。</p><h5 id="调用函数"><a href="https://xeonds.github.io/2020/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E4%B9%8B%E4%BA%8C%EF%BC%9A%E5%87%BD%E6%95%B0/#%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0" class="headerlink" title="调用函数"></a>调用函数</h5><p>创建 C 函数时，会定义函数做什么，然后通过调用函数来完成已定义的任务。</p><p>当程序调用函数时，程序控制权会转移给被调用的函数。被调用的函数执行已定义的任务，当函数的返回语句被执行时，或到达函数的结束括号时，会把程序控制权交还给主程序。</p><p>调用函数时，传递所需参数，如果函数返回一个值，则可以存储返回值。例如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/></pre></td><td class="code"><pre><span class="line">//Example-2-1-返回最大值</span><br/><span class="line"></span><br/><span class="line">#include &lt;stdio.h&gt;</span><br/><span class="line">/* 函数声明 */</span><br/><span class="line">int max(int num1, int num2);</span><br/><span class="line"></span><br/><span class="line">int main (void)</span><br/><span class="line">{</span><br/><span class="line">int a = 100,b = 200,ret; //局部变量定义</span><br/><span class="line"></span><br/><span class="line">/* 调用函数来获取最大值 */</span><br/><span class="line">ret = max(a, b);</span><br/><span class="line">printf( &#34;Max value is : %d\n&#34;, ret );</span><br/><span class="line"></span><br/><span class="line">return 0;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line">/* 函数返回两个数中较大的那个数 */</span><br/><span class="line">int max(int num1, int num2)</span><br/><span class="line">{</span><br/><span class="line">/* 局部变量声明 */</span><br/><span class="line">int result;</span><br/><span class="line"></span><br/><span class="line">if (num1 &gt; num2)</span><br/><span class="line">result = num1;</span><br/><span class="line">else</span><br/><span class="line">result = num2;</span><br/><span class="line"></span><br/><span class="line">return result;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>把 max() 函数和 main() 函数放一块，编译源代码。当运行最后的可执行文件时，会产生下列结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">Max value is : 200</span><br/></pre></td></tr></tbody></table></figure><h5 id="函数参数"><a href="https://xeonds.github.io/2020/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E4%B9%8B%E4%BA%8C%EF%BC%9A%E5%87%BD%E6%95%B0/#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0" class="headerlink" title="函数参数"></a>函数参数</h5><p>如果函数要使用参数，则必须声明接受参数值的变量。这些变量称为函数的形式参数。</p><p>形式参数就像函数内的其他局部变量，在进入函数时被创建，退出函数时被销毁。</p><p>当调用函数时，有两种向函数传递参数的方式：</p><ul><li><p>调用类型描述传值。调用该方法把参数的实际值复制给函数的形式参数（形式参数可以理解为占位符，就是表示这里有这么一个类型的参数）。在这种情况下，修改函数内的形式参数不会影响实际参数。也就是说，刚才的max(a,b)是通过将a和b的值分别复制到了max()函数的num1和num2两个变量中完成了将数值传递到max()中的任务。</p></li><li><p>引用调用。通过指针传递方式，形参为指向实参地址的指针，当对形参的指向操作时，就相当于对实参本身进行的操作。默认情况下，C 使用传值调用来传递参数。一般来说，这意味着函数内的代码不能改变用于调用函数的实际参数。（这个地方看不懂也无所谓，后面会明朗的。总之只要记住第一种方式就好）</p></li></ul></body></html>