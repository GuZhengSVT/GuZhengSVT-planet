<html><head></head><body><p>进制，也就是满X进一。其本质上是对于计数的简写。比如原来要表示一个数，只能用若干个小棒来表示。进制的出现，就相当于出现了代表一定数值的小棒的出现。这也就是<code>位权</code>：满X进一中的X。</p><blockquote><p>（摘自百度百科）进制转换是人们利用符号来计数的方法。进制转换由一组数码符号和两个基本因素“基数”与“位权”构成。基数是指，进位计数制中所采用的数码（数制中用来表示“量”的符号）的个数。位权是指，进位制中每一固定位置对应的单位值。</p></blockquote><p>理解了进制的本质后，我们就可以着手用数学工具去实现进制转换了。</p><h2 id="短除法"><a href="https://mxts.jiujiuer.xyz/2021/09/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/#%E7%9F%AD%E9%99%A4%E6%B3%95" class="headerlink" title="短除法"></a>短除法</h2><p>首先以十进制为例。规定//为带余数除法，我们规定一个正整数123，那么：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/></pre></td><td class="code"><pre><span class="line">123 // 10 = 12......3</span><br/><span class="line">12  // 10 = 1 ......2</span><br/><span class="line">1   // 10 = 0 ......1</span><br/></pre></td></tr></tbody></table></figure><p>观察。可以得到，三次除法的余数分别是3，2，1.对应个位，十位，百位。为什么呢？因为</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">123（10）=1*10^2+2*10^1+3*10^0</span><br/></pre></td></tr></tbody></table></figure><p>所以，每次得到的余数，就是对应位的数。显然，此结论对于N进制都成立。</p><p>下面，我们用编程实现这个算法。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Dec2Bin - by xeonds */</span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">base_dec_2_bin_convert</span><span class="params">(<span class="type">int</span> num)</span>;</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> i;</span><br/><span class="line"></span><br/><span class="line">    <span class="built_in">scanf</span>(<span class="string">&#34;%d&#34;</span>, &amp;i);</span><br/><span class="line">    <span class="keyword">if</span> (i &lt;= <span class="number">512</span> &amp;&amp; i &gt;= <span class="number">-512</span>)</span><br/><span class="line">        <span class="built_in">printf</span>(<span class="string">&#34;dec:%d  bin:%d\n&#34;</span>, i, base_dec_2_bin_convert(i));</span><br/><span class="line">    <span class="keyword">else</span></span><br/><span class="line">        <span class="built_in">puts</span>(<span class="string">&#34;Out of range.&#34;</span>);</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">base_dec_2_bin_convert</span><span class="params">(<span class="type">int</span> num)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> result = <span class="number">0</span>, i = <span class="number">1</span>;</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">while</span> (num &gt; <span class="number">0</span>)</span><br/><span class="line">    {</span><br/><span class="line">        result += num % <span class="number">2</span> * i;</span><br/><span class="line">        num = (num - num % <span class="number">2</span>) / <span class="number">2</span>;</span><br/><span class="line">        i *= <span class="number">10</span>;</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> result;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>算法核心部分是最后几行。<code>num % 2 * i</code>是计算最后一位并乘10，便于用int表示。<code>num = (num - num % 2) / 2</code>是将num减去余数并除以位权。</p><p>用[[Python|Python]]的话还可以写得更短些：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br/><span class="line"></span><br/><span class="line"><span class="keyword">def</span> <span class="title function_">base_10_to_2</span>(<span class="params">number</span>):</span><br/><span class="line">    result = <span class="string">&#39;&#39;</span></span><br/><span class="line">    <span class="keyword">while</span> number:</span><br/><span class="line">        number, rest = <span class="built_in">divmod</span>(number, <span class="number">2</span>)</span><br/><span class="line">        result = <span class="built_in">str</span>(rest) + result</span><br/><span class="line">    <span class="keyword">return</span> result</span><br/></pre></td></tr></tbody></table></figure><p>更进一步，我们可以实现任意进制转换：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">base_n_convert</span>(<span class="params">number, letters</span>):</span><br/><span class="line">    length = <span class="built_in">len</span>(letters)</span><br/><span class="line">    result = <span class="string">&#39;&#39;</span></span><br/><span class="line">    <span class="keyword">while</span> number:</span><br/><span class="line">        number, rest = <span class="built_in">divmod</span>(number-<span class="number">1</span>, length)</span><br/><span class="line">        result = letters[rest] + result</span><br/><span class="line">    <span class="keyword">return</span> result</span><br/></pre></td></tr></tbody></table></figure><p>其实这是我写的一个密码字典生成器。效率暂且不论，其原理也是进制转换。这里的<code>number</code>是待转换的十进制数，<code>letters</code>是待转换的N进制数的所有字符，比如十进制是0<del>9，十六进制是0</del>F。</p><p>上面实现的，都是10进制转其他进制。其他进制转十进制很简单，只需要将各个位乘以其位权，求和即可得到其十进制表示。其原因很简单，我们的数学体系是建立在十进制的，所以对于十进制环境下的各种运算都很熟悉。这个方法对于任意进制转p进制其实都适用，不过这需要编写相应进制的四则运算算法，相对麻烦一些。</p><p>任意进制和任意进制的互转，可直接也可间接。间接，即将p进制数先转换为10进制等中间进制，再将其转换为q进制。直接，即利用对应规则进行转换。如二进制和十六进制互转，便可利用有限个对应规则实现快速互转。</p><h2 id="小结"><a href="https://mxts.jiujiuer.xyz/2021/09/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/#%E5%B0%8F%E7%BB%93" class="headerlink" title="小结"></a>小结</h2><p>和栈机制一样，进制转换是很多技术的基础。某些时候利用它，或许会获得意想不到的奇效。</p><p>同时，作为算法的源泉，<strong>数学真的很重要</strong>。</p></body></html>