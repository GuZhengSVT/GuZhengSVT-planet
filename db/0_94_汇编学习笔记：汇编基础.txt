<html><head></head><body><blockquote><p>[[Assembly|汇编笔记系列]]</p></blockquote><p>先放一段源代码。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br/><span class="line">code segment</span><br/><span class="line"></span><br/><span class="line">    mov ax, 0ffffh</span><br/><span class="line">    mov ds, ax</span><br/><span class="line">    mov bx, 0</span><br/><span class="line"> </span><br/><span class="line">    mov dx, 0</span><br/><span class="line"> </span><br/><span class="line">    mov cx, 12</span><br/><span class="line"> </span><br/><span class="line">s:  mov al, [bx]</span><br/><span class="line">    mov ah, 0</span><br/><span class="line">    add dx, ax</span><br/><span class="line">    inc bx</span><br/><span class="line">    loop s</span><br/><span class="line"> </span><br/><span class="line">    mov ax, 4c00h</span><br/><span class="line">    int 21h</span><br/><span class="line"></span><br/><span class="line">code ends</span><br/><span class="line">end</span><br/><span class="line"></span><br/></pre></td></tr></tbody></table></figure><p>上面的程序计算<code>ffff:0-ffff:b</code>单元中数据的和，结果存储在<code>dx</code>中。</p><p>下面先说些东西再看这个程序。</p><h2 id="存储单元"><a href="https://mxts.jiujiuer.xyz/2021/09/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Assembly/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/#%E5%AD%98%E5%82%A8%E5%8D%95%E5%85%83" class="headerlink" title="存储单元"></a>存储单元</h2><p>存储器被划分为多个存储单元，编号从0开始。一个存储单元可存储一个<code>Byte</code>（B），即<code>8bit</code>（1bit（b）是一个二进制位）或者称作一字节。两个字节合成一个字，也就是字面意思上的字。</p><h2 id="寄存器"><a href="https://mxts.jiujiuer.xyz/2021/09/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Assembly/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/#%E5%AF%84%E5%AD%98%E5%99%A8" class="headerlink" title="寄存器"></a>寄存器</h2><p>这里**只讨论<code>8086CPU</code>**。CPU主要部件是寄存器。我们通过改写寄存器中的内容来控制CPU，从而完成各种程序。<br/>8086CPU的寄存器有：<code>AX</code>、<code>BX</code>、<code>CX</code>、<code>DX</code>、<code>SI</code>、<code>DI</code>、<code>SP</code>、<code>BP</code>、<code>IP</code>、<code>CS</code>、<code>SS</code>、<code>DS</code>、<code>ES</code>、<code>PSW</code>。后面单独介绍这些寄存器。</p><h3 id="通用寄存器"><a href="https://mxts.jiujiuer.xyz/2021/09/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Assembly/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/#%E9%80%9A%E7%94%A8%E5%AF%84%E5%AD%98%E5%99%A8" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><p>8086所有寄存器都是16位的，可存放两个字节（或称为一个字）。<code>AX</code>、<code>BX</code>、<code>CX</code>、<code>DX</code>这四个寄存器通常用来存放一般性的数据，所以它们又被称作通用寄存器。它由16个二进制位构成，最右边是最低位，最左边是最高位，编号从零开始，从右往左依次升高，这和数字各位的读写顺序一样。</p><p>不仅如此，这四个寄存器每个都能分成2个独立的8位寄存器来使用。<code>AX</code>对应<code>AH</code>和<code>AL</code>，H是high，即高八位；L是low，即低八位。另外3个寄存器同理。</p><p>字和字节在其中的存储，都是从右至左，从低八位最右侧到高八位最左侧。</p><h2 id="内存的读写"><a href="https://mxts.jiujiuer.xyz/2021/09/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Assembly/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/#%E5%86%85%E5%AD%98%E7%9A%84%E8%AF%BB%E5%86%99" class="headerlink" title="内存的读写"></a>内存的读写</h2><p>首先做一个简单的算数。8位对应256种状态，同时也对应2个16进制数。而8086的物理地址长度是20位，也就对应5位十六进制数。那么，地址应该如何存储呢？用两个寄存器。一个存放16位，另一个存放4位。前者存放的，被称为偏移地址（offset），后者存放的，被称为段地址。</p><p>当获得段地址和偏移地址后，CPU中的地址加法器会利用如下公式进行转换：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">物理地址=段地址*16+偏移地址</span><br/></pre></td></tr></tbody></table></figure><h2 id="段寄存器"><a href="https://mxts.jiujiuer.xyz/2021/09/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Assembly/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/#%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8" class="headerlink" title="段寄存器"></a>段寄存器</h2><p>8086中，段地址在段寄存器种存储。它有四个段寄存器：<code>CS</code>,<code>DS</code>,<code>SS</code>,<code>ES</code>。8086要访问内存时由这四个段寄存器提供内存单元的段地址。</p><p>[CS:IP]</p><p>[jmp]</p><h2 id="Debug简介"><a href="https://mxts.jiujiuer.xyz/2021/09/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Assembly/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/#Debug%E7%AE%80%E4%BB%8B" class="headerlink" title="Debug简介"></a>Debug简介</h2><h2 id="DS和-address"><a href="https://mxts.jiujiuer.xyz/2021/09/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Assembly/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/#DS%E5%92%8C-address" class="headerlink" title="DS和[address]"></a>DS和[address]</h2><h2 id="mov-add-sub指令"><a href="https://mxts.jiujiuer.xyz/2021/09/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Assembly/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/#mov-add-sub%E6%8C%87%E4%BB%A4" class="headerlink" title="mov, add, sub指令"></a>mov, add, sub指令</h2><h2 id="CPU的栈机制"><a href="https://mxts.jiujiuer.xyz/2021/09/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Assembly/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/#CPU%E7%9A%84%E6%A0%88%E6%9C%BA%E5%88%B6" class="headerlink" title="CPU的栈机制"></a>CPU的栈机制</h2><p>[push,pop]</p><h2 id="bx-loop"><a href="https://mxts.jiujiuer.xyz/2021/09/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Assembly/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/#bx-loop" class="headerlink" title="[bx], loop"></a>[bx], loop</h2><h2 id="段前缀"><a href="https://mxts.jiujiuer.xyz/2021/09/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Assembly/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/#%E6%AE%B5%E5%89%8D%E7%BC%80" class="headerlink" title="段前缀"></a>段前缀</h2></body></html>