<html><head></head><body><h2 id="简介"><a href="https://mxts.jiujiuer.xyz/2023/04/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80MPI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E7%AE%80%E4%BB%8B" class="headerlink" title="简介"></a>简介</h2><blockquote><p>内容由New Bing自动生成，注意甄别</p></blockquote><p>MPI是一种用于并行计算的消息传递接口，它可以让多个进程在不同的机器（节点）上协同工作，通过发送和接收数据来完成复杂的计算任务。</p><p>简单地说，这是一个位高性能并行计算提供的一个<strong>基础通信规范</strong>。依靠它，可以编写出在多个核心/CPU集群上并行运行的程序。</p><p>要使用C语言MPI，您需要安装一个MPI软件，如MPICH，OpenMPI或MVAPICH，并使用mpicc或mpic++命令来编译您的C程序。</p><p>您还需要使用一些MPI的API函数来初始化和结束MPI环境，获取进程数和进程编号（称为“rank”），以及进行数据交换。</p><p>数据交换的主要方式有两种：发送（send）和接收（recv）。发送可以分为阻塞（blocking）和非阻塞（non-blocking）两种，阻塞发送会等待数据被接收方确认，而非阻塞发送会继续执行后续的代码，但需要使用等待（wait）函数来同步数据的状态。</p><p>依靠MPI构建的数据计算程序有多种架构，MIMD和SIMD都是它支持的架构。不过一般使用后一种，也就是单程序多数据流。</p><p>对于这种架构，又有两种不同的设计模式：主从结构，以及对等结构。它们适用于大多数情况。</p><h2 id="实例"><a href="https://mxts.jiujiuer.xyz/2023/04/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80MPI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E5%AE%9E%E4%BE%8B" class="headerlink" title="实例"></a>实例</h2><p>下面是一个简单的C语言MPI程序的示例，它可以计算圆周率的近似值：</p><blockquote><p>作者：<a href="mailto:xiongw21@mails.tsinghua.edu.cn">xiongw21@mails.tsinghua.edu.cn</a></p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&#34;mpi.h&#34;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"><span class="type">double</span> <span class="title function_">f</span><span class="params">(<span class="type">double</span>)</span>;</span><br/><span class="line"><span class="type">double</span> <span class="title function_">f</span><span class="params">(<span class="type">double</span> x)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="keyword">return</span> (<span class="number">4.0</span>/(<span class="number">1.0</span>+x*x));</span><br/><span class="line">}</span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> myid, numprocs;</span><br/><span class="line">    <span class="type">int</span> n, i;</span><br/><span class="line">    <span class="type">double</span> mypi, pi;</span><br/><span class="line">    <span class="type">double</span> h, sum, x;</span><br/><span class="line">    MPI_Init(&amp;argc,&amp;argv);</span><br/><span class="line">    MPI_Comm_size(MPI_COMM_WORLD,&amp;numprocs);</span><br/><span class="line">    MPI_Comm_rank(MPI_COMM_WORLD,&amp;myid);</span><br/><span class="line">    <span class="built_in">printf</span>(<span class="string">&#34;Process %d of %d.\n&#34;</span>, myid, numprocs);</span><br/><span class="line">    n = <span class="number">100</span>;</span><br/><span class="line">    h = <span class="number">1.0</span> / (<span class="type">double</span>) n;</span><br/><span class="line">    sum = <span class="number">0.0</span>;</span><br/><span class="line">    <span class="keyword">for</span> (i = myid + <span class="number">1</span>; i &lt;= n; i += numprocs)</span><br/><span class="line">    {</span><br/><span class="line">        x = h * ((<span class="type">double</span>)i - <span class="number">0.5</span>);</span><br/><span class="line">        sum +=f(x);</span><br/><span class="line">    }</span><br/><span class="line">    mypi = h * sum;</span><br/><span class="line">    MPI_Reduce(&amp;mypi, &amp;pi, <span class="number">1</span>, MPI_DOUBLE, MPI_SUM, <span class="number">0</span>, MPI_COMM_WORLD);</span><br/><span class="line">    <span class="keyword">if</span> (myid == <span class="number">0</span>)</span><br/><span class="line">    {</span><br/><span class="line">        <span class="built_in">printf</span>(<span class="string">&#34;The result is %.10f.\n&#34;</span>,pi);</span><br/><span class="line">    }    </span><br/><span class="line">    MPI_Finalize();</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure></body></html>