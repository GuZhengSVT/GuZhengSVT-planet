<html><head></head><body><blockquote><p><a href="https://github.com/google/mediapipe">Mediapipe</a>作为一个可以跨平台的流视频处理库，也兼容了安卓的使用(毕竟亲爹是Google)。<br/>为了在安卓里使用Mediapipe需要使用bazel将mediapipe的编译为aar，来使用。</p></blockquote><h2 id="环境要求"><a href="https://xiue233.github.io/2022/10/01/compile_mediapipe/#%E7%8E%AF%E5%A2%83%E8%A6%81%E6%B1%82" class="headerlink" title="环境要求"></a><strong>环境要求</strong></h2><ol><li><strong>Linux系统</strong>(部分配置需要sh完成，为了便利，不推荐使用windows编译)</li><li><strong>bazel编译器</strong>(用于编译)</li><li><strong>adb</strong>(需不需要无所谓，是便于之后bazel打包apk后，直接install)</li><li><strong>OpenCV</strong></li><li><strong>JDK</strong></li><li><strong>python</strong></li></ol><h2 id="配置环境"><a href="https://xiue233.github.io/2022/10/01/compile_mediapipe/#%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83" class="headerlink" title="配置环境"></a><strong>配置环境</strong></h2><h3 id="1-配置依赖环境"><a href="https://xiue233.github.io/2022/10/01/compile_mediapipe/#1-%E9%85%8D%E7%BD%AE%E4%BE%9D%E8%B5%96%E7%8E%AF%E5%A2%83" class="headerlink" title="(1)配置依赖环境"></a>(1)配置依赖环境</h3><p>配置依赖环境</p><pre><code class="shell">sudo apt-get update &amp;&amp; sudo apt-get install -y build-essential git python zip adb openjdk-8-jdk</code></pre><blockquote><p>注意:指定python可能报错，可以自行更改为python3</p></blockquote><p>安装JDK(方便之后编译java文件):</p><pre><code class="shell">sudo apt install openjdk-11-jdk</code></pre><p>安装C++编译器:</p><pre><code class="shell">sudo apt install g++ unzip zip</code></pre><p>安装adb:</p><pre><code class="shell">sudo apt-get install android-tools-adb</code></pre><p>安装OpenCV:</p><pre><code class="shell">sudo apt-get install libopencv-core-dev libopencv-highgui-dev \libopencv-calib3d-dev libopencv-features2d-dev \libopencv-imgproc-dev libopencv-video-dev</code></pre><h3 id="2-安装Bazel"><a href="https://xiue233.github.io/2022/10/01/compile_mediapipe/#2-%E5%AE%89%E8%A3%85Bazel" class="headerlink" title="(2)安装Bazel"></a>(2)安装Bazel</h3><blockquote><p><a href="https://github.com/bazelbuild/bazel">Bazel</a>是一款强大的编译工具。</p></blockquote><p>对于Bazel的安装一般有两种方法：<br/><strong>注意:建议下载版本为5.2.0的bazel，在mediapipe的build里指定required version为5.2.0了。</strong></p><ol><li>使用curl下载安装脚本文件</li></ol><pre><code class="shell">curl -sLO --retry 5 --retry-max-time 10 \https://storage.googleapis.com/bazel/5.2.0/release/bazel-5.2.0-installer-linux-x86_64.sh &amp;&amp; \sudo mkdir -p /usr/local/bazel/5.2.0 &amp;&amp; \chmod 755 bazel-5.2.0-installer-linux-x86_64.sh &amp;&amp; \sudo ./bazel-5.2.0-installer-linux-x86_64.sh --prefix=/usr/local/bazel/5.2.0 &amp;&amp; \source /usr/local/bazel/5.2.0/lib/bazel/bin/bazel-complete.bash/usr/local/bazel/5.2.0/lib/bazel/bin/bazel version &amp;&amp; \alias bazel=&#39;/usr/local/bazel/5.2.0/lib/bazel/bin/bazel&#39;</code></pre><ol start="2"><li>直接下载安装脚本文件并执行</li></ol><p>(1)下载<a href="https://github.com/bazelbuild/bazel/releases/download/5.2.0/bazel-5.2.0-installer-linux-x86_64.sh">bazel-5.2.0-installer-linux-x86_64.sh</a><br/>(2)设置sh权限</p><pre><code class="shell">sudo chmod +x bazel-5.2.0-installer-linux-x86_64.sh</code></pre><p>(3)执行sh文件</p><pre><code class="shell">./bazel-version-installer-linux-x86_64.sh --user</code></pre><p>注意: <strong>不建议使用sudo执行，否则会安装到/root/bin下，影响之后的运行</strong></p><ol start="3"><li><strong>apt命令下载</strong></li></ol><pre><code class="shell">sudo apt install apt-transport-https curl gnupgcurl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor &gt;bazel-archive-keyring.gpgsudo mv bazel-archive-keyring.gpg /usr/share/keyringsecho &#34;deb [arch=amd64 signed-by=/usr/share/keyrings/bazel-archive-keyring.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8&#34; | sudo tee /etc/apt/sources.list.d/bazel.listsudo apt update &amp;&amp; sudo apt install bazelsudo apt update &amp;&amp; sudo apt full-upgradesudo apt install bazel-5.2.0</code></pre><h2 id="编译前准备"><a href="https://xiue233.github.io/2022/10/01/compile_mediapipe/#%E7%BC%96%E8%AF%91%E5%89%8D%E5%87%86%E5%A4%87" class="headerlink" title="编译前准备"></a><strong>编译前准备</strong></h2><p>(1)配置bazel到PATH环境变量</p><pre><code class="shell">export PATH=&#34;$PATH:bazel的安装路径/bin&#34;</code></pre><p>(2)克隆mediapipe源码并进入该目录</p><pre><code class="shell">git clone https://github.com/google/mediapipe.gitcd mediapipe</code></pre><p>(3)测试编译环境</p><pre><code class="shell">export GLOG_logtostderr=1bazel run --define MEDIAPIPE_DISABLE_GPU=1 \mediapipe/examples/desktop/hello_world:hello_world</code></pre><p>注意: <strong>编译时间可能稍长</strong></p><p>如果配置成功，则会有类似如下的打印:</p><pre><code class="shell">I20200707 09:21:50.275205 16138 hello_world.cc:56] Hello World!I20200707 09:21:50.276554 16138 hello_world.cc:56] Hello World!I20200707 09:21:50.276665 16138 hello_world.cc:56] Hello World!I20200707 09:21:50.276768 16138 hello_world.cc:56] Hello World!I20200707 09:21:50.276887 16138 hello_world.cc:56] Hello World!I20200707 09:21:50.277523 16138 hello_world.cc:56] Hello World!I20200707 09:21:50.278563 16138 hello_world.cc:56] Hello World!I20200707 09:21:50.279263 16138 hello_world.cc:56] Hello World!I20200707 09:21:50.279850 16138 hello_world.cc:56] Hello World!I20200707 09:21:50.280354 16138 hello_world.cc:56] Hello World!</code></pre><p>(4)下载安卓编译所需的SDK和NDK</p><pre><code class="shell">chmod +x ./setup_android_sdk_and_ndk.shbash ./setup_android_sdk_and_ndk.sh ~/Android/Sdk ~/Android/Ndk r18b</code></pre><p><strong>建议使用r18b减少其他意外出现</strong></p><p>建议顺便设置下环境变量:</p><pre><code class="shell">export ANDROID_HOME=&#34;~/Android/Sdk&#34;export ANDROID_NDK_HOME=&#34;~/Android/Ndk/android-ndk-r21b&#34;</code></pre><h2 id="编译所需aar包-测试hand-tracking"><a href="https://xiue233.github.io/2022/10/01/compile_mediapipe/#%E7%BC%96%E8%AF%91%E6%89%80%E9%9C%80aar%E5%8C%85-%E6%B5%8B%E8%AF%95hand-tracking" class="headerlink" title="编译所需aar包(测试hand_tracking)"></a>编译所需aar包(测试hand_tracking)</h2><p>(1)配置bazel build文件</p><pre><code class="shell">cd mediapipe/examples/android/src/java/com/google/mediapipe/apps/mkdir buid_aar &amp;&amp; cd buid_aarvim BUILD</code></pre><blockquote><p>编译文件BUILD中内容如下，name是生成后aar的名字，calculators为使用的模型和计算单元，其他的模型和支持计算单元可以查看 mediapipe/graphs/目录下的内容，在这个目录都是Mediapipe支持的模型。其中目录 hand_tracking就是使用到的模型，支持的计算单元需要查看该目录下的BUILD文件中的 cc_library，这里我们是要部署到Android端的，所以选择Mobile的计算单元。本教程我们使用mobile_calculators，这个只检测一个手的关键点，如何想要检查多个收修改成这个计算单元multi_hand_mobile_calculators。</p></blockquote><p>之后输入:</p><pre><code class="build">load(&#34;//mediapipe/java/com/google/mediapipe:mediapipe_aar.bzl&#34;, &#34;mediapipe_aar&#34;)mediapipe_aar(    name = &#34;mediapipe_hand_tracking&#34;,    calculators = [&#34;//mediapipe/graphs/hand_tracking:mobile_calculators&#34;],)</code></pre><p>(2)开始编译aar</p><pre><code class="shell">chmod -R 755 mediapipe/bazel build -c opt --fat_apk_cpu=arm64-v8a,armeabi-v7a \//mediapipe/examples/android/src/java/com/google/mediapipe/apps/buid_aar:mediapipe_hand_trackingbazel build -c opt mediapipe/graphs/hand_tracking:hand_tracking_mobile_gpu_binary_graph</code></pre><p>在漫长的等待后，就找到文件 bazel-bin/mediapipe/examples/android/src/java/com/google/mediapipe/apps/buid_aar/mediapipe_hand_tracking.aar。</p></body></html>