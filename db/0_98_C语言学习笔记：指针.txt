<html><head></head><body><p>  对于初学者而言，这是一个很麻烦的东西；对于大佬而言，这是无所不能的屠龙宝刀。作为C语言中最重要的概念之一，掌握它，是通往C语言高阶应用的一条必经之路。  </p><h2 id="简介"><a href="https://mxts.jiujiuer.xyz/2021/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%8C%87%E9%92%88/#%E7%AE%80%E4%BB%8B" class="headerlink" title="简介"></a>简介</h2><p>指针（pointer）是一个用来存储内存地址的变量/数据对象。缩句：<strong>指针是变量。</strong>即指针具备变量的通性。指针还有两个地址运算符：<em>（解引用运算符）和&amp;（引用运算符）。</em>pointer给出指针pointer指向地址的值，&amp;argument给出变量argument所在的地址。  </p><p>指针可以这样赋值：<code>ptr = &amp;var;</code>即把var的地址赋给ptr。此时，ptr指向var。地址只能被存储在指针类型的变量中。</p><p>观察下面的程序：  </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/></pre></td><td class="code"><pre><span class="line">ptr = &amp;var_a;</span><br/><span class="line">result = *ptr;</span><br/><span class="line">```  </span><br/><span class="line">  </span><br/><span class="line">这两句等价于`result = var_a;`。既然等价，为啥不直接用后者？因为同样是赋值，前者使用指针，从而可用来函数间通信时直接修改原数据而无需返回值再赋值。  </span><br/><span class="line">  </span><br/><span class="line">这里注意，不要解引用未初始化的指针。像这样：  </span><br/><span class="line">  </span><br/></pre></td></tr></tbody></table></figure><p>int * pt;<br/>*pt = 5;</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/></pre></td><td class="code"><pre><span class="line">  </span><br/><span class="line">这样做的后果可能什么事都没有，也可能擦写数据或代码，甚至是程序崩溃。因为`pt`没有被地址初始化，所以它指向的是未知地址，而对未知地址赋值的后果是未知的。</span><br/><span class="line"></span><br/><span class="line">## 声明指针</span><br/><span class="line">  </span><br/><span class="line">语法：`[数据类型] * [变量1], * [变量2], ... , * [变量n];`</span><br/><span class="line">  </span><br/><span class="line">不能像其他变量一样`pointer [变量名];`是因为指针声明时必须知道指针指向变量的类型和大小。  </span><br/><span class="line">  </span><br/><span class="line">指针的转换说明是%p。转换说明就是`printf(&#34;%p&#34;,ptr1);`这样被使用的表示特定类型数据的占位符。</span><br/><span class="line"></span><br/><span class="line">const关键字可以被用来声明指针。它和普通指针唯一区别是：前者不能被用来更改其指向地址的值。</span><br/><span class="line"></span><br/><span class="line">## 指针与数组</span><br/><span class="line"></span><br/><span class="line">数组名是数组首元素的地址，即：`arr = &amp;arr[0];`。先说一元数组：使用指针也可以遍历数组元素。对于上面提到的`arr`，就可以用`arr+=1;`的方式访问后面的元素。也就是说，这里的+1实际上是增加一个（相应数据类型的）存储单元。同时，指针可以用来分配数组空间：看下面这个例子。</span><br/><span class="line"></span><br/><span class="line">```c</span><br/><span class="line">#include &lt;stdio.h&gt;</span><br/><span class="line">#include &lt;stdlib.h&gt;</span><br/><span class="line"></span><br/><span class="line">int main(void)</span><br/><span class="line">{</span><br/><span class="line">    int *a;</span><br/><span class="line"></span><br/><span class="line">    a=(int*)malloc(sizeof(int)*2);</span><br/><span class="line">    scanf(&#34;%d %d&#34;,&amp;a[1],&amp;a[2]);</span><br/><span class="line"></span><br/><span class="line">    return 0;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>请问这个例子合法吗？合法。因为数组名对应的值就是数组首元素的<strong>地址</strong>。这里a中存储的就是第一个数的地址，所以其用法和数组的用法是一致的。</p><h2 id="指针的指针"><a href="https://mxts.jiujiuer.xyz/2021/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%8C%87%E9%92%88/#%E6%8C%87%E9%92%88%E7%9A%84%E6%8C%87%E9%92%88" class="headerlink" title="指针的指针"></a>指针的指针</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">12</span>;</span><br/><span class="line"><span class="type">int</span> *b=&amp;a;</span><br/><span class="line"><span class="type">int</span> **c=&amp;b;</span><br/></pre></td></tr></tbody></table></figure><p>那么这里的<code>c</code>是什么？</p><p><strong>指向指针的指针</strong>。</p><p>其中，<code>*c</code>表示<code>c</code>所指向的位置，也就是<code>b</code>。也就是说，<code>**c==*b,*b==a;</code>。</p><h2 id="指针表达式"><a href="https://mxts.jiujiuer.xyz/2021/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%8C%87%E9%92%88/#%E6%8C%87%E9%92%88%E8%A1%A8%E8%BE%BE%E5%BC%8F" class="headerlink" title="指针表达式"></a>指针表达式</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ch=<span class="string">&#39;a&#39;</span>;</span><br/><span class="line"><span class="type">char</span> *cp = &amp;ch;</span><br/></pre></td></tr></tbody></table></figure><p>现在，我们有了两个变量。接下来，我们会以它为基础，讨论一些指针表达式。</p><p>先来个简单的：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">ch</span><br/></pre></td></tr></tbody></table></figure><p>它可以当右值使用，此时表示<code>ch</code>中的值。<strong>但是当它作为左值使用时，它表示的是<code>ch</code>的地址</strong>。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">&amp;ch</span><br/></pre></td></tr></tbody></table></figure><p>它表示<code>ch</code>的地址，这个值和<code>cp</code>的值一样。它可以作为右值使用，但不能作为左值。因为它是一个数值，并没有指明一个计算机的内存地址。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">cp</span><br/></pre></td></tr></tbody></table></figure><p>它的右值就是<code>cp</code>的值，左值就是<code>cp</code>所处的内存位置。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">&amp;cp</span><br/></pre></td></tr></tbody></table></figure><p>和第二个一样，可以作为右值，而不能作为左值。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">*cp</span><br/></pre></td></tr></tbody></table></figure><p>作为右值时指<code>ch</code>处存储的值，作为左值时表示<code>ch</code>的内存位置。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">*cp+<span class="number">1</span></span><br/></pre></td></tr></tbody></table></figure><p>等价于<code>(*cp)+1</code>。即把<code>cp</code>的值再加一。既然是值，那么就只能作为右值使用。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">*(cp+<span class="number">1</span>)</span><br/></pre></td></tr></tbody></table></figure><p>作为右值时，表示在<code>cp+[一个该存储单元长度]</code>处存储的值；作为左值使用时，表示<code>cp</code>的下一个存储单元的地址。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">++cp</span><br/></pre></td></tr></tbody></table></figure><p>表示<code>cp</code>的下一个位置的内存地址的值。因此不能作为左值使用，只能作为右值使用。但是注意，<code>++</code>操作符的前缀形式表示<strong>将<code>cp</code>增值后再拷贝一份，并作为返回值</strong>。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">cp++</span><br/></pre></td></tr></tbody></table></figure><p>表示<code>cp</code>的下一个位置的内存地址的值。同样不能作为左值使用。但是注意，<code>++</code>的后缀形式表示<strong>先拷贝一份<code>cp</code>并作为返回值，然后再将<code>cp</code>增值</strong>。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">*++cp</span><br/></pre></td></tr></tbody></table></figure><p>作为右值时，它表示<code>cp</code>的下一个内存地址的值；作为左值时，它表示<code>cp</code>的下一个内存地址。这里注意下，<code>++</code>的前缀形式和<code>*</code>都是右结合的。这里因为++离得近所以先自增再间接访问。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">*cp++</span><br/></pre></td></tr></tbody></table></figure><p>作为右值时，它表示<code>cp</code>的内存地址的值；作为左值时，它表示<code>cp</code>的内存地址。注意，此处<code>++</code>的优先级是高于<code>*</code>的。但是因为前面说过的：</p><blockquote><p>但是注意，<code>++</code>的后缀形式表示<strong>先拷贝一份<code>cp</code>并作为返回值，然后再将<code>cp</code>增值</strong>。</p></blockquote><p>所以，<code>cp</code>的值实际上已经自增了。之所以还表示<code>ch</code>处的地址/地址的值，是因为**<code>++</code>返回原值的拷贝再将<code>cp</code>自增**。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">++*cp</span><br/></pre></td></tr></tbody></table></figure><p>看了上面的例子，你应该很清楚了：它表示将<code>ch</code>处的值自增，并返回该值的拷贝。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">(*cp)++</span><br/></pre></td></tr></tbody></table></figure><p>表示将<code>cp</code>处的值拷贝一份再返回，再自增<code>cp</code>处的值。所以只能作为右值使用。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">++*++cp</span><br/></pre></td></tr></tbody></table></figure><p>表示将<code>cp</code>的值（也就是<code>ch</code>的地址）自增并返回一份拷贝（即<code>ch</code>的下一个内存地址的指针），再对这份拷贝进行间接访问操作，再对此处（<code>ch</code>的下一个内存地址处）存储的值自增并返回一份拷贝。同样，因为是值，所以只能作为右值。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">++*cp++</span><br/></pre></td></tr></tbody></table></figure><p>此处注意，<code>++</code>后缀形式的优先级较高，因此先返回<code>cp</code>的值再将cp自增，<code>*</code>得到<code>++</code>返回的<code>cp</code>的值（即<code>ch</code>），并对其进行间接访问，再由前缀的<code>++</code>将<code>ch</code>处的值自增，并返回一份拷贝。</p><p>弄清了这些，对于指针的操作应该就熟悉了。</p><h2 id="指针和数组"><a href="https://mxts.jiujiuer.xyz/2021/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%8C%87%E9%92%88/#%E6%8C%87%E9%92%88%E5%92%8C%E6%95%B0%E7%BB%84" class="headerlink" title="指针和数组"></a>指针和数组</h2><p>首先声明一个数组。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="built_in">array</span>[<span class="number">32</span>];</span><br/></pre></td></tr></tbody></table></figure><p><code>array</code>表示指向首元素的指针。所以这两种形式等价：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>,<span class="built_in">array</span>[<span class="number">15</span>]==*(<span class="built_in">array</span>+(<span class="number">15</span>)));  <span class="comment">//输出1</span></span><br/></pre></td></tr></tbody></table></figure><p>多元数组同样，只需要反复嵌套即可。</p><blockquote><p>这里注意，对于数组的下标，由于C实现下标的方法，实际上有两种合法形式：<code>array[1]</code>和<code>1[array]</code>都是合法的。<br/>但是很显然，后一种的可读性极差，违反直觉。所以不应被使用。</p><p>同样，函数声明也有一种旧式的K&amp;R风格：<code>int func(a,b,c)int a;char b;float c;</code>。它的使用也应避免：参数传递之前，<code>char</code>和<code>short</code>类型会被提升成<code>int</code>类型，<code>float</code>会被提升为<code>double</code>类型。这称作<strong>缺省参数提升</strong>。所以应尽量避免使用这种风格的声明。</p></blockquote><h3 id="指向数组的指针"><a href="https://mxts.jiujiuer.xyz/2021/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%8C%87%E9%92%88/#%E6%8C%87%E5%90%91%E6%95%B0%E7%BB%84%E7%9A%84%E6%8C%87%E9%92%88" class="headerlink" title="指向数组的指针"></a>指向数组的指针</h3><p>先看这个语句：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> matrix[<span class="number">3</span>][<span class="number">10</span>], *mp=matrix;</span><br/></pre></td></tr></tbody></table></figure><p>这是错误的。因为<code>matrix</code>是指向整型数组的指针。要声明这样的指针，需要加上下标：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> (*p)[<span class="number">10</span>] = matrix;</span><br/></pre></td></tr></tbody></table></figure><p>它指向<code>matrix</code>的第一个整型数组。</p><blockquote><p>此处注意优先级：<strong>下标引用高于间接访问</strong>。但是因为加了括号，所以实际还是间接访问先执行。</p></blockquote><p>如果需要一个指针逐个访问整型元素，则可以这样：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *pi = &amp;matrix[<span class="number">0</span>][<span class="number">0</span>];</span><br/><span class="line"><span class="type">int</span> *pi = matrix[<span class="number">0</span>];    <span class="comment">//等价形式</span></span><br/></pre></td></tr></tbody></table></figure><p>此时，<code>pi++</code>会使它指向下一个整型元素。</p><h3 id="指针数组"><a href="https://mxts.jiujiuer.xyz/2021/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%8C%87%E9%92%88/#%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84" class="headerlink" title="指针数组"></a>指针数组</h3><p>看这个声明：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* api[<span class="number">10</span>];</span><br/></pre></td></tr></tbody></table></figure><p>它表示一个数组，它的每个元素都是指针：指向整型的指针。这个可以根据前面的优先级顺序推导出来。</p><h2 id="指针和字符串常量"><a href="https://mxts.jiujiuer.xyz/2021/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%8C%87%E9%92%88/#%E6%8C%87%E9%92%88%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F" class="headerlink" title="指针和字符串常量"></a>指针和字符串常量</h2><p>一个字符串常量的值是什么？是一个<strong>指针常量</strong>，一个<strong>指向它第一个字符</strong>的指针常量。为什么是常量呢？因为它的（偏移）地址是编译时编译器指定的。<br/>下面来看几个似乎有点离谱的……表达式？</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="string">&#34;xyz&#34;</span>+<span class="number">1</span></span><br/></pre></td></tr></tbody></table></figure><p>看起来似乎没有意义？但结合前面所说，我们可以推知，这是一个指向它本身第二个字符的指针。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">*<span class="string">&#34;xyz&#34;</span></span><br/></pre></td></tr></tbody></table></figure><p>对这个指向第一个字符x的指针，执行间接访问，结果是什么？就是它指向的字符<code>&#39;x&#39;</code>。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="string">&#34;xyz&#34;</span>[<span class="number">2</span>]</span><br/></pre></td></tr></tbody></table></figure><p>这表示字符<code>&#39;z&#39;</code>。<br/>但是这技巧有什么用呢？看看这个：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">print_process_bar</span><span class="params">(<span class="type">int</span> n)</span></span><br/><span class="line">{</span><br/><span class="line">    n+=<span class="number">5</span>;</span><br/><span class="line">    n/=<span class="number">10</span>;</span><br/><span class="line">    <span class="built_in">printf</span>(<span class="string">&#34;%s\n&#34;</span>,<span class="string">&#34;**********&#34;</span>+<span class="number">10</span>-n);</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>这个函数接收一个0-100间的值，输出相应数量除以10的<code>*</code>。像不像一个进度条呢？</p><p>如果我们用for循环来实现，那么100%就需要循环100次。效率远不如这个函数。当然，还是可读性和可维护性更重要一些。</p><p>还有这个进制转换的方法：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="built_in">putchar</span>(<span class="string">&#34;0123456789ABCDEF&#34;</span>[value%<span class="number">16</span>]);</span><br/></pre></td></tr></tbody></table></figure><p>它比传统的进制转换或许会更快一些，但是你应该写清楚注释，确保它的可读性。</p><h2 id="指针和函数：函数指针"><a href="https://mxts.jiujiuer.xyz/2021/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%8C%87%E9%92%88/#%E6%8C%87%E9%92%88%E5%92%8C%E5%87%BD%E6%95%B0%EF%BC%9A%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88" class="headerlink" title="指针和函数：函数指针"></a>指针和函数：函数指针</h2><p>首先，在介绍更高级的指针类型之前，很有必要看看它们是如何声明的。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> f;        <span class="comment">//一个整型变量</span></span><br/><span class="line"><span class="type">int</span> *f;      <span class="comment">//一个指向整型的指针</span></span><br/><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">()</span>;     <span class="comment">//一个函数f</span></span><br/><span class="line"><span class="type">int</span> *<span class="title function_">f</span><span class="params">()</span>;   <span class="comment">//一个返回值为指向整型的指针的函数</span></span><br/><span class="line"><span class="comment">/*</span></span><br/><span class="line"><span class="comment">上面那个语句中，()，也就是</span></span><br/><span class="line"><span class="comment">函数调用操作符，优先级高于</span></span><br/><span class="line"><span class="comment">间接访问操作符。所以f是一个</span></span><br/><span class="line"><span class="comment">函数，它的返回值是一个</span></span><br/><span class="line"><span class="comment">指向整型的指针。</span></span><br/><span class="line"><span class="comment">*/</span></span><br/><span class="line"><span class="type">int</span> (*f)();  <span class="comment">//一个指向函数的指针</span></span><br/><span class="line"><span class="comment">/*</span></span><br/><span class="line"><span class="comment">需要分清的是括号的含义。第一对括号</span></span><br/><span class="line"><span class="comment">就是普通的括号，最先执行计算，表示</span></span><br/><span class="line"><span class="comment">f是一个指针。然后是第二个括号，表示</span></span><br/><span class="line"><span class="comment">函数调用，所以*f是一个返回值为int的</span></span><br/><span class="line"><span class="comment">函数，f则是指向这个函数的指针。</span></span><br/><span class="line"><span class="comment">*/</span></span><br/><span class="line"><span class="type">int</span> *(*f)();    <span class="comment">//一个指向返回值为整型指针的函数指针</span></span><br/><span class="line"><span class="type">int</span> f[];          <span class="comment">//一个数组</span></span><br/><span class="line"><span class="type">int</span> *f[];        <span class="comment">//一个元素为整型指针的数组</span></span><br/><span class="line"><span class="type">int</span> (*f[])();  <span class="comment">//一个成员为返回值为整型的函数指针的指针数组</span></span><br/><span class="line"><span class="type">int</span> *(*f[])(); <span class="comment">//一个指针数组，指针所指向的类型是返回值为整型指针的函数</span></span><br/><span class="line"><span class="type">int</span> *(*f[])(<span class="type">int</span>, <span class="type">float</span>); <span class="comment">//标准ANSI C风格的函数指针数组的声明</span></span><br/></pre></td></tr></tbody></table></figure><p>有一个叫做cdecl的程序，可以解释一个现存的C语言声明，不妨百度一下。</p><h3 id="函数指针"><a href="https://mxts.jiujiuer.xyz/2021/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%8C%87%E9%92%88/#%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88" class="headerlink" title="函数指针"></a>函数指针</h3><p>作为一种技巧，它会降低代码的可读性，但是也会提升效率。最常用的两个用法就是转换表和作为参数传给另一个函数，即：回调函数。</p><h4 id="回调函数"><a href="https://mxts.jiujiuer.xyz/2021/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%8C%87%E9%92%88/#%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0" class="headerlink" title="回调函数"></a>回调函数</h4><p>下面看一个程序。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&#34;node.h&#34;</span></span></span><br/><span class="line"></span><br/><span class="line">Node * <span class="title function_">search_list</span><span class="params">(Node *node, </span></span><br/><span class="line"><span class="params">                <span class="type">void</span> <span class="type">const</span> *value, </span></span><br/><span class="line"><span class="params">                <span class="type">int</span> (*compare)(<span class="type">void</span> <span class="type">const</span> *, <span class="type">void</span> <span class="type">const</span> *))</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="keyword">while</span>(node!=<span class="literal">NULL</span>)</span><br/><span class="line">    {</span><br/><span class="line">        <span class="keyword">if</span>(compare(&amp;node-&gt;value, value)==<span class="number">0</span>)</span><br/><span class="line">            <span class="keyword">break</span>;</span><br/><span class="line">        node=node-&gt;link;</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> node;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>这是一个类型无关的链表查找函数。它的第三个参数是一个指向比较函数的指针，所以在调用的时候，我们需要编写一个对应链表数据类型的比较函数：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">cmp_int</span><span class="params">(<span class="type">void</span> <span class="type">const</span> *a, <span class="type">void</span> <span class="type">const</span> *b)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="keyword">return</span> !(*(<span class="type">int</span>*)a==*(<span class="type">int</span>*)b);</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>注意这个函数。为了使上面的查找函数类型无关，所以它调用的函数的参数也必须是类型无关的。</p><p>也是因此，在编写比较函数时，我们需要对指针进行强制类型转换，然后再解引用，才能得到正确的值。</p><p>顺便注意一下我写的比较函数，用了一些方法简写了。</p><h4 id="转移表"><a href="https://mxts.jiujiuer.xyz/2021/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%8C%87%E9%92%88/#%E8%BD%AC%E7%A7%BB%E8%A1%A8" class="headerlink" title="转移表"></a>转移表</h4><p>考虑一个计算器程序。对于一个功能很多的计算器，我们要对它的运算符编一个很长的switch语句。很繁琐，对吧？</p><p>假设操作符是从0开始的，则可以用转移表来替换掉这个大大的switch：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br/><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br/><span class="line"><span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br/><span class="line"><span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> (*oper_func[])(<span class="type">int</span>, <span class="type">int</span>) = {</span><br/><span class="line">    add, sub, mul, div</span><br/><span class="line">};</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> a,b,oper;</span><br/><span class="line">    <span class="type">int</span> result;</span><br/><span class="line">    </span><br/><span class="line">    <span class="built_in">scanf</span>(<span class="string">&#34;%d %s %d&#34;</span>,&amp;a,&amp;oper,&amp;b);</span><br/><span class="line">    result = oper_func[oper](a, b);</span><br/><span class="line">    <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>, result);</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="keyword">return</span> a+b;</span><br/><span class="line">}</span><br/><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="keyword">return</span> a-b;</span><br/><span class="line">}</span><br/><span class="line"><span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="keyword">return</span> a*b;</span><br/><span class="line">}</span><br/><span class="line"><span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="keyword">return</span> a/b;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>借用函数指针数组，我们就可以根据输入的运算符编号来调用函数指针数组中对应序号的函数。</p><p>一定要注意，<strong>函数原型必须声明在函数指针数组之前</strong>。</p><p>同样的，在这里也存在下标越界的问题。但是这里的越界更难诊断出来，程序可能会直接终止，但报错的位置可能是下标越界，也可能是很奇怪的位置，因为指针可能飞到一个数据段中去了，数据被当做指令执行，肯定会出错。</p><p>更离谱点，如果这个指针刚好飞到一个函数体中，那个函数可能会快乐地执行，并且修改谁也不知道的值。这时候要找出bug就难如登天了。</p><h2 id="实例"><a href="https://mxts.jiujiuer.xyz/2021/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%8C%87%E9%92%88/#%E5%AE%9E%E4%BE%8B" class="headerlink" title="实例"></a>实例</h2><h3 id="这啥"><a href="https://mxts.jiujiuer.xyz/2021/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%8C%87%E9%92%88/#%E8%BF%99%E5%95%A5" class="headerlink" title="这啥"></a>这啥</h3><blockquote><p>我一个哥们问我的</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *(*a[<span class="number">5</span>])(<span class="type">int</span>, <span class="type">char</span>*);</span><br/></pre></td></tr></tbody></table></figure><p>比较麻烦。。不过还能看出来，区分好结构就行了。</p><p>这是一个函数指针数组的指针，指针指向的每个函数返回一个<code>int</code>类型的指针。</p><p>首先看大体结构。<code>int* xxx(int,char)</code>应是一个函数的样子。然后再细看：</p><p><code>*a[5]</code>又是啥？我们先看下<code>a[5]</code>。这是一个被初始化的，含有5个元素的数组。<code>*</code>表示该数组每个元素都是指针。所以，这是一个函数指针数组。</p><h3 id="字符串长度统计"><a href="https://mxts.jiujiuer.xyz/2021/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%8C%87%E9%92%88/#%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E7%BB%9F%E8%AE%A1" class="headerlink" title="字符串长度统计"></a>字符串长度统计</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">size_t</span> <span class="title function_">strlen</span><span class="params">(<span class="type">char</span> *<span class="built_in">string</span>)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> length=<span class="number">0</span>;</span><br/><span class="line">    </span><br/><span class="line">    <span class="keyword">while</span>(*<span class="built_in">string</span>++!=<span class="string">&#39;\0&#39;</span>)</span><br/><span class="line">        length++;</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">return</span> length;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure></body></html>