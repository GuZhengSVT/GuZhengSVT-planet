<html><head></head><body><h2 id="0x0-简介"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#0x0-%E7%AE%80%E4%BB%8B" class="headerlink" title="0x0.简介"></a>0x0.简介</h2><p>这是一个几乎所有Linux发行版都会自带的，（比较）轻量级的，功能强大的恰到好处的文本编辑器。</p><p>因为其功能极度强大，所以人赐外号：“编辑器之神”。</p><p>不过，因为它的一切操作只依靠键盘，所以对于用习惯GUI的朋友们而言，不太友好。<del>在谷歌上输入How to quit，联想结果的第一个就是How to quit vim（</del>相对其他几个编辑器而言，它的学习曲线还是比较适中的。初学的时候记下几个快捷键，用熟了再继续慢慢学，不知不觉就能用得越来越爽了。</p><p>要想用好Vim，就离不开下面这几个关键点：</p><ul><li>快捷键（灵魂）</li><li>配置文件（用得更爽）</li><li>插件（？）</li><li>帮助文档（！），输入<code>:help</code>即可查看</li></ul><p>Vim的灵魂是按键操作，而不是<em>花里胡哨</em>的插件。想要用各种插件把Vim打造的媲美IDE的，不妨去试用各种集成Vim的IDE，而不是Vim——你只会浪费时间，很多时候还不会达到目的。</p><p>我各种IDE（jb全家桶/VSCode）+Vim插件用的都比较爽。虽然支持的不是很全面，不过只要支持各种语义操作、宏操作以及可视化之类的操作，其实就差不多了。目前体验最好的是VSCode+Vim插件，基本功能支持良好，VSCode Native Integration也做的有可取之处（很多VSCode的重要按键都能映射给VSCode）。Vim已经是一种哲学了。当然如果你是原教旨主义者那随你喜好咯（</p><p>另外，想要真正学习Vim的，建议<code>Vimtutor</code>，并且重点就是学习各种编辑快捷键，以及Vim的编辑器模型设计。</p><p>反正我现在原生的Vim使用场景要么是C/C++/Bash之类的主力开发，博客/笔记，要么是其他重量级语言/项目的轻度开发。写博客/写文章这种纯语言的输出挺适合Vim，重度写代码的话，还是自己组合一套合适的工具链完成吧。</p><h2 id="0x01-基础操作"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#0x01-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C" class="headerlink" title="0x01.基础操作"></a>0x01.基础操作</h2><p>假定你在用任意一个Linux发行版（Windows需要单独下载），根据下面的步骤来尝试Vim吧。</p><p>首先，在命令行中输入<code>vim</code>，进入Vim。也可以输入<code>vim filename</code>来编辑一个现存的文件，或者创建并编辑一个新的文件。</p><p>进入Vim后，按键盘上的<code>i</code>以进入编辑模式。此时，最下方的状态指示变为<code>INSERT</code>，即插入模式。这时，我们可以像使用其他文本编辑器一样使用Vim，不过只能用键盘输入、删除和移动光标，并且不能用<code>Ctrl+Z/C/V</code>等组合键，它们不仅没有作用，有的还会终止编辑器使得你丢失编辑进度。</p><p>输入完毕后，按一下键盘左上角的<code>Esc</code>，退出编辑模式。随后，输入<code>:</code>（即英文冒号）进入命令模式，此时输入的命令在最底下的状态栏显示。接着，输入<code>wq</code>保存并退出vim。除了用<code>:wq</code>保存并退出，也可以按<code>ESC</code>之后直接输入<code>ZZ</code>(大写)来保存并退出。</p><p>这就是Vim的基本使用，现在可以尝试用它进行最基础的文件编辑。</p><h2 id="0x02-常用操作与技巧"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#0x02-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E4%B8%8E%E6%8A%80%E5%B7%A7" class="headerlink" title="0x02.常用操作与技巧"></a>0x02.常用操作与技巧</h2><h3 id="查找替换"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#%E6%9F%A5%E6%89%BE%E6%9B%BF%E6%8D%A2" class="headerlink" title="查找替换"></a>查找替换</h3><ol><li>查找</li></ol><p>首先是单字符查找命令：<code>f</code>命令。它的用法为<code>f{char}</code>，也就是先按<code>f</code>再按要查找的字符。使用<code>;</code>查找下一个字符，使用<code>,</code>查找上一个字符。</p><p>其次是查找匹配项。可以使用<code>/pattern</code>来查找。用法很简单，输入<code>/</code>和要匹配的对象的表达式，回车即可。使用<code>n</code>查找下一项，用<code>N</code>查找上一项。</p><ol start="2"><li>替换</li></ol><p>Vi/Vim 中可以使用 :s 命令来替换字符串。以前只会使用一种格式来全文替换，今天发现该命令有很多种写法（vim 真是强大啊，还有很多需要学习的），记录几种在此，方便以后查询。</p><p><code>:s/vivian/sky/</code> 替换当前行第一个 vivian 为 sky<br/><code>:s/vivian/sky/g</code> 替换当前行所有 vivian 为 sky<br/><code>:n,$s/vivian/sky/</code> 替换第 n 行开始到最后一行中每一行的第一个 vivian 为 sky<br/><code>:n,$s/vivian/sky/g</code> 替换第 n 行开始到最后一行中每一行所有 vivian 为 sky</p><blockquote><p>n 为数字，若 n 为 <code>.</code> 则表示从当前行开始到最后一行</p></blockquote><p><code>:%s/vivian/sky/</code>（等同于 <code>:g/vivian/s//sky/</code>） 替换每一行的第一个 vivian 为 sky<br/><code>:%s/vivian/sky/g</code>（等同于 <code>:g/vivian/s//sky/g</code>） 替换每一行中所有 vivian 为 sky</p><p>替换可以使用<code>&amp;</code>重复，使用<code>u</code>撤销。</p><p>或者，可以在普通模式上使用<code>r</code>进行单次替换，使用<code>R/Insert</code>进行多次替换。借助后者，可以进入替换模式。在这模式下，输入任意字符都会替换当前位置的字符。如果替换错误的话，使用Backspace退格取消替换，或者先返回普通模，再按<code>u</code>撤销上次更改即可。</p><h3 id="跳转"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#%E8%B7%B3%E8%BD%AC" class="headerlink" title="跳转"></a>跳转</h3><p>Vim的复杂，一定程度上就是因为跳转功能十分丰富。比如：</p><ul><li><code>{</code>和<code>}</code>：跳转到下一个空白行</li><li><code>C-f</code>和<code>C-b</code>：上下滚动屏幕</li><li><code>C-u</code>和<code>C-d</code>：上下滚动半屏</li><li><code>w</code>和<code>e</code>：跳转到下一个词开头/当前词结尾</li><li><code>gh/j/k/l</code>：无视行，在折行中进行上下左右的跳转</li><li><code>*</code>：跳转到下一个和光标下匹配的词</li><li><code>n</code>和<code>N</code>：跳转到下/上一个搜索词</li><li><code>{</code>和<code>}</code>：跳转到上/下一个空行</li></ul><h4 id="标记-mark"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#%E6%A0%87%E8%AE%B0-mark" class="headerlink" title="标记-mark"></a>标记-mark</h4><p>此外还有一个标签（mark）系统可以让你在一个地方插标记<del>传送锚点</del>，然后跳回来。标签记录的位置信息是相对于行而言，而非行号。</p><p>用<code>:help mark-motions</code>查看所有帮助。</p><ul><li><p>创建<br/>使用<code>m[a-zA-Z]</code>在光标所在处创建标记，其中小写字母创建的标记只在当前缓冲区生效，大写字母的标记则在所有缓冲区生效。</p></li><li><p>跳转<br/>使用<code>&#39;[a-zA-Z]</code>跳转到标记行首个非空字符，<code>&#39;&#39;</code>跳转到上个标记行的首个非空字符，<code>\</code>[a-zA-Z]<code>用于跳转到标记时光标所在的位置，同理也可以使用</code> `` ` 跳转到上一个标记的光标位置。</p></li><li><p>查看<br/>使用<code>:marks</code>可以查看所有标记，其中也会混入一些系统特殊标记：</p></li><li><p><code>.</code>最近编辑的位置</p></li><li><p><code>0-9</code>最近使用的文件</p></li><li><p><code>^</code>最近插入的位置</p></li><li><p><code>&#39;</code>上一次跳转前的位置</p></li><li><p><code>&#34;</code>上一次退出文件时的位置</p></li><li><p><code>[</code>上一次修改的开始处</p></li><li><p><code>]</code>上一次修改的结尾处</p></li></ul><p><img src="https://xeonds.github.io/img/Screenshot_20231205_185419.png"/></p><ul><li>删除标记<br/>删除一行会删除这行包含的标记，另外<code>&#39;a</code>这样的标记也可以作为字符实体使用，比如<code>d&#39;a</code>就可以删除标记的行。用<code>:delmarks a b c</code>删除多个标记，<code>:delmarks!</code>删除所有标记。</li></ul><h3 id="组合编辑"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#%E7%BB%84%E5%90%88%E7%BC%96%E8%BE%91" class="headerlink" title="组合编辑"></a>组合编辑</h3><p>另外有一些命令将一些操作组合到了一起，实现了很多种的编辑方式，比如：</p><ul><li><code>s</code>和<code>S</code>：删除当前字符/行并进入编辑模式</li><li><code>cc</code>和<code>C</code>：等价上面的<code>S</code>操作符</li><li><code>J</code>：将下一行的内容拼接到当前行尾</li></ul><p>其他的什么<code>oOiIaA</code>暂时懒得写了，因为有个更重要的就是按键组合。比如<code>c$</code>删除到行尾并编辑，<code>caw/a/s/p</code>删除并编辑当前单词/语块/行/段落等，都是很好用的组合编辑命令。</p><blockquote><p>特别注意。上面的组合命令格式类似于<strong>动词+名词</strong>的结构，给一个可组合动词（反例就是<code>s/S</code>，按下就执行，无法组合）后面加上语义，构成了一种愉快的编辑体验：比手动框选更加精确迅速的编辑模式。</p></blockquote><p>而且上面的操作也可以借助一次移动一次编辑的形式重复化利用，合起来就是编辑高效的秘诀。</p><h3 id="Visual模式"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#Visual%E6%A8%A1%E5%BC%8F" class="headerlink" title="Visual模式"></a>Visual模式</h3><p>Vim的使用场景一般都是SSH连接到无头服务器上。那种情况一般没有GUI，也没有鼠标。难道就不能像在Windows里一样用鼠标拖拽选择文字了？仍然可以，借助V模式即可。</p><p>V模式，也就是可视化模式，在按<code>ESC</code>退出编辑模式后，按<code>v</code>即可进入。此时，状态栏会显示<code>--VISUAL--</code>，这时用方向键/HJKL移动光标则会从当前位置“拖拽”选择文字，并且此时也一样支持<code>gg/G</code>、<code>:n</code>、<code>n+方向键/HJKL</code>来快速移动光标。此时再按一次<code>v</code>即可退出V模式。</p><p>进入V模式后，选择了需要编辑的内容之后，使用<code>x</code>可以剪切被框选的内容，<code>y</code>则可以复制区域内容，用<code>p</code>可以粘贴内容并覆盖所选区域；除此之外，<strong>用<code>&#34;+y</code>则可以复制内容到系统剪贴板</strong>，<strong>用<code>&#34;+p</code>可以从系统剪贴板粘贴</strong>。注意这快捷键前的双引号是必须的。</p><blockquote><p>如果需要多次复制粘贴内容，需要在<code>~/.vimrc</code>添加如下配置来直接同步系统剪贴板和Vim剪贴板：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">&gt;set clipboard=unnamedplus</span><br/></pre></td></tr></tbody></table></figure></blockquote><p>借助V模式，不用鼠标也能选取文字、复制粘贴。更详细的用法可以阅读Vim的help手册。</p><h3 id="分屏与文件浏览"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#%E5%88%86%E5%B1%8F%E4%B8%8E%E6%96%87%E4%BB%B6%E6%B5%8F%E8%A7%88" class="headerlink" title="分屏与文件浏览"></a>分屏与文件浏览</h3><p>使用vim时，用<code>vim [filename]</code>就可以打开/创建并编辑一个文件，不过<code>filename</code>也可以是目录名称，这样就会用vim内置的文件管理器打开目标目录。这个模式使用起来很简单，上下键移动光标，回车键确认。</p><p>分屏也是一个实用操作，不过学了tmux之后我就不怎么用vim的分屏操作了。</p><p>核心快捷键只有两组：<code>Ctrl+w,h/v</code>和<code>Ctrl+w,h/j/k/l</code>。第一组是分屏，<code>h</code>表示水平分屏，<code>v</code>表示垂直分屏。第二组快捷键表示在各个分屏中移动，<code>h/j/k/l</code>和vim默认模式的含义一样，表示向左/下/上/右移动。</p><p>另外，也可以通过<code>:sp/vsp [filename]</code>来水平/垂直分屏并打开名为<code>filename</code>的文件。</p><p>关闭分屏和关闭文件一样，选择当前分屏，用<code>:q/wq(!)</code>和<code>ZZ</code>都可以退出（并保存）当前文件。</p><h3 id="命令模式"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F" class="headerlink" title="命令模式"></a>命令模式</h3><p>在vim中也能直接和CLI交互，使用<code>:![command]</code>即可。其中，<code>%</code>表示当前文件的文件名。通过这个方法，我们可以快速调试单文件程序，例如：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line">:w    <span class="comment"># 一定记得先保存当前文件再编译</span></span><br/><span class="line">:!gcc % &amp;&amp; ./a.out</span><br/></pre></td></tr></tbody></table></figure><p>在命令模式输入上述代码，即可编译并运行当前文件。同时，命令模式也支持上下键回溯历史命令。</p><p>编写脚本时，借助它能够快速验证/执行脚本。</p><h3 id="Ctrl-r"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#Ctrl-r" class="headerlink" title="Ctrl+r"></a>Ctrl+r</h3><p>这是一个常用的插入快捷键，用于在insert模式下插入各种内容。下面用<code>&lt;C-r&gt;</code>表示<code>Ctrl+r</code>。</p><h4 id="插入寄存器中的内容"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#%E6%8F%92%E5%85%A5%E5%AF%84%E5%AD%98%E5%99%A8%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9" class="headerlink" title="插入寄存器中的内容"></a>插入寄存器中的内容</h4><p>在vim中，寄存器用于存储文本。您可以使用以下命令将寄存器中的内容插入到当前位置：</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="symbol">&lt;C-r&gt;</span>{register}</span><br/></pre></td></tr></tbody></table></figure><p>其中，<code>{register}</code>是要插入内容的寄存器名。例如，<code>&lt;C-r&gt;0</code>将插入0号寄存器中的内容。</p><h4 id="插入表达式的结果"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#%E6%8F%92%E5%85%A5%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E7%BB%93%E6%9E%9C" class="headerlink" title="插入表达式的结果"></a>插入表达式的结果</h4><p>您可以使用以下命令将表达式的结果插入到当前位置：</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="symbol">&lt;C-r&gt;</span>= {expression} <span class="symbol">&lt;CR&gt;</span></span><br/></pre></td></tr></tbody></table></figure><p>其中，<code>{expression}</code>是要求值的表达式。例如，<code>&lt;C-r&gt;=2+2&lt;CR&gt;</code>将在当前位置插入“4”，<code>&lt;C-r&gt;=strftime(&#39;%c&#39;)&lt;CR&gt;</code>可以插入当前日期。</p><h4 id="插入文件名"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#%E6%8F%92%E5%85%A5%E6%96%87%E4%BB%B6%E5%90%8D" class="headerlink" title="插入文件名"></a>插入文件名</h4><p>如果您希望将文件名插入到当前位置，可以使用以下命令：</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="symbol">&lt;C-r&gt;</span>%</span><br/></pre></td></tr></tbody></table></figure><p>这将在当前位置插入当前文件的名称。</p><h4 id="插入上一次插入的文本"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#%E6%8F%92%E5%85%A5%E4%B8%8A%E4%B8%80%E6%AC%A1%E6%8F%92%E5%85%A5%E7%9A%84%E6%96%87%E6%9C%AC" class="headerlink" title="插入上一次插入的文本"></a>插入上一次插入的文本</h4><p>如果您需要在插入模式下重新插入上一次插入的文本，可以使用以下命令：</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="symbol">&lt;C-r&gt;</span><span class="comment">&#34;</span></span><br/></pre></td></tr></tbody></table></figure><p>这将在当前位置插入最后一次插入的文本。</p><h3 id="高效编辑"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#%E9%AB%98%E6%95%88%E7%BC%96%E8%BE%91" class="headerlink" title="高效编辑"></a>高效编辑</h3><p>这一部分比较杂，包含一些快捷操作。</p><h4 id="插入删除"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4" class="headerlink" title="插入删除"></a>插入删除</h4><ul><li><code>x</code> 删除当前字符</li><li><code>i</code> 在光标前插入</li><li><code>a</code> 在光标后插入</li><li><code>o</code> 在当前行后另起一行插入</li><li><code>O</code> 在当前行前另起一行插入</li></ul><h4 id="快速跳转"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#%E5%BF%AB%E9%80%9F%E8%B7%B3%E8%BD%AC" class="headerlink" title="快速跳转"></a>快速跳转</h4><ul><li><code>:[line number]</code> 快速跳转到目标行号</li><li><code>w</code> 向后跳转一个单词</li><li><code>gg</code> 跳转到全文开头，<code>G</code> 跳转到全文末</li><li><code>0</code> 跳转到当前行初，<code>$</code> 跳转到当前行末</li><li><code>/[keyword]</code> 搜索并跳转到<code>keyword</code>处，<code>n</code> 继续向后搜索，<code>N</code> 向前搜索</li><li><code>n+h/j/k/l</code> 向前/下/上/后跳转n单位</li><li><code>ctrl+i</code> 跳转到上一个历史位置</li><li><code>ctrl+o</code> 跳转到下一个历史位置</li><li><code>gi</code> 跳转到上一次编辑的位置</li><li><code>[number]G</code> 跳转到第<code>number</code>行，和<code>:number</code>效果一样</li></ul><p>除了上面那些操作，Vim还提供了很多移动功能。比如浏览一些可以折叠的代码块时，可以用下面的命令展开和折叠：</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/></pre></td><td class="code"><pre><span class="line">zM      <span class="comment">&#34;折叠代码块</span></span><br/><span class="line">zf[n]G  <span class="comment">&#34;折叠当前行到第n行</span></span><br/><span class="line">zE      <span class="comment">&#34;删除所有的折叠标签（被折叠的区域会有大括号作为提示）</span></span><br/><span class="line">zR      <span class="comment">&#34;展开代码块</span></span><br/></pre></td></tr></tbody></table></figure><p>这部分的内容，详细可以看Vim的帮助文档。输入<code>:h Folding</code>即可查看。</p><h4 id="复制粘贴"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4" class="headerlink" title="复制粘贴"></a>复制粘贴</h4><ul><li><code>dd</code> 删除当前行，<code>ndd</code> 删除从当前行往后的n行，<code>dn+h/l</code> 删除光标前/后n个字符</li><li><code>yy</code> 复制当前行，<code>nyy</code> 复制从当前行往后的n行，<code>yn+h/l</code> 复制光标前/后n个字符</li><li><code>p</code> 粘贴复制的内容</li></ul><h4 id="重复操作（宏）"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#%E9%87%8D%E5%A4%8D%E6%93%8D%E4%BD%9C%EF%BC%88%E5%AE%8F%EF%BC%89" class="headerlink" title="重复操作（宏）"></a>重复操作（宏）</h4><p>这是Vim中最强大的功能之一。在处理较多数据的时候，真的能节省大量的时间。</p><ul><li><code>q+[letter]</code> 进入操作记录模式，随后除了 <code>q</code>的所有按键都会被记录</li><li><code>q</code> 退出操作录制模式并保存之前的操作到<code>letter</code></li><li><code>@[letter]</code> 重复录制的操作，<code>n@[letter]</code> 重复n次录制的操作</li></ul><p>举个例子吧。比如我想删掉每行行末的两个字符，我就可以这么用：</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/></pre></td><td class="code"><pre><span class="line">Esc+gg    <span class="comment">&#34;跳转到开头</span></span><br/><span class="line">qq        <span class="comment">&#34;开始录制宏到q中</span></span><br/><span class="line">$,xx,<span class="keyword">j</span>    <span class="comment">&#34;逗号表示隔开的操作。它表示先跳转到行末，然后删除两个字符，再跳到下一行</span></span><br/><span class="line">q         <span class="comment">&#34;停止并保存宏到q</span></span><br/></pre></td></tr></tbody></table></figure><p>这样就完成录制了。随后移动光标到你编辑的起始位置，并输入<code>n@q</code>来批量操作，其中的<code>n</code>表示你需要重复操作的次数。</p><p>随后，欣赏魔法吧（雾</p><p>在录制宏的时候，尽量用相对定位，例如<code>0</code>和<code>$</code>（行首和行末），同时尽量先确认操作是能达到效果的，不然自动机乱飞就不好玩了（其实误操作也能用<code>u</code>救回来</p><h3 id="Bin编辑"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#Bin%E7%BC%96%E8%BE%91" class="headerlink" title="Bin编辑"></a>Bin编辑</h3><p>用<code>Esc+:</code>进入命令模式后，输入<code>%!xxd</code>就可以用二进制模式查看文件。</p><p>要返回正常模式，只需要输入<code>%!xxd -r</code>即可返回。</p><blockquote><p>jyy好强（</p></blockquote><h3 id="输出重定向到Vim"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0Vim" class="headerlink" title="输出重定向到Vim"></a>输出重定向到Vim</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">strace -f gcc a.c |&amp; vim -</span><br/></pre></td></tr></tbody></table></figure><p>上面的管道符将<code>strace</code>的输出（<code>stdin</code>）重定向到了Vim中，便于我们查看和编辑。</p><h3 id="Vim-grep"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#Vim-grep" class="headerlink" title="Vim+grep"></a>Vim+grep</h3><p>在Vim命令模式中可以这样使用grep：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line">:%!grep execve      <span class="comment"># 提取出含有execve的行</span></span><br/><span class="line">:%!grep -v ENOENT   <span class="comment"># 过滤掉含有ENOENT的行</span></span><br/></pre></td></tr></tbody></table></figure><p>这对buffer中的数据调用命令行进行处理，并替换（？）Vim Buffer中的内容。实质上和上面的Bin编辑类似（？）。</p><h3 id="范式"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#%E8%8C%83%E5%BC%8F" class="headerlink" title="范式"></a>范式</h3><p><code>.</code>命令会<strong>重复上次修改</strong>，而查找命令（无论是<code>/+n</code>还是<code>f+;</code>）可以快速移动到下一个匹配位置。一个理想的Vim范式，就是使用一个命令修改，另一个命令移动&gt;.</p><h2 id="0x03-配置文件"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#0x03-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" class="headerlink" title="0x03.配置文件"></a>0x03.配置文件</h2><p>一般指的是用户目录下的<code>.vimrc</code>文件。Vim启动时会自动读取并加载它。它的内容主要包含Vim设置项，自定义函数等。</p><p>下面是一份示例配置文件。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/><span class="line">42</span><br/><span class="line">43</span><br/><span class="line">44</span><br/><span class="line">45</span><br/><span class="line">46</span><br/><span class="line">47</span><br/><span class="line">48</span><br/></pre></td><td class="code"><pre><span class="line">&#34;这是注释，以英文双引号开头</span><br/><span class="line"></span><br/><span class="line">syntax enable</span><br/><span class="line">syntax on</span><br/><span class="line"></span><br/><span class="line">set tabstop=4</span><br/><span class="line">set shiftwidth=4</span><br/><span class="line">set autoindent</span><br/><span class="line">set smartindent</span><br/><span class="line">set ignorecase</span><br/><span class="line">set cindent</span><br/><span class="line">set shiftround</span><br/><span class="line">set encoding=utf-8</span><br/><span class="line">set number</span><br/><span class="line">set ruler</span><br/><span class="line">set hlsearch</span><br/><span class="line">set laststatus=2</span><br/><span class="line">&#34;set showmatch</span><br/><span class="line">&#34;set cursorline</span><br/><span class="line">highlight StatusLine guifg=SlateBlue guibg=Yellow</span><br/><span class="line"></span><br/><span class="line">let g:netrw_winsize=30</span><br/><span class="line">let g:netrw_liststyle=1</span><br/><span class="line">let g:netrw_timefmt=&#39;%Y-%m-%d %H:%M:%S&#39;</span><br/><span class="line"></span><br/><span class="line">filetype plugin on</span><br/><span class="line"></span><br/><span class="line">map &lt;F5&gt; :call PRUN()&lt;CR&gt;</span><br/><span class="line">nmap &lt;F6&gt; :Sexplore!&lt;CR&gt;</span><br/><span class="line">inoremap &lt;TAB&gt; &lt;C-R&gt;=InsertTabWrapper()&lt;CR&gt;</span><br/><span class="line"></span><br/><span class="line">func! PRUN()</span><br/><span class="line"> exec &#34;w&#34;</span><br/><span class="line"> if &amp;filetype == &#39;python&#39;</span><br/><span class="line">  exec &#34;!python %&#34;</span><br/><span class="line"> elseif &amp;filetype == &#39;c&#39;</span><br/><span class="line">  exec &#34;!gcc % &amp;&amp; ./a.out &amp;&amp; rm ./a.out&#34;</span><br/><span class="line"> endif</span><br/><span class="line">endfunc</span><br/><span class="line"></span><br/><span class="line">func! InsertTabWrapper()</span><br/><span class="line"> let col=col(&#39;.&#39;)-1</span><br/><span class="line"> if !col || getline(&#39;.&#39;)[col-1] !~ &#39;\k&#39;</span><br/><span class="line">  return &#34;\&lt;TAB&gt;&#34;</span><br/><span class="line"> else</span><br/><span class="line">  return &#34;\&lt;C-N&gt;&#34;</span><br/><span class="line"> endif</span><br/><span class="line">endfunc</span><br/></pre></td></tr></tbody></table></figure><p>Vim配置文件的路径在当前用户目录下，也就是<code>/home/usrname/.vimrc</code>，不同的用户都有各自的配置文件。</p><h3 id="配置结构"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#%E9%85%8D%E7%BD%AE%E7%BB%93%E6%9E%84" class="headerlink" title="配置结构"></a>配置结构</h3><p>前两行是开启代码高亮和语法分析。第一大块主要是和缩进有关，前四行都是缩进设置，后几行分别是搜索时忽略大小写，启用C语言语法缩进，<code>shiftround</code>是啥来着忘了(</p><p>下一个小块（只有一行）是设置编码为<code>utf-8</code>。</p><p>下一个大块基本是界面显示相关设置。第一行是开启行号显示，第二行没啥用给注释掉了，第三行是显示当前光标在第几行第几列，第四行是高亮被搜索的关键字，下一行是在当前行显示下划线，用不上所以我注释掉了。下一行是显示编辑状态栏，再下一行是设置状态栏样式。</p><p>下一大块是设置自带的树状图文件浏览器的。</p><p>后面的一堆xxmap是配置按键事件/映射的。</p><p>后面那一堆func是各种函数，能够实现一些简单的功能，比如TAB补全，F5代码运行。</p><p>综上，可以看出，vim配置文件<code>.vimrc</code>的结构大致==可以分为5个部分==，分别是</p><ul><li>编辑器一般设置。包括格式，高亮，vim外观等</li><li>常量设置。通过预设一些常量来更改vim行为</li><li>插件设置。</li><li>按键映射绑定。更改/添加按键功能</li><li>函数。给编辑器添加自定义的功能</li></ul><p>通过更改配置文件，我们可以十分简便地更改vim的外观，操作，代码高亮和补全等。并且可以非常轻松地迁移配置——复制<code>.vimrc</code>到新的地方即可。唯一的缺点是，你通常不知道都有什么可以更改的设置。在这一点上，<strong>充分利用vim自带的帮助文档吧</strong>：输入<code>:help</code>并回车即可查看。</p><h3 id="常用配置"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE" class="headerlink" title="常用配置"></a>常用配置</h3><ul><li><code>set wrap/set nowrap</code> 禁用换行</li><li><code>set number/set nonumber</code> 启用/禁用行号</li><li><code>set ai/set noai</code> 启用/禁用自动缩进，粘贴进代码自动缩进的话可以暂时关掉自动</li></ul><h2 id="0x04-常见问题"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#0x04-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98" class="headerlink" title="0x04.常见问题"></a>0x04.常见问题</h2><ol><li>GVIM主界面乱码</li></ol><p>修改<code>C:\Program Files (x86)\Vim\vim80\menu.vim</code>文件，增加</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">set encoding=utf-8</span><br/></pre></td></tr></tbody></table></figure><ol start="2"><li>改变字体大小</li></ol><p>也是在上面的文件里，添加如下设置：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">set guifont=Lucida\ Console:h14</span><br/></pre></td></tr></tbody></table></figure><p>如果没效果就把语句从文件末尾移到开头。</p><h2 id="0x05-插件"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#0x05-%E6%8F%92%E4%BB%B6" class="headerlink" title="0x05.插件"></a>0x05.插件</h2><p>这个后面再说吧，反正前面的一套下来也差不多够用了<del>除非你想拿Vim当IDE用</del></p><h2 id="0x06-写在最后"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#0x06-%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E" class="headerlink" title="0x06.写在最后"></a>0x06.写在最后</h2><p>编辑器之神的称号源于它编辑文本贼6，而不是能变身All in one IDE（虽然确实可以这么干），写大型项目还是建议直接一步到胃用VS/IDEA。Vim一般也就写写单文件程序/改改配置之类，以及适用于一切要求快速编辑的场合<del>比如做笔记</del>。</p><p>Vim可以给你黑魔法，让你用令人目瞪口呆的速度写下你所想的东西，或者是更改需要更改的东西。最大限度地消除了编辑器和你的思想间的带宽限制之后，所剩下唯一的桎梏，就是——</p><p>你。</p><h2 id="0x07-参考内容"><a href="https://xeonds.github.io/2021/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Vim%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/#0x07-%E5%8F%82%E8%80%83%E5%86%85%E5%AE%B9" class="headerlink" title="0x07.参考内容"></a>0x07.参考内容</h2><ul><li><a href="http://yyq123.github.io/learn-vim/learn-vi-53-Mark.html">VIM学习笔记 标记(Mark)</a></li></ul></body></html>