<html><head></head><body><p>pyinstaller是一个用于将python代码转换为可执行文件的工具，它可以让你在没有安装python环境的电脑上运行你的程序。pyinstaller支持多种操作系统，包括Windows，Linux和Mac OS。在本文中，我将介绍如何使用pyinstaller打包一个简单的python项目，并解决一些常见的问题。</p><h2 id="步骤一：安装pyinstaller"><a href="https://mxts.jiujiuer.xyz/2023/05/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E4%BD%BF%E7%94%A8PyInstaller%E6%89%93%E5%8C%85Python%E7%A8%8B%E5%BA%8F/#%E6%AD%A5%E9%AA%A4%E4%B8%80%EF%BC%9A%E5%AE%89%E8%A3%85pyinstaller" class="headerlink" title="步骤一：安装pyinstaller"></a>步骤一：安装pyinstaller</h2><p>要使用pyinstaller，你首先需要安装它。你可以使用pip命令来安装pyinstaller，如下所示：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br/></pre></td></tr></tbody></table></figure><p>如果你使用的是Anaconda或者其他的python发行版，你可能需要在命令前加上<code>conda run</code>或者<code>python -m</code>，例如：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">conda run pip install pyinstaller</span><br/></pre></td></tr></tbody></table></figure><p>或者</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">python -m pip install pyinstaller</span><br/></pre></td></tr></tbody></table></figure><p>安装完成后，你可以使用<code>pyinstaller --version</code>命令来检查是否安装成功。</p><h2 id="步骤二：编写一个简单的python程序"><a href="https://mxts.jiujiuer.xyz/2023/05/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E4%BD%BF%E7%94%A8PyInstaller%E6%89%93%E5%8C%85Python%E7%A8%8B%E5%BA%8F/#%E6%AD%A5%E9%AA%A4%E4%BA%8C%EF%BC%9A%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84python%E7%A8%8B%E5%BA%8F" class="headerlink" title="步骤二：编写一个简单的python程序"></a>步骤二：编写一个简单的python程序</h2><p>为了演示如何使用pyinstaller打包python项目，我们先编写一个简单的python程序，它只是在控制台输出一句话。我们将这个程序命名为<code>hello.py</code>，并保存在一个名为<code>hello</code>的文件夹中。代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#34;Hello, world!&#34;</span>)</span><br/></pre></td></tr></tbody></table></figure><h2 id="步骤三：使用pyinstaller打包程序"><a href="https://mxts.jiujiuer.xyz/2023/05/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E4%BD%BF%E7%94%A8PyInstaller%E6%89%93%E5%8C%85Python%E7%A8%8B%E5%BA%8F/#%E6%AD%A5%E9%AA%A4%E4%B8%89%EF%BC%9A%E4%BD%BF%E7%94%A8pyinstaller%E6%89%93%E5%8C%85%E7%A8%8B%E5%BA%8F" class="headerlink" title="步骤三：使用pyinstaller打包程序"></a>步骤三：使用pyinstaller打包程序</h2><p>接下来，我们使用pyinstaller来打包我们的程序。打开命令行窗口，并切换到我们的项目文件夹<code>hello</code>中。然后，输入以下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">pyinstaller hello.py</span><br/></pre></td></tr></tbody></table></figure><p>这个命令会在当前文件夹中生成两个新的文件夹：<code>build</code>和<code>dist</code>。<code>build</code>文件夹中存放了打包过程中生成的临时文件，我们不需要关心它。<code>dist</code>文件夹中存放了我们的可执行文件，以及一些依赖的库文件。我们可以进入<code>dist\hello</code>文件夹中，双击运行<code>hello.exe</code>文件，就可以看到控制台输出了“Hello, world!”。</p><h2 id="步骤四：优化打包结果"><a href="https://mxts.jiujiuer.xyz/2023/05/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E4%BD%BF%E7%94%A8PyInstaller%E6%89%93%E5%8C%85Python%E7%A8%8B%E5%BA%8F/#%E6%AD%A5%E9%AA%A4%E5%9B%9B%EF%BC%9A%E4%BC%98%E5%8C%96%E6%89%93%E5%8C%85%E7%BB%93%E6%9E%9C" class="headerlink" title="步骤四：优化打包结果"></a>步骤四：优化打包结果</h2><p>我们已经成功地使用pyinstaller打包了我们的程序，但是我们会发现，我们的可执行文件有很多依赖的库文件，这使得我们的程序占用了很多空间，并且不方便分发和运行。为了优化我们的打包结果，我们可以使用一些参数来控制pyinstaller的行为。以下是一些常用的参数：</p><ul><li><code>-F</code>或者<code>--onefile</code>：这个参数会让pyinstaller将所有的依赖文件打包成一个单独的可执行文件，这样就可以减少文件数量和空间占用，并且方便分发和运行。</li><li><code>-w</code>或者<code>--windowed</code>：这个参数会让pyinstaller将程序打包成一个没有控制台窗口的图形界面程序，这样就可以避免出现黑色的控制台窗口，并且提高用户体验。</li><li><code>-i &lt;icon_file&gt;</code>或者<code>--icon=&lt;icon_file&gt;</code>：这个参数会让pyinstaller将指定的图标文件作为可执行文件的图标，这样就可以自定义程序的外观，并且增加识别度。</li><li><code>--name=&lt;name&gt;</code>：这个参数会让pyinstaller将指定的名称作为可执行文件的名称，而不是默认使用源代码文件的名称。</li></ul><p>例如，如果我们想要将我们的程序打包成一个单独的图形界面程序，并且使用自定义的图标和名称，我们可以输入以下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">pyinstaller -F -w -i hello.ico --name Hello hello.py</span><br/></pre></td></tr></tbody></table></figure><p>这个命令会在<code>dist</code>文件夹中生成一个名为<code>Hello.exe</code>的可执行文件，并且使用了我们指定的图标。我们可以双击运行它，就可以看到没有控制台窗口，并且输出了“Hello, world!”。</p><h2 id="常见问题及解决方法"><a href="https://mxts.jiujiuer.xyz/2023/05/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E4%BD%BF%E7%94%A8PyInstaller%E6%89%93%E5%8C%85Python%E7%A8%8B%E5%BA%8F/#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95" class="headerlink" title="常见问题及解决方法"></a>常见问题及解决方法</h2><p>在使用pyinstaller打包python项目时，可能会遇到一些问题和错误。以下是一些常见问题及解决方法：</p><ul><li>问题：打包后运行程序时出现错误提示“Failed to execute script xxx”。</li><li>解决方法：这个问题可能是由于缺少某些依赖库或者模块导致的。我们可以使用以下命令来查看错误日志：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">hello.exe --debug all</span><br/></pre></td></tr></tbody></table></figure><p>然后根据日志中提示的缺少哪些库或者模块，我们可以使用以下参数来手动指定它们：</p><ul><li><code>--hidden-import=&lt;module_name&gt;</code>：这个参数会让pyinstaller强制导入指定的模块，即使它们没有被源代码显式导入。</li><li><code>--add-data &lt;src;dest&gt;</code>：这个参数会让pyinstaller将指定的数据文件或者目录复制到可执行文件所在目录中，并且保持相对路径不变。</li><li><code>--add-binary &lt;src;dest&gt;</code>：这个参数会让pyinstaller将指定的二进制文件或者目录复制到可执行文件所在目录中，并且保持相对路径不变。</li></ul><p>例如，如果我们发现缺少了numpy模块和data目录，我们可以输入以下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">pyinstaller --hidden-import numpy --add-data data;. hello.py</span><br/></pre></td></tr></tbody></table></figure><ul><li><p>问题：打包后运行程序时出现错误提示“ImportError: DLL load failed while importing xxx”。</p></li><li><p>解决方法：这个问题可能是由于某些DLL文件没有被正确地复制或者加载导致的。我们可以尝试以下方法来解决：</p><ul><li><p>确保安装了最新版本的Microsoft Visual C++ Redistributable Package。</p></li><li><p>确保源代码中没有使用相对路径来导入模块或者加载数据。</p></li><li><p>确保源代码中没有使用os.environ[‘PATH’]来修改环境变量。</p></li><li><p>使用以下参数来手动指定DLL文件或者目录：</p><ul><li><code>--paths &lt;path&gt;</code>：这个参数会让pyinstaller在寻找模块和DLL时添加指定的路径。</li><li><code>--add-binary &lt;src;dest&gt;</code>：这个参数会让pyinstaller将指定的二进制文件或者目录复制到可执行文件所在目录中，并且保持相对路径不变。</li></ul><p>例如，如果我们发现缺少了libzmq.dll文件，并且它位于C:\Python\Lib\site-packages\zmq目录下，我们可以输入以下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">pyinstaller --paths C:\Python\Lib\site-packages\zmq --add-binary C:\Python\Lib\site-packages\zmq\libzmq.dll;. hello.py</span><br/></pre></td></tr></tbody></table></figure></li></ul></li></ul></body></html>