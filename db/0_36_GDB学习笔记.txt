<html><head></head><body><p>GDB（GNU Debug Bridge）是一个二进制程序调试工具，适用于调试C和C++程序。这种二进制程序工具统称为bin-utils。类似的还有<code>strace</code>，一个跟踪程序系统调用的工具。</p><h2 id="快速上手"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B" class="headerlink" title="快速上手"></a>快速上手</h2><p>在此之前，编译程序时记得加上<code>-g</code>参数来生成调试信息。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">gcc main.c -g -o main</span><br/></pre></td></tr></tbody></table></figure><p>首先，使用<code>gdb &lt;program&gt;</code>启动gdb并加载程序。随后，使用<code>break main</code>在<code>main</code>函数入口设置断点，否则程序会直接执行完成。接着，使用<code>run [args]</code>执行程序并附加可选的参数。程序会在断点处停止，在这之后，就可以使用<code>next</code>（简写为<code>n</code>）或<code>step</code>单步执行，使用<code>print expr</code>打印表达式的值。完成后，用<code>quit</code>退出gdb。</p><h3 id="解释说明"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E8%A7%A3%E9%87%8A%E8%AF%B4%E6%98%8E" class="headerlink" title="解释说明"></a>解释说明</h3><ol><li>只有编译时加上了<code>-g</code>，gdb才能进行调试</li><li><code>next</code>表示执行下一条语句而不进入函数内部；<code>step</code>则会进入函数内部</li><li><code>print expr</code>可以输出表达式的值，一次一个参数。例如查看数组arr的第i个元素可以用<code>print arr[i]</code></li></ol><h2 id="GDB的几种模式"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#GDB%E7%9A%84%E5%87%A0%E7%A7%8D%E6%A8%A1%E5%BC%8F" class="headerlink" title="GDB的几种模式"></a>GDB的几种模式</h2><p>GDB有多种模式，包括交互模式、批处理模式、远程调试模式等。交互模式是最常用的模式，用户可以在命令行界面中输入命令与GDB交互。批处理模式可以在不人工干预的情况下执行一系列GDB命令，通常用于自动化测试和调试。远程调试模式可以在远程主机上调试程序，通常用于嵌入式系统和分布式系统的调试。</p><ul><li><code>交互模式</code> 是最常用的模式，用户可以在命令行界面中输入命令与GDB交互。进入交互模式的方法是在命令行中输入<code>gdb &lt;program&gt;</code>，其中<code>&lt;program&gt;</code>是要调试的程序的可执行文件。交互模式的作用是让用户能够在程序执行过程中控制程序的执行，查看程序的状态，以及调试程序的错误。基本使用方法包括设置断点、运行程序、单步执行、打印变量值、查看函数调用栈等。</li><li><code>批处理模式</code> 可以在不人工干预的情况下执行一系列GDB命令，通常用于自动化测试和调试。进入批处理模式的方法是在命令行中输入<code>gdb -batch -x &lt;script&gt; &lt;program&gt;</code>，其中<code>&lt;script&gt;</code>是包含GDB命令的脚本文件，<code>&lt;program&gt;</code>是要调试的程序的可执行文件。批处理模式的作用是让用户能够自动化执行一系列GDB命令，以便进行自动化测试和调试。基本使用方法包括设置断点、运行程序、单步执行、打印变量值、查看函数调用栈等。</li><li><code>远程调试模式</code> 可以在远程主机上调试程序，通常用于嵌入式系统和分布式系统的调试。进入远程调试模式的方法是在命令行中输入<code>gdb &lt;program&gt;</code>，然后使用<code>target remote &lt;host&gt;:&lt;port&gt;</code>命令连接到远程主机，其中<code>&lt;host&gt;</code>是远程主机的IP地址或主机名，<code>&lt;port&gt;</code>是远程主机上GDB服务器的端口号。</li></ul><p>GDB的软件结构可以分为以下几个部分：</p><ol><li>前端：用户与GDB交互的界面，可以是命令行界面或者GUI界面。</li><li>后端：GDB的核心部分，负责解析用户输入的命令，控制程序的执行，以及与目标程序进行通信。</li><li>目标：被调试的程序，GDB通过与目标程序进行通信来控制其执行。</li></ol><h2 id="常用指令"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4" class="headerlink" title="常用指令"></a>常用指令</h2><p>以下是GDB常用的指令：</p><ul><li><code>break</code>：设置断点</li><li><code>run</code>：运行程序</li><li><code>next</code>（简写为<code>n</code>）：执行下一条语句而不进入函数内部</li><li><code>step</code>（简写为<code>s</code>）：进入函数内部</li><li><code>print</code>（简写为<code>p</code>）：打印表达式的值</li><li><code>backtrace</code>（简写为<code>bt</code>）：打印函数调用栈</li><li><code>info</code>：显示各种信息，如变量、寄存器、线程等</li><li><code>watch</code>：设置观察点，当观察的变量被修改时停止程序执行</li><li><code>continue</code>（简写为<code>c</code>）：继续执行程序直到下一个断点或程序结束</li><li><code>finish</code>：执行完当前函数并返回到调用该函数的地方</li><li><code>set</code>：设置变量的值</li><li><code>display</code>：每次停在断点处时自动打印表达式的值</li><li><code>disable</code>：禁用断点或观察点</li><li><code>enable</code>：启用断点或观察点</li><li><code>delete</code>：删除断点或观察点</li></ul><h2 id="高级功能"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD" class="headerlink" title="高级功能"></a>高级功能</h2><p>除了常用指令外，GDB还有一些高级功能：</p><h3 id="多线程调试"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%B0%83%E8%AF%95" class="headerlink" title="多线程调试"></a>多线程调试</h3><p>GDB支持多线程调试。可以使用<code>info threads</code>命令查看当前线程列表，使用<code>thread &lt;id&gt;</code>命令切换到指定线程，使用<code>break &lt;func&gt; thread &lt;id&gt;</code>命令在指定线程中设置断点。</p><p>例如，我们有一个多线程程序<code>test</code>，其中有两个线程<code>thread1</code>和<code>thread2</code>，我们想在<code>thread2</code>中设置断点。首先，使用<code>gdb test</code>命令启动gdb并加载程序。接着，使用<code>run</code>命令运行程序。程序会在主线程中停止，使用<code>info threads</code>命令查看当前线程列表，找到<code>thread2</code>的ID。假设<code>thread2</code>的ID为2，使用<code>thread 2</code>命令切换到<code>thread2</code>，使用<code>break &lt;func&gt; thread 2</code>命令在<code>thread2</code>中设置断点。完成后，使用<code>continue</code>命令继续执行程序，程序会在断点处停止。</p><h3 id="远程调试"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95" class="headerlink" title="远程调试"></a>远程调试</h3><p>GDB支持远程调试，可以使用<code>target remote &lt;host&gt;:&lt;port&gt;</code>连接到远程主机，使用<code>file &lt;path&gt;</code>加载可执行文件，使用<code>run</code>运行程序。</p><h3 id="调试核心转储文件"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E8%B0%83%E8%AF%95%E6%A0%B8%E5%BF%83%E8%BD%AC%E5%82%A8%E6%96%87%E4%BB%B6" class="headerlink" title="调试核心转储文件"></a>调试核心转储文件</h3><p>当程序崩溃时，可以使用GDB调试核心转储文件。可以使用<code>core &lt;file&gt;</code>命令加载核心转储文件，使用<code>bt</code>命令查看函数调用栈。</p><h3 id="调试动态链接库"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E8%B0%83%E8%AF%95%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93" class="headerlink" title="调试动态链接库"></a>调试动态链接库</h3><p>GDB可以调试动态链接库，可以使用<code>set solib-search-path &lt;path&gt;</code>设置动态链接库搜索路径，使用<code>info sharedlibrary</code>查看已加载的动态链接库，使用<code>break &lt;func&gt;</code>在动态链接库中设置断点。</p><h3 id="调试汇编代码"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E8%B0%83%E8%AF%95%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81" class="headerlink" title="调试汇编代码"></a>调试汇编代码</h3><p>GDB可以调试汇编代码，可以使用<code>layout asm</code>查看汇编代码窗口，使用<code>stepi</code>单步执行汇编指令，使用<code>disassemble &lt;func&gt;</code>查看函数的汇编代码。</p><h3 id="调试嵌入式系统"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E8%B0%83%E8%AF%95%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F" class="headerlink" title="调试嵌入式系统"></a>调试嵌入式系统</h3><p>GDB可以调试嵌入式系统，可以使用<code>target remote &lt;host&gt;:&lt;port&gt;</code>连接到嵌入式系统，使用<code>set remotebaud &lt;baud&gt;</code>设置串口波特率，使用<code>monitor reset</code>复位嵌入式系统，使用<code>load</code>加载可执行文件，使用<code>run</code>运行程序。</p><h3 id="调试内核"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E8%B0%83%E8%AF%95%E5%86%85%E6%A0%B8" class="headerlink" title="调试内核"></a>调试内核</h3><p>GDB可以调试内核，可以使用<code>target remote &lt;host&gt;:&lt;port&gt;</code>连接到内核，使用<code>set architecture &lt;arch&gt;</code>设置架构，使用<code>set osabi &lt;osabi&gt;</code>设置操作系统ABI，使用<code>set solib-absolute-prefix &lt;path&gt;</code>设置动态链接库路径，使用<code>add-symbol-file &lt;file&gt; &lt;addr&gt;</code>加载符号文件，使用<code>break &lt;func&gt;</code>在内核中设置断点。</p><h3 id="调试追踪系统调用"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E8%B0%83%E8%AF%95%E8%BF%BD%E8%B8%AA%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8" class="headerlink" title="调试追踪系统调用"></a>调试追踪系统调用</h3><p>GDB可以调试追踪系统调用，可以使用<code>catch syscall &lt;syscall&gt;</code>设置系统调用断点，使用<code>info catch</code>查看系统调用断点，使用<code>stepi</code>单步执行系统调用。</p><h3 id="调试追踪信号"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E8%B0%83%E8%AF%95%E8%BF%BD%E8%B8%AA%E4%BF%A1%E5%8F%B7" class="headerlink" title="调试追踪信号"></a>调试追踪信号</h3><p>GDB可以调试追踪信号，可以使用<code>catch signal &lt;signal&gt;</code>设置信号断点，使用<code>info catch</code>查看信号断点，使用<code>stepi</code>单步执行信号处理函数。</p><h3 id="调试追踪fork和exec"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E8%B0%83%E8%AF%95%E8%BF%BD%E8%B8%AAfork%E5%92%8Cexec" class="headerlink" title="调试追踪fork和exec"></a>调试追踪fork和exec</h3><p>GDB可以调试追踪fork和exec，可以使用<code>set follow-fork-mode &lt;mode&gt;</code>设置fork和exec的跟踪模式，使用<code>catch fork</code>设置fork断点，使用<code>catch exec</code>设置exec断点，使用<code>info catch</code>查看fork和exec断点。</p><h3 id="调试追踪动态内存分配"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E8%B0%83%E8%AF%95%E8%BF%BD%E8%B8%AA%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D" class="headerlink" title="调试追踪动态内存分配"></a>调试追踪动态内存分配</h3><p>GDB可以调试追踪动态内存分配，可以使用<code>catch syscall brk</code>设置brk系统调用断点，使用<code>catch syscall sbrk</code>设置sbrk系统调用断点，使用<code>info catch</code>查看brk和sbrk断点。</p><h3 id="调试追踪文件操作"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E8%B0%83%E8%AF%95%E8%BF%BD%E8%B8%AA%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C" class="headerlink" title="调试追踪文件操作"></a>调试追踪文件操作</h3><p>GDB可以调试追踪文件操作，可以使用<code>catch syscall open</code>设置open系统调用断点，使用<code>catch syscall close</code>设置close系统调用断点，使用<code>catch syscall read</code>设置read系统调用断点，使用<code>catch syscall write</code>设置write系统调用断点，使用<code>info catch</code>查看文件操作断点。</p><h3 id="调试追踪网络操作"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E8%B0%83%E8%AF%95%E8%BF%BD%E8%B8%AA%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C" class="headerlink" title="调试追踪网络操作"></a>调试追踪网络操作</h3><p>GDB可以调试追踪网络操作，可以使用<code>catch syscall socket</code>设置socket系统调用断点，使用<code>catch syscall connect</code>设置connect系统调用断点，使用<code>catch syscall accept</code>设置accept系统调用断点，使用<code>catch syscall send</code>设置send系统调用断点，使用<code>catch syscall recv</code>设置recv系统调用断点，使用<code>info catch</code>查看网络操作断点。</p><h3 id="调试追踪信号量和共享内存"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E8%B0%83%E8%AF%95%E8%BF%BD%E8%B8%AA%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%92%8C%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98" class="headerlink" title="调试追踪信号量和共享内存"></a>调试追踪信号量和共享内存</h3><p>GDB可以调试追踪信号量和共享内存，可以使用<code>catch syscall semop</code>设置semop系统调用断点，使用<code>catch syscall semget</code>设置semget系统调用断点，使用<code>catch syscall semctl</code>设置semctl系统调用断点，使用<code>catch syscall shmget</code>设置shmget系统调用断点，使用<code>catch syscall shmat</code>设置shmat系统调用断点，使用<code>catch syscall shmdt</code>设置shmdt系统调用断点，使用<code>catch syscall shmctl</code>设置shmctl系统调用断点，使用<code>info catch</code>查看信号量和共享内存断点。</p><h3 id="调试追踪进程间通信"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E8%B0%83%E8%AF%95%E8%BF%BD%E8%B8%AA%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1" class="headerlink" title="调试追踪进程间通信"></a>调试追踪进程间通信</h3><p>GDB可以调试追踪进程间通信，可以使用<code>catch syscall msgget</code>设置msgget系统调用断点，使用<code>catch syscall msgsnd</code>设置msgsnd系统调用断点，使用<code>catch syscall msgrcv</code>设置msgrcv系统调用断点，使用<code>catch syscall semget</code>设置semget系统调用断点，使用<code>catch syscall semop</code>设置semop系统调用断点，使用<code>catch syscall semctl</code>设置semctl系统调用断点，使用<code>catch syscall shmget</code>设置shmget系统调用断点，使用<code>catch syscall shmat</code>设置shmat系统调用断点，使用<code>catch syscall shmdt</code>设置shmdt系统调用断点，使用<code>catch syscall shmctl</code>设置shmctl系统调用断点，使用<code>info catch</code>查看进程间通信断点。</p><h3 id="调试追踪信号处理"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E8%B0%83%E8%AF%95%E8%BF%BD%E8%B8%AA%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86" class="headerlink" title="调试追踪信号处理"></a>调试追踪信号处理</h3><p>GDB可以调试追踪信号处理，可以使用<code>catch syscall sigaction</code>设置sigaction系统调用断点，使用<code>catch syscall sigprocmask</code>设置sigprocmask系统调用断点，使用<code>catch syscall sigsuspend</code>设置sigsuspend系统调用断点，使用<code>catch syscall sigreturn</code>设置sigreturn系统调用断点，使用<code>info catch</code>查看信号处理断点。</p><h3 id="调试追踪定时器"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E8%B0%83%E8%AF%95%E8%BF%BD%E8%B8%AA%E5%AE%9A%E6%97%B6%E5%99%A8" class="headerlink" title="调试追踪定时器"></a>调试追踪定时器</h3><p>GDB可以调试追踪定时器，可以使用<code>catch syscall timer_create</code>设置timer_create系统调用断点，使用<code>catch syscall timer_settime</code>设置timer_settime系统调用断点，使用<code>catch syscall timer_gettime</code>设置timer_gettime系统调用断点，使用<code>catch syscall timer_delete</code>设置timer_delete系统调用断点，使用<code>info catch</code>查看定时器断点。</p><h3 id="调试追踪进程状态"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E8%B0%83%E8%AF%95%E8%BF%BD%E8%B8%AA%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81" class="headerlink" title="调试追踪进程状态"></a>调试追踪进程状态</h3><p>GDB可以调试追踪进程状态，可以使用<code>catch syscall wait4</code>设置wait4系统调用断点，使用<code>catch syscall waitpid</code>设置waitpid系统调用断点，使用<code>catch syscall waitid</code>设置waitid系统调用断点，使用<code>catch syscall exit</code>设置exit系统调用断点，使用<code>catch syscall _exit</code>设置_exit系统调用断点，使用<code>catch syscall kill</code>设置kill系统调用断点，使用<code>info catch</code>查看进程状态断点。</p><h3 id="调试追踪信号量和共享内存-1"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E8%B0%83%E8%AF%95%E8%BF%BD%E8%B8%AA%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%92%8C%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98-1" class="headerlink" title="调试追踪信号量和共享内存"></a>调试追踪信号量和共享内存</h3><p>GDB可以调试追踪信号量和共享内存，可以使用<code>catch syscall semop</code>设置semop系统调用断点，使用<code>catch syscall semget</code>设置semget系统调用断点，使用<code>catch syscall semctl</code>设置semctl系统调用断点，使用<code>catch syscall shmget</code>设置shmget系统调用断点，使用<code>catch syscall shmat</code>设置shmat系统调用断点，使用<code>catch syscall shmdt</code>设置shmdt系统调用断点，使用<code>catch syscall shmctl</code>设置shmctl系统调用断点，使用<code>info catch</code>查看信号量和共享内存断点。</p><h3 id="调试追踪进程间通信-1"><a href="https://mxts.jiujiuer.xyz/2023/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/GDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E8%B0%83%E8%AF%95%E8%BF%BD%E8%B8%AA%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1-1" class="headerlink" title="调试追踪进程间通信"></a>调试追踪进程间通信</h3><p>GDB可以调试追踪进程间通信，可以使用<code>catch syscall msgget</code>设置msgget系统调用断点，使用<code>catch syscall msgsnd</code>设置msgsnd系统调用断点，使用<code>catch syscall msgrcv</code>设置msgrcv系统调用断点，使用<code>catch syscall semget</code>设置semget系统调用断点，使用<code>catch syscall semop</code>设置semop系统调用断点，使用<code>catch syscall semctl</code>设置semctl系统调用断点，使用<code>catch syscall shmget</code>设置shmget系统调用断点，使用<code>catch syscall shmat</code>设置shmat系统调用断点，使用<code>catch syscall shmdt</code>设置shmdt系统调用断点，使用<code>catch syscall shmctl</code>设置shmctl系统调用断点，使用<code>info catch</code>查看进程间通信断点。</p></body></html>