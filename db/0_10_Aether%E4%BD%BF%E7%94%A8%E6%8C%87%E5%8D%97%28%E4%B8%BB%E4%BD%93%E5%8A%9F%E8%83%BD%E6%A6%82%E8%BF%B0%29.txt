<html><head></head><body><p>相关文章：《<a href="https://xiue233.github.io/2023/09/05/aether-in-android/" title="Aether在Android中的适配探索">Aether在Android中的适配探索</a>》</p><p><strong>本文所用Aether版本为1.1.0。</strong></p><h2 id="Get-Started"><a href="https://xiue233.github.io/2023/09/09/aether-manual/#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h2><p>Aether作为一个具有依赖注入(Dependency Injection)设计思想的库，它的主体System只能接受所依赖工具的interface实现，所以我们在调用前需要完成所需工具类的初始化(或是指定类，由Aether进行主动实例化)。</p><p>Aether提供了<code>org.apache.maven.repository.internal.MavenRepositorySystemUtils</code>工具类以方便快速配置，虽然但是，我们仍需创建一个Factory来封装完整的初始化逻辑。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.maven.repository.internal.MavenRepositorySystemUtils;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.connector.wagon.WagonProvider;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.connector.wagon.WagonRepositoryConnectorFactory;</span><br/><span class="line"></span><br/><span class="line">...</span><br/><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RepositorySystem <span class="title function_">newRepositorySystem</span><span class="params">()</span></span><br/><span class="line">    {</span><br/><span class="line">        <span class="type">DefaultServiceLocator</span> <span class="variable">locator</span> <span class="operator">=</span> MavenRepositorySystemUtils.newServiceLocator();</span><br/><span class="line">        locator.addService( RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class );</span><br/><span class="line">        locator.addService( TransporterFactory.class, FileTransporterFactory.class );</span><br/><span class="line">        locator.addService( TransporterFactory.class, HttpTransporterFactory.class );</span><br/><span class="line"></span><br/><span class="line">        <span class="keyword">return</span> locator.getService( RepositorySystem.class );</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RepositorySystemSession <span class="title function_">newSession</span><span class="params">( RepositorySystem system )</span></span><br/><span class="line">    {</span><br/><span class="line">        <span class="type">DefaultRepositorySystemSession</span> <span class="variable">session</span> <span class="operator">=</span> MavenRepositorySystemUtils.newSession();</span><br/><span class="line"></span><br/><span class="line">        <span class="type">LocalRepository</span> <span class="variable">localRepo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocalRepository</span>(<span class="string">&#34;依赖库文件储存路径&#34;</span>);</span><br/><span class="line">        session.setLocalRepositoryManager(system.newLocalRepositoryManager(session,localRepo));</span><br/><span class="line"></span><br/><span class="line">        <span class="keyword">return</span> session;</span><br/><span class="line">    }</span><br/><span class="line">...</span><br/></pre></td></tr></tbody></table></figure><p>完成初始化逻辑封装后，假如需要下载一个远程依赖(例如,<code>org.apache.maven:maven-profile:2.2.1</code>)我们只需:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span></span><br/><span class="line">        <span class="keyword">throws</span> Exception</span><br/><span class="line">    {</span><br/><span class="line">        <span class="type">RepositorySystem</span> <span class="variable">repoSystem</span> <span class="operator">=</span> newRepositorySystem();</span><br/><span class="line"></span><br/><span class="line">        <span class="type">RepositorySystemSession</span> <span class="variable">session</span> <span class="operator">=</span> newSession( repoSystem );</span><br/><span class="line"></span><br/><span class="line">        <span class="type">Dependency</span> <span class="variable">dependency</span> <span class="operator">=</span></span><br/><span class="line">            <span class="keyword">new</span> <span class="title class_">Dependency</span>( <span class="keyword">new</span> <span class="title class_">DefaultArtifact</span>( <span class="string">&#34;org.apache.maven:maven-profile:2.2.1&#34;</span> ), <span class="string">&#34;compile&#34;</span> );</span><br/><span class="line">        <span class="type">RemoteRepository</span> <span class="variable">central</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteRepository</span>.Builder( <span class="string">&#34;central&#34;</span>, <span class="string">&#34;default&#34;</span>, <span class="string">&#34;http://repo1.maven.org/maven2/&#34;</span> ).build();</span><br/><span class="line"></span><br/><span class="line">        <span class="type">CollectRequest</span> <span class="variable">collectRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CollectRequest</span>();</span><br/><span class="line">        collectRequest.setRoot( dependency );</span><br/><span class="line">        collectRequest.addRepository( central );</span><br/><span class="line">        <span class="type">DependencyNode</span> <span class="variable">node</span> <span class="operator">=</span> repoSystem.collectDependencies( session, collectRequest ).getRoot();</span><br/><span class="line"></span><br/><span class="line">        <span class="type">DependencyRequest</span> <span class="variable">dependencyRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DependencyRequest</span>();</span><br/><span class="line">        dependencyRequest.setRoot( node );</span><br/><span class="line"></span><br/><span class="line">        repoSystem.resolveDependencies( session, dependencyRequest  );</span><br/><span class="line"></span><br/><span class="line">        <span class="type">PreorderNodeListGenerator</span> <span class="variable">nlg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PreorderNodeListGenerator</span>();</span><br/><span class="line">        node.accept( nlg );</span><br/><span class="line">        System.out.println( nlg.getClassPath() );</span><br/><span class="line">    }</span><br/></pre></td></tr></tbody></table></figure><p>运行后，便可在设置的本地仓库(Local Repository)文件夹下找到已下载的依赖库文件。</p><p>具体代码的内容也很清晰易懂：<br/>首先，Factory完成的是仓库连接与传输、本地仓库缓存的配置设置；</p><p>在main()方法内，初始化system(Repository系统及其功能的主要入口点)以及session(定义控制Repository系统的设置和组件)，再创建一个Dependency(需要下载的依赖)；</p><p>依赖必定需要从MavenRepository内查找，所以我们还需要RemoteRepository作为指定的远程仓库(注意：RemoteRepository可以同时添加多个，会依次查找)；</p><p>进行Dependency的下载前，需要构建其依赖关系树，以下载其及其所需子依赖，构建依赖关系树前需要查询，则下一步进行的是CollectRequest，设置其rootDependency为所需依赖(必定为依赖树的root)，并添加需要查找的RemoteRepository；</p><p>下一步即为依赖树的构建，repoSystem.collectDependencies()获取DependencyResult,再调用DependencyResult.getRoot()获取树的根节点，得到依赖树；</p><p>DependencyRequest用于初始化一个Dependency下载请求，设置root为刚刚得到的依赖树根节点即可，调用RepositorySystem.resolveDependencies(session,dependencyRequest)即可进行下载工作。可能会比较疑惑下载到哪里了，实际上可以知道在newSystemSession()方法内，我们进行session的初始化时已经设置了LocalRepository作为本地仓库，即缓存文件存放位置。</p><p>Tips: 最后的PreorderNodeListGenerator实质上不会对依赖下载产生影响，只是官方提供的一个遍历依赖树的示例。</p><h2 id="Aether开发逻辑介绍"><a href="https://xiue233.github.io/2023/09/09/aether-manual/#Aether%E5%BC%80%E5%8F%91%E9%80%BB%E8%BE%91%E4%BB%8B%E7%BB%8D" class="headerlink" title="Aether开发逻辑介绍"></a>Aether开发逻辑介绍</h2><p>API部分建议自行浏览Aether的源代码，只需要了解基本的开发逻辑，则根据名字以及注释很容易上手。</p><ul><li>Aether使用的是依赖注入(Dependency Injection)这一设计模式，在使用RepositorySystem之前，必须从DefaultServiceLocator中进行初始化。DefaultServiceLocator在初始化时便以默认配置了需要类，我们按需添加缺失的必要类即可。在完成配置之后，Aether会通过DefaultServiceLocator.getService()方法得到需要的interface(当然是已经实例化的)，所以我们可以通过addService()在不修改Aether代码的情况下，更改一些核心逻辑，实现高度的自定义化；同时需要强调的是，我们也应该通过DefaultServiceLocator.getService()进行所需interface的获取。</li><li>Aether的所有操作基本上都是先创建一个XxxRequest，然后通过System执行对应的操作逻辑，结果是返回一个XxxResult。例如，Get Started代码中main()方法内的CollectRequest和DependencyRequest。且XxxRequest为Final Class，自行初始化即可。</li><li>特别注意，RepositorySystem需要通过DefaultServiceLocator得到的，通过依赖注入，RepositorySystem会自动获取DefaultServiceLocator中所需要的类；RepositorySystemSession则是配置信息的载体，需要自己通过代码设置配置信息。</li></ul><h2 id="常见操作需求"><a href="https://xiue233.github.io/2023/09/09/aether-manual/#%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%E9%9C%80%E6%B1%82" class="headerlink" title="常见操作需求"></a>常见操作需求</h2><h3 id="下载Dependency"><a href="https://xiue233.github.io/2023/09/09/aether-manual/#%E4%B8%8B%E8%BD%BDDependency" class="headerlink" title="下载Dependency"></a>下载Dependency</h3><p>见 <a href="https://xiue233.github.io/2023/09/09/aether-manual/#get-started">Get Started</a> 不再赘述。</p><h3 id="获取某一Artifact的缓存路径"><a href="https://xiue233.github.io/2023/09/09/aether-manual/#%E8%8E%B7%E5%8F%96%E6%9F%90%E4%B8%80Artifact%E7%9A%84%E7%BC%93%E5%AD%98%E8%B7%AF%E5%BE%84" class="headerlink" title="获取某一Artifact的缓存路径"></a>获取某一Artifact的缓存路径</h3><ol><li>通过RepositorySystemSession.getLocalRepositoryManager()获取LocalRepositoryManager;</li><li>调用LocalRepositoryManager.getPathForLocalArtifact()</li></ol><h2 id="常见Model的初始化"><a href="https://xiue233.github.io/2023/09/09/aether-manual/#%E5%B8%B8%E8%A7%81Model%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96" class="headerlink" title="常见Model的初始化"></a>常见Model的初始化</h2><ol><li>Artifact<br/>调用DefaultArtifact的构造方法即可，需要传入coords(坐标，诸如org.apache.maven:maven-profile:2.2.1格式)，也有其他构造方法，具体自行浏览API。</li><li>Dependency<br/>调用Dependency的构造方法，并传入Artifact及scope(<a href="https://www.baeldung.com/maven-dependency-scopes">Maven Scope</a>)等参数即可。</li></ol><h2 id="常见问题-已解决"><a href="https://xiue233.github.io/2023/09/09/aether-manual/#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98-%E5%B7%B2%E8%A7%A3%E5%86%B3" class="headerlink" title="常见问题(已解决)"></a>常见问题(已解决)</h2><h3 id="无法自动识别依赖文件类型为AAR的Artifact"><a href="https://xiue233.github.io/2023/09/09/aether-manual/#%E6%97%A0%E6%B3%95%E8%87%AA%E5%8A%A8%E8%AF%86%E5%88%AB%E4%BE%9D%E8%B5%96%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E4%B8%BAAAR%E7%9A%84Artifact" class="headerlink" title="无法自动识别依赖文件类型为AAR的Artifact"></a>无法自动识别依赖文件类型为AAR的Artifact</h3><p>因为我的初衷是用在android ide上，下载aar文件是不可避免的，但是从<code>org.eclipse.aether.artifact.DefaultArtifact</code>的构造方法可以看到(见下面的代码)，默认的extension是jar，并且extension是final修饰的。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/></pre></td><td class="code"><pre><span class="line">...</span><br/><span class="line">    <span class="keyword">public</span> <span class="title function_">DefaultArtifact</span><span class="params">(String coords, Map&lt;String, String&gt; properties)</span> {</span><br/><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> COORDINATE_PATTERN.matcher(coords);</span><br/><span class="line">        <span class="keyword">if</span> (!m.matches()) {</span><br/><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&#34;Bad artifact coordinates &#34;</span> + coords</span><br/><span class="line">                    + <span class="string">&#34;, expected format is &lt;groupId&gt;:&lt;artifactId&gt;[:&lt;extension&gt;[:&lt;classifier&gt;]]:&lt;version&gt;&#34;</span>);</span><br/><span class="line">        }</span><br/><span class="line">        groupId = m.group(<span class="number">1</span>);</span><br/><span class="line">        artifactId = m.group(<span class="number">2</span>);</span><br/><span class="line">        extension = get(m.group(<span class="number">4</span>), <span class="string">&#34;jar&#34;</span>); <span class="comment">//this line</span></span><br/><span class="line">        classifier = get(m.group(<span class="number">6</span>), <span class="string">&#34;&#34;</span>);</span><br/><span class="line">        version = m.group(<span class="number">7</span>);</span><br/><span class="line">        file = <span class="literal">null</span>;</span><br/><span class="line">        <span class="built_in">this</span>.properties = copyProperties(properties);</span><br/><span class="line">    }</span><br/><span class="line">...</span><br/></pre></td></tr></tbody></table></figure><p>可能到这里会想，那就在coords里指明extension不就可以了吗？很遗憾，测试后，你会发现这个根依赖倒是下载了，但是其子依赖仍然无法正确的识别文件类型。</p><p>接下来我们从源码的层面分析一下：</p><p>首先，根据上文的研究，Collect阶段会进行依赖树的构建，我们以此为入口，分析子依赖的构建过程。需要注意的是interface对应的默认impl类为DefaultXxx，比如RepositorySystem对应的默认impl类为DefaultRepositorySystem。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.eclipse.aether.internal.impl;</span><br/><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultRepositorySystem</span> <span class="keyword">implements</span> <span class="title class_">RepositorySystem</span>, Service {</span><br/><span class="line">    ...</span><br/><span class="line">    <span class="meta">@Override</span></span><br/><span class="line">    <span class="keyword">public</span> CollectResult <span class="title function_">collectDependencies</span><span class="params">(RepositorySystemSession session, CollectRequest request)</span></span><br/><span class="line">            <span class="keyword">throws</span> DependencyCollectionException {</span><br/><span class="line">        validateSession(session);</span><br/><span class="line">        requireNonNull(request, <span class="string">&#34;request cannot be null&#34;</span>);</span><br/><span class="line"></span><br/><span class="line">        <span class="keyword">return</span> dependencyCollector.collectDependencies(session, request);</span><br/><span class="line">    }</span><br/><span class="line">    ...</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>可以看到dependencyCollector.collectDependencies()执行了具体的操作，从dependencyCollector的初始化代码以及DefaultServiceLocator的相关代码，得知默认impl类为org.eclipse.aether.internal.impl.collect.DefaultDependencyCollector，继续往下追踪。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultDependencyCollector</span> <span class="keyword">implements</span> <span class="title class_">DependencyCollector</span>, Service {</span><br/><span class="line">    ...</span><br/><span class="line">    <span class="meta">@Override</span></span><br/><span class="line">    <span class="keyword">public</span> CollectResult <span class="title function_">collectDependencies</span><span class="params">(RepositorySystemSession session, CollectRequest request)</span></span><br/><span class="line">            <span class="keyword">throws</span> DependencyCollectionException {</span><br/><span class="line">        <span class="type">String</span> <span class="variable">delegateName</span> <span class="operator">=</span> ConfigUtils.getString(session, DEFAULT_COLLECTOR_IMPL, CONFIG_PROP_COLLECTOR_IMPL);</span><br/><span class="line">        <span class="type">DependencyCollectorDelegate</span> <span class="variable">delegate</span> <span class="operator">=</span> delegates.get(delegateName);</span><br/><span class="line">        <span class="keyword">if</span> (delegate == <span class="literal">null</span>) {</span><br/><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br/><span class="line">                    <span class="string">&#34;Unknown collector impl: &#39;&#34;</span> + delegateName + <span class="string">&#34;&#39;, known implementations are &#34;</span> + delegates.keySet());</span><br/><span class="line">        }</span><br/><span class="line">        <span class="keyword">return</span> delegate.collectDependencies(session, request);</span><br/><span class="line">    }</span><br/><span class="line">    ...</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>好好好，继续套娃操作，看代码知默认是深度优先<code>org.eclipse.aether.internal.impl.collect.df.DfDependencyCollector</code>，并且DependencyCollectorDelegate会利用collectDependencies()包装了DependencyCollector.doCollectDependencies()方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/><span class="line">42</span><br/><span class="line">43</span><br/><span class="line">44</span><br/><span class="line">45</span><br/><span class="line">46</span><br/><span class="line">47</span><br/><span class="line">48</span><br/><span class="line">49</span><br/><span class="line">50</span><br/><span class="line">51</span><br/><span class="line">52</span><br/><span class="line">53</span><br/><span class="line">54</span><br/><span class="line">55</span><br/><span class="line">56</span><br/><span class="line">57</span><br/><span class="line">58</span><br/><span class="line">59</span><br/><span class="line">60</span><br/><span class="line">61</span><br/><span class="line">62</span><br/><span class="line">63</span><br/><span class="line">64</span><br/><span class="line">65</span><br/><span class="line">66</span><br/><span class="line">67</span><br/><span class="line">68</span><br/><span class="line">69</span><br/><span class="line">70</span><br/><span class="line">71</span><br/><span class="line">72</span><br/><span class="line">73</span><br/><span class="line">74</span><br/><span class="line">75</span><br/><span class="line">76</span><br/><span class="line">77</span><br/><span class="line">78</span><br/><span class="line">79</span><br/><span class="line">80</span><br/><span class="line">81</span><br/><span class="line">82</span><br/><span class="line">83</span><br/><span class="line">84</span><br/><span class="line">85</span><br/><span class="line">86</span><br/><span class="line">87</span><br/><span class="line">88</span><br/><span class="line">89</span><br/><span class="line">90</span><br/><span class="line">91</span><br/><span class="line">92</span><br/><span class="line">93</span><br/><span class="line">94</span><br/><span class="line">95</span><br/><span class="line">96</span><br/><span class="line">97</span><br/><span class="line">98</span><br/><span class="line">99</span><br/><span class="line">100</span><br/><span class="line">101</span><br/><span class="line">102</span><br/><span class="line">103</span><br/><span class="line">104</span><br/><span class="line">105</span><br/><span class="line">106</span><br/><span class="line">107</span><br/><span class="line">108</span><br/><span class="line">109</span><br/><span class="line">110</span><br/><span class="line">111</span><br/><span class="line">112</span><br/><span class="line">113</span><br/><span class="line">114</span><br/><span class="line">115</span><br/><span class="line">116</span><br/><span class="line">117</span><br/><span class="line">118</span><br/><span class="line">119</span><br/><span class="line">120</span><br/><span class="line">121</span><br/><span class="line">122</span><br/><span class="line">123</span><br/><span class="line">124</span><br/><span class="line">125</span><br/><span class="line">126</span><br/><span class="line">127</span><br/><span class="line">128</span><br/><span class="line">129</span><br/><span class="line">130</span><br/><span class="line">131</span><br/><span class="line">132</span><br/><span class="line">133</span><br/><span class="line">134</span><br/><span class="line">135</span><br/><span class="line">136</span><br/><span class="line">137</span><br/><span class="line">138</span><br/><span class="line">139</span><br/><span class="line">140</span><br/><span class="line">141</span><br/><span class="line">142</span><br/><span class="line">143</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">DependencyCollectorDelegate</span> <span class="keyword">implements</span> <span class="title class_">DependencyCollector</span> {</span><br/><span class="line">    ...</span><br/><span class="line">    <span class="meta">@Override</span></span><br/><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> CollectResult <span class="title function_">collectDependencies</span><span class="params">(RepositorySystemSession session, CollectRequest request)</span></span><br/><span class="line">            <span class="keyword">throws</span> DependencyCollectionException {</span><br/><span class="line">        requireNonNull(session, <span class="string">&#34;session cannot be null&#34;</span>);</span><br/><span class="line">        requireNonNull(request, <span class="string">&#34;request cannot be null&#34;</span>);</span><br/><span class="line">        session = optimizeSession(session);</span><br/><span class="line"></span><br/><span class="line">        <span class="type">RequestTrace</span> <span class="variable">trace</span> <span class="operator">=</span> RequestTrace.newChild(request.getTrace(), request);</span><br/><span class="line"></span><br/><span class="line">        <span class="type">CollectResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CollectResult</span>(request);</span><br/><span class="line"></span><br/><span class="line">        <span class="type">DependencyTraverser</span> <span class="variable">depTraverser</span> <span class="operator">=</span> session.getDependencyTraverser();</span><br/><span class="line">        <span class="type">VersionFilter</span> <span class="variable">verFilter</span> <span class="operator">=</span> session.getVersionFilter();</span><br/><span class="line"></span><br/><span class="line">        <span class="type">Dependency</span> <span class="variable">root</span> <span class="operator">=</span> request.getRoot();</span><br/><span class="line">        List&lt;RemoteRepository&gt; repositories = request.getRepositories();</span><br/><span class="line">        List&lt;Dependency&gt; dependencies = request.getDependencies();</span><br/><span class="line">        List&lt;Dependency&gt; managedDependencies = request.getManagedDependencies();</span><br/><span class="line"></span><br/><span class="line">        Map&lt;String, Object&gt; stats = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br/><span class="line">        <span class="type">long</span> <span class="variable">time1</span> <span class="operator">=</span> System.nanoTime();</span><br/><span class="line"></span><br/><span class="line">        DefaultDependencyNode node;</span><br/><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) {</span><br/><span class="line">            List&lt;? <span class="keyword">extends</span> <span class="title class_">Version</span>&gt; versions;</span><br/><span class="line">            VersionRangeResult rangeResult;</span><br/><span class="line">            <span class="keyword">try</span> {</span><br/><span class="line">                <span class="type">VersionRangeRequest</span> <span class="variable">rangeRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VersionRangeRequest</span>(</span><br/><span class="line">                        root.getArtifact(), request.getRepositories(), request.getRequestContext());</span><br/><span class="line">                rangeRequest.setTrace(trace);</span><br/><span class="line">                rangeResult = versionRangeResolver.resolveVersionRange(session, rangeRequest);</span><br/><span class="line">                versions = filterVersions(root, rangeResult, verFilter, <span class="keyword">new</span> <span class="title class_">DefaultVersionFilterContext</span>(session));</span><br/><span class="line">            } <span class="keyword">catch</span> (VersionRangeResolutionException e) {</span><br/><span class="line">                result.addException(e);</span><br/><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DependencyCollectionException</span>(result, e.getMessage());</span><br/><span class="line">            }</span><br/><span class="line"></span><br/><span class="line">            <span class="type">Version</span> <span class="variable">version</span> <span class="operator">=</span> versions.get(versions.size() - <span class="number">1</span>);</span><br/><span class="line">            root = root.setArtifact(root.getArtifact().setVersion(version.toString()));</span><br/><span class="line"></span><br/><span class="line">            ArtifactDescriptorResult descriptorResult; <span class="comment">//关键代码</span></span><br/><span class="line">            <span class="keyword">try</span> {</span><br/><span class="line">                <span class="type">ArtifactDescriptorRequest</span> <span class="variable">descriptorRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArtifactDescriptorRequest</span>();</span><br/><span class="line">                descriptorRequest.setArtifact(root.getArtifact());</span><br/><span class="line">                descriptorRequest.setRepositories(request.getRepositories());</span><br/><span class="line">                descriptorRequest.setRequestContext(request.getRequestContext());</span><br/><span class="line">                descriptorRequest.setTrace(trace);</span><br/><span class="line">                <span class="keyword">if</span> (isLackingDescriptor(root.getArtifact())) {</span><br/><span class="line">                    descriptorResult = <span class="keyword">new</span> <span class="title class_">ArtifactDescriptorResult</span>(descriptorRequest);</span><br/><span class="line">                } <span class="keyword">else</span> {</span><br/><span class="line">                    descriptorResult = descriptorReader.readArtifactDescriptor(session, descriptorRequest);</span><br/><span class="line">                }</span><br/><span class="line">            } <span class="keyword">catch</span> (ArtifactDescriptorException e) {</span><br/><span class="line">                result.addException(e);</span><br/><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DependencyCollectionException</span>(result, e.getMessage());</span><br/><span class="line">            }</span><br/><span class="line"></span><br/><span class="line">            root = root.setArtifact(descriptorResult.getArtifact());</span><br/><span class="line"></span><br/><span class="line">            <span class="keyword">if</span> (!session.isIgnoreArtifactDescriptorRepositories()) {</span><br/><span class="line">                repositories = remoteRepositoryManager.aggregateRepositories(</span><br/><span class="line">                        session, repositories, descriptorResult.getRepositories(), <span class="literal">true</span>);</span><br/><span class="line">            }</span><br/><span class="line">            dependencies = mergeDeps(dependencies, descriptorResult.getDependencies());</span><br/><span class="line">            managedDependencies = mergeDeps(managedDependencies, descriptorResult.getManagedDependencies());</span><br/><span class="line"></span><br/><span class="line">            node = <span class="keyword">new</span> <span class="title class_">DefaultDependencyNode</span>(root);</span><br/><span class="line">            node.setRequestContext(request.getRequestContext());</span><br/><span class="line">            node.setRelocations(descriptorResult.getRelocations());</span><br/><span class="line">            node.setVersionConstraint(rangeResult.getVersionConstraint());</span><br/><span class="line">            node.setVersion(version);</span><br/><span class="line">            node.setAliases(descriptorResult.getAliases());</span><br/><span class="line">            node.setRepositories(request.getRepositories());</span><br/><span class="line">        } <span class="keyword">else</span> {</span><br/><span class="line">            node = <span class="keyword">new</span> <span class="title class_">DefaultDependencyNode</span>(request.getRootArtifact());</span><br/><span class="line">            node.setRequestContext(request.getRequestContext());</span><br/><span class="line">            node.setRepositories(request.getRepositories());</span><br/><span class="line">        }</span><br/><span class="line"></span><br/><span class="line">        result.setRoot(node);</span><br/><span class="line"></span><br/><span class="line">        <span class="type">boolean</span> <span class="variable">traverse</span> <span class="operator">=</span> root == <span class="literal">null</span> || depTraverser == <span class="literal">null</span> || depTraverser.traverseDependency(root);</span><br/><span class="line">        <span class="type">String</span> <span class="variable">errorPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br/><span class="line">        <span class="keyword">if</span> (traverse &amp;&amp; !dependencies.isEmpty()) {</span><br/><span class="line">            <span class="type">DataPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataPool</span>(session);</span><br/><span class="line"></span><br/><span class="line">            <span class="type">DefaultDependencyCollectionContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultDependencyCollectionContext</span>(</span><br/><span class="line">                    session, request.getRootArtifact(), root, managedDependencies);</span><br/><span class="line"></span><br/><span class="line">            <span class="type">DefaultVersionFilterContext</span> <span class="variable">versionContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultVersionFilterContext</span>(session);</span><br/><span class="line"></span><br/><span class="line">            <span class="type">Results</span> <span class="variable">results</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Results</span>(result, session);</span><br/><span class="line"></span><br/><span class="line">            doCollectDependencies(</span><br/><span class="line">                    session,</span><br/><span class="line">                    trace,</span><br/><span class="line">                    pool,</span><br/><span class="line">                    context,</span><br/><span class="line">                    versionContext,</span><br/><span class="line">                    request,</span><br/><span class="line">                    node,</span><br/><span class="line">                    repositories,</span><br/><span class="line">                    dependencies,</span><br/><span class="line">                    managedDependencies,</span><br/><span class="line">                    results);</span><br/><span class="line"></span><br/><span class="line">            errorPath = results.getErrorPath();</span><br/><span class="line">        }</span><br/><span class="line"></span><br/><span class="line">        <span class="type">long</span> <span class="variable">time2</span> <span class="operator">=</span> System.nanoTime();</span><br/><span class="line"></span><br/><span class="line">        <span class="type">DependencyGraphTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> session.getDependencyGraphTransformer();</span><br/><span class="line">        <span class="keyword">if</span> (transformer != <span class="literal">null</span>) {</span><br/><span class="line">            <span class="keyword">try</span> {</span><br/><span class="line">                <span class="type">DefaultDependencyGraphTransformationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br/><span class="line">                        <span class="keyword">new</span> <span class="title class_">DefaultDependencyGraphTransformationContext</span>(session);</span><br/><span class="line">                context.put(TransformationContextKeys.STATS, stats);</span><br/><span class="line">                result.setRoot(transformer.transformGraph(node, context));</span><br/><span class="line">            } <span class="keyword">catch</span> (RepositoryException e) {</span><br/><span class="line">                result.addException(e);</span><br/><span class="line">            }</span><br/><span class="line">        }</span><br/><span class="line"></span><br/><span class="line">        <span class="type">long</span> <span class="variable">time3</span> <span class="operator">=</span> System.nanoTime();</span><br/><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) {</span><br/><span class="line">            stats.put(getClass().getSimpleName() + <span class="string">&#34;.collectTime&#34;</span>, time2 - time1);</span><br/><span class="line">            stats.put(getClass().getSimpleName() + <span class="string">&#34;.transformTime&#34;</span>, time3 - time2);</span><br/><span class="line">            logger.debug(<span class="string">&#34;Dependency collection stats {}&#34;</span>, stats);</span><br/><span class="line">        }</span><br/><span class="line"></span><br/><span class="line">        <span class="keyword">if</span> (errorPath != <span class="literal">null</span>) {</span><br/><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DependencyCollectionException</span>(result, <span class="string">&#34;Failed to collect dependencies at &#34;</span> + errorPath);</span><br/><span class="line">        }</span><br/><span class="line">        <span class="keyword">if</span> (!result.getExceptions().isEmpty()) {</span><br/><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DependencyCollectionException</span>(result);</span><br/><span class="line">        }</span><br/><span class="line"></span><br/><span class="line">        <span class="keyword">return</span> result;</span><br/><span class="line">    }</span><br/><span class="line">    ...</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/><span class="line">42</span><br/><span class="line">43</span><br/><span class="line">44</span><br/><span class="line">45</span><br/><span class="line">46</span><br/><span class="line">47</span><br/><span class="line">48</span><br/><span class="line">49</span><br/><span class="line">50</span><br/><span class="line">51</span><br/><span class="line">52</span><br/><span class="line">53</span><br/><span class="line">54</span><br/><span class="line">55</span><br/><span class="line">56</span><br/><span class="line">57</span><br/><span class="line">58</span><br/><span class="line">59</span><br/><span class="line">60</span><br/><span class="line">61</span><br/><span class="line">62</span><br/><span class="line">63</span><br/><span class="line">64</span><br/><span class="line">65</span><br/><span class="line">66</span><br/><span class="line">67</span><br/><span class="line">68</span><br/><span class="line">69</span><br/><span class="line">70</span><br/><span class="line">71</span><br/><span class="line">72</span><br/><span class="line">73</span><br/><span class="line">74</span><br/><span class="line">75</span><br/><span class="line">76</span><br/><span class="line">77</span><br/><span class="line">78</span><br/><span class="line">79</span><br/><span class="line">80</span><br/><span class="line">81</span><br/><span class="line">82</span><br/><span class="line">83</span><br/><span class="line">84</span><br/><span class="line">85</span><br/><span class="line">86</span><br/><span class="line">87</span><br/><span class="line">88</span><br/><span class="line">89</span><br/><span class="line">90</span><br/><span class="line">91</span><br/><span class="line">92</span><br/><span class="line">93</span><br/><span class="line">94</span><br/><span class="line">95</span><br/><span class="line">96</span><br/><span class="line">97</span><br/><span class="line">98</span><br/><span class="line">99</span><br/><span class="line">100</span><br/><span class="line">101</span><br/><span class="line">102</span><br/><span class="line">103</span><br/><span class="line">104</span><br/><span class="line">105</span><br/><span class="line">106</span><br/><span class="line">107</span><br/><span class="line">108</span><br/><span class="line">109</span><br/><span class="line">110</span><br/><span class="line">111</span><br/><span class="line">112</span><br/><span class="line">113</span><br/><span class="line">114</span><br/><span class="line">115</span><br/><span class="line">116</span><br/><span class="line">117</span><br/><span class="line">118</span><br/><span class="line">119</span><br/><span class="line">120</span><br/><span class="line">121</span><br/><span class="line">122</span><br/><span class="line">123</span><br/><span class="line">124</span><br/><span class="line">125</span><br/><span class="line">126</span><br/><span class="line">127</span><br/><span class="line">128</span><br/><span class="line">129</span><br/><span class="line">130</span><br/><span class="line">131</span><br/><span class="line">132</span><br/><span class="line">133</span><br/><span class="line">134</span><br/><span class="line">135</span><br/><span class="line">136</span><br/><span class="line">137</span><br/><span class="line">138</span><br/><span class="line">139</span><br/><span class="line">140</span><br/><span class="line">141</span><br/><span class="line">142</span><br/><span class="line">143</span><br/><span class="line">144</span><br/><span class="line">145</span><br/><span class="line">146</span><br/><span class="line">147</span><br/><span class="line">148</span><br/><span class="line">149</span><br/><span class="line">150</span><br/><span class="line">151</span><br/><span class="line">152</span><br/><span class="line">153</span><br/><span class="line">154</span><br/><span class="line">155</span><br/><span class="line">156</span><br/><span class="line">157</span><br/><span class="line">158</span><br/><span class="line">159</span><br/><span class="line">160</span><br/><span class="line">161</span><br/><span class="line">162</span><br/><span class="line">163</span><br/><span class="line">164</span><br/><span class="line">165</span><br/><span class="line">166</span><br/><span class="line">167</span><br/><span class="line">168</span><br/><span class="line">169</span><br/><span class="line">170</span><br/><span class="line">171</span><br/><span class="line">172</span><br/><span class="line">173</span><br/><span class="line">174</span><br/><span class="line">175</span><br/><span class="line">176</span><br/><span class="line">177</span><br/><span class="line">178</span><br/><span class="line">179</span><br/><span class="line">180</span><br/><span class="line">181</span><br/><span class="line">182</span><br/><span class="line">183</span><br/><span class="line">184</span><br/><span class="line">185</span><br/><span class="line">186</span><br/><span class="line">187</span><br/><span class="line">188</span><br/><span class="line">189</span><br/><span class="line">190</span><br/><span class="line">191</span><br/><span class="line">192</span><br/><span class="line">193</span><br/><span class="line">194</span><br/><span class="line">195</span><br/><span class="line">196</span><br/><span class="line">197</span><br/><span class="line">198</span><br/><span class="line">199</span><br/><span class="line">200</span><br/><span class="line">201</span><br/><span class="line">202</span><br/><span class="line">203</span><br/><span class="line">204</span><br/><span class="line">205</span><br/><span class="line">206</span><br/><span class="line">207</span><br/><span class="line">208</span><br/><span class="line">209</span><br/><span class="line">210</span><br/><span class="line">211</span><br/><span class="line">212</span><br/><span class="line">213</span><br/><span class="line">214</span><br/><span class="line">215</span><br/><span class="line">216</span><br/><span class="line">217</span><br/><span class="line">218</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DfDependencyCollector</span> <span class="keyword">extends</span> <span class="title class_">DependencyCollectorDelegate</span> <span class="keyword">implements</span> <span class="title class_">Service</span> {</span><br/><span class="line">    ...</span><br/><span class="line">    <span class="meta">@Override</span></span><br/><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doCollectDependencies</span><span class="params">(</span></span><br/><span class="line"><span class="params">            RepositorySystemSession session,</span></span><br/><span class="line"><span class="params">            RequestTrace trace,</span></span><br/><span class="line"><span class="params">            DataPool pool,</span></span><br/><span class="line"><span class="params">            DefaultDependencyCollectionContext context,</span></span><br/><span class="line"><span class="params">            DefaultVersionFilterContext versionContext,</span></span><br/><span class="line"><span class="params">            CollectRequest request,</span></span><br/><span class="line"><span class="params">            DependencyNode node,</span></span><br/><span class="line"><span class="params">            List&lt;RemoteRepository&gt; repositories,</span></span><br/><span class="line"><span class="params">            List&lt;Dependency&gt; dependencies,</span></span><br/><span class="line"><span class="params">            List&lt;Dependency&gt; managedDependencies,</span></span><br/><span class="line"><span class="params">            Results results)</span> {</span><br/><span class="line">        <span class="type">NodeStack</span> <span class="variable">nodes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NodeStack</span>();</span><br/><span class="line">        nodes.push(node);</span><br/><span class="line"></span><br/><span class="line">        <span class="type">Args</span> <span class="variable">args</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Args</span>(session, pool, nodes, context, versionContext, request);</span><br/><span class="line"></span><br/><span class="line">        process(</span><br/><span class="line">                args,</span><br/><span class="line">                trace,</span><br/><span class="line">                results,</span><br/><span class="line">                dependencies,</span><br/><span class="line">                repositories,</span><br/><span class="line">                session.getDependencySelector() != <span class="literal">null</span></span><br/><span class="line">                        ? session.getDependencySelector().deriveChildSelector(context)</span><br/><span class="line">                        : <span class="literal">null</span>,</span><br/><span class="line">                session.getDependencyManager() != <span class="literal">null</span></span><br/><span class="line">                        ? session.getDependencyManager().deriveChildManager(context)</span><br/><span class="line">                        : <span class="literal">null</span>,</span><br/><span class="line">                session.getDependencyTraverser() != <span class="literal">null</span></span><br/><span class="line">                        ? session.getDependencyTraverser().deriveChildTraverser(context)</span><br/><span class="line">                        : <span class="literal">null</span>,</span><br/><span class="line">                session.getVersionFilter() != <span class="literal">null</span> ? session.getVersionFilter().deriveChildFilter(context) : <span class="literal">null</span>);</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(</span></span><br/><span class="line"><span class="params">            <span class="keyword">final</span> Args args,</span></span><br/><span class="line"><span class="params">            RequestTrace trace,</span></span><br/><span class="line"><span class="params">            Results results,</span></span><br/><span class="line"><span class="params">            List&lt;Dependency&gt; dependencies,</span></span><br/><span class="line"><span class="params">            List&lt;RemoteRepository&gt; repositories,</span></span><br/><span class="line"><span class="params">            DependencySelector depSelector,</span></span><br/><span class="line"><span class="params">            DependencyManager depManager,</span></span><br/><span class="line"><span class="params">            DependencyTraverser depTraverser,</span></span><br/><span class="line"><span class="params">            VersionFilter verFilter)</span> {</span><br/><span class="line">        <span class="keyword">for</span> (Dependency dependency : dependencies) {</span><br/><span class="line">            processDependency(</span><br/><span class="line">                    args, trace, results, repositories, depSelector, depManager, depTraverser, verFilter, dependency);</span><br/><span class="line">        }</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processDependency</span><span class="params">(</span></span><br/><span class="line"><span class="params">            Args args,</span></span><br/><span class="line"><span class="params">            RequestTrace trace,</span></span><br/><span class="line"><span class="params">            Results results,</span></span><br/><span class="line"><span class="params">            List&lt;RemoteRepository&gt; repositories,</span></span><br/><span class="line"><span class="params">            DependencySelector depSelector,</span></span><br/><span class="line"><span class="params">            DependencyManager depManager,</span></span><br/><span class="line"><span class="params">            DependencyTraverser depTraverser,</span></span><br/><span class="line"><span class="params">            VersionFilter verFilter,</span></span><br/><span class="line"><span class="params">            Dependency dependency)</span> {</span><br/><span class="line"></span><br/><span class="line">        List&lt;Artifact&gt; relocations = Collections.emptyList();</span><br/><span class="line">        processDependency(</span><br/><span class="line">                args,</span><br/><span class="line">                trace,</span><br/><span class="line">                results,</span><br/><span class="line">                repositories,</span><br/><span class="line">                depSelector,</span><br/><span class="line">                depManager,</span><br/><span class="line">                depTraverser,</span><br/><span class="line">                verFilter,</span><br/><span class="line">                dependency,</span><br/><span class="line">                relocations,</span><br/><span class="line">                <span class="literal">false</span>);</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processDependency</span><span class="params">(</span></span><br/><span class="line"><span class="params">            Args args,</span></span><br/><span class="line"><span class="params">            RequestTrace parent,</span></span><br/><span class="line"><span class="params">            Results results,</span></span><br/><span class="line"><span class="params">            List&lt;RemoteRepository&gt; repositories,</span></span><br/><span class="line"><span class="params">            DependencySelector depSelector,</span></span><br/><span class="line"><span class="params">            DependencyManager depManager,</span></span><br/><span class="line"><span class="params">            DependencyTraverser depTraverser,</span></span><br/><span class="line"><span class="params">            VersionFilter verFilter,</span></span><br/><span class="line"><span class="params">            Dependency dependency,</span></span><br/><span class="line"><span class="params">            List&lt;Artifact&gt; relocations,</span></span><br/><span class="line"><span class="params">            <span class="type">boolean</span> disableVersionManagement)</span> {</span><br/><span class="line">        <span class="keyword">if</span> (depSelector != <span class="literal">null</span> &amp;&amp; !depSelector.selectDependency(dependency)) {</span><br/><span class="line">            <span class="keyword">return</span>;</span><br/><span class="line">        }</span><br/><span class="line"></span><br/><span class="line">        <span class="type">RequestTrace</span> <span class="variable">trace</span> <span class="operator">=</span> collectStepTrace(parent, args.request.getRequestContext(), args.nodes.nodes, dependency);</span><br/><span class="line">        <span class="type">PremanagedDependency</span> <span class="variable">preManaged</span> <span class="operator">=</span></span><br/><span class="line">                PremanagedDependency.create(depManager, dependency, disableVersionManagement, args.premanagedState);</span><br/><span class="line">        dependency = preManaged.getManagedDependency();</span><br/><span class="line"></span><br/><span class="line">        <span class="type">boolean</span> <span class="variable">noDescriptor</span> <span class="operator">=</span> isLackingDescriptor(dependency.getArtifact());</span><br/><span class="line"></span><br/><span class="line">        <span class="type">boolean</span> <span class="variable">traverse</span> <span class="operator">=</span> !noDescriptor &amp;&amp; (depTraverser == <span class="literal">null</span> || depTraverser.traverseDependency(dependency));</span><br/><span class="line"></span><br/><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Version</span>&gt; versions;</span><br/><span class="line">        VersionRangeResult rangeResult;</span><br/><span class="line">        <span class="keyword">try</span> {</span><br/><span class="line">            <span class="type">VersionRangeRequest</span> <span class="variable">rangeRequest</span> <span class="operator">=</span></span><br/><span class="line">                    createVersionRangeRequest(args.request.getRequestContext(), trace, repositories, dependency);</span><br/><span class="line"></span><br/><span class="line">            rangeResult = cachedResolveRangeResult(rangeRequest, args.pool, args.session);</span><br/><span class="line"></span><br/><span class="line">            versions = filterVersions(dependency, rangeResult, verFilter, args.versionContext);</span><br/><span class="line">        } <span class="keyword">catch</span> (VersionRangeResolutionException e) {</span><br/><span class="line">            results.addException(dependency, e, args.nodes.nodes);</span><br/><span class="line">            <span class="keyword">return</span>;</span><br/><span class="line">        }</span><br/><span class="line"></span><br/><span class="line">        <span class="keyword">for</span> (Version version : versions) {</span><br/><span class="line">            <span class="type">Artifact</span> <span class="variable">originalArtifact</span> <span class="operator">=</span> dependency.getArtifact().setVersion(version.toString());</span><br/><span class="line">            <span class="type">Dependency</span> <span class="variable">d</span> <span class="operator">=</span> dependency.setArtifact(originalArtifact);</span><br/><span class="line"></span><br/><span class="line">            <span class="type">ArtifactDescriptorRequest</span> <span class="variable">descriptorRequest</span> <span class="operator">=</span></span><br/><span class="line">                    createArtifactDescriptorRequest(args.request.getRequestContext(), trace, repositories, d);<span class="comment">//关键代码</span></span><br/><span class="line"></span><br/><span class="line">            <span class="keyword">final</span> <span class="type">ArtifactDescriptorResult</span> <span class="variable">descriptorResult</span> <span class="operator">=</span></span><br/><span class="line">                    getArtifactDescriptorResult(args, results, noDescriptor, d, descriptorRequest);<span class="comment">//关键代码</span></span><br/><span class="line">            <span class="keyword">if</span> (descriptorResult != <span class="literal">null</span>) {</span><br/><span class="line">                d = d.setArtifact(descriptorResult.getArtifact());</span><br/><span class="line"></span><br/><span class="line">                <span class="type">DependencyNode</span> <span class="variable">node</span> <span class="operator">=</span> args.nodes.top();</span><br/><span class="line"></span><br/><span class="line">                <span class="type">int</span> <span class="variable">cycleEntry</span> <span class="operator">=</span> DefaultDependencyCycle.find(args.nodes.nodes, d.getArtifact());</span><br/><span class="line">                <span class="keyword">if</span> (cycleEntry &gt;= <span class="number">0</span>) {</span><br/><span class="line">                    results.addCycle(args.nodes.nodes, cycleEntry, d);</span><br/><span class="line">                    <span class="type">DependencyNode</span> <span class="variable">cycleNode</span> <span class="operator">=</span> args.nodes.get(cycleEntry);</span><br/><span class="line">                    <span class="keyword">if</span> (cycleNode.getDependency() != <span class="literal">null</span>) {</span><br/><span class="line">                        <span class="type">DefaultDependencyNode</span> <span class="variable">child</span> <span class="operator">=</span> createDependencyNode(</span><br/><span class="line">                                relocations, preManaged, rangeResult, version, d, descriptorResult, cycleNode);</span><br/><span class="line">                        node.getChildren().add(child);</span><br/><span class="line">                        <span class="keyword">continue</span>;</span><br/><span class="line">                    }</span><br/><span class="line">                }</span><br/><span class="line"></span><br/><span class="line">                <span class="keyword">if</span> (!descriptorResult.getRelocations().isEmpty()) {</span><br/><span class="line">                    <span class="type">boolean</span> <span class="variable">disableVersionManagementSubsequently</span> <span class="operator">=</span></span><br/><span class="line">                            originalArtifact.getGroupId().equals(d.getArtifact().getGroupId())</span><br/><span class="line">                                    &amp;&amp; originalArtifact</span><br/><span class="line">                                            .getArtifactId()</span><br/><span class="line">                                            .equals(d.getArtifact().getArtifactId());</span><br/><span class="line"></span><br/><span class="line">                    processDependency(</span><br/><span class="line">                            args,</span><br/><span class="line">                            parent,</span><br/><span class="line">                            results,</span><br/><span class="line">                            repositories,</span><br/><span class="line">                            depSelector,</span><br/><span class="line">                            depManager,</span><br/><span class="line">                            depTraverser,</span><br/><span class="line">                            verFilter,</span><br/><span class="line">                            d,</span><br/><span class="line">                            descriptorResult.getRelocations(),</span><br/><span class="line">                            disableVersionManagementSubsequently);</span><br/><span class="line">                    <span class="keyword">return</span>;</span><br/><span class="line">                } <span class="keyword">else</span> {</span><br/><span class="line">                    d = args.pool.intern(d.setArtifact(args.pool.intern(d.getArtifact())));</span><br/><span class="line"></span><br/><span class="line">                    List&lt;RemoteRepository&gt; repos =</span><br/><span class="line">                            getRemoteRepositories(rangeResult.getRepository(version), repositories);</span><br/><span class="line"></span><br/><span class="line">                    <span class="type">DefaultDependencyNode</span> <span class="variable">child</span> <span class="operator">=</span> createDependencyNode(</span><br/><span class="line">                            relocations,</span><br/><span class="line">                            preManaged,</span><br/><span class="line">                            rangeResult,</span><br/><span class="line">                            version,</span><br/><span class="line">                            d,</span><br/><span class="line">                            descriptorResult.getAliases(),</span><br/><span class="line">                            repos,</span><br/><span class="line">                            args.request.getRequestContext());</span><br/><span class="line"></span><br/><span class="line">                    node.getChildren().add(child);</span><br/><span class="line"></span><br/><span class="line">                    <span class="type">boolean</span> <span class="variable">recurse</span> <span class="operator">=</span></span><br/><span class="line">                            traverse &amp;&amp; !descriptorResult.getDependencies().isEmpty();</span><br/><span class="line">                    <span class="keyword">if</span> (recurse) {</span><br/><span class="line">                        doRecurse(</span><br/><span class="line">                                args,</span><br/><span class="line">                                parent,</span><br/><span class="line">                                results,</span><br/><span class="line">                                repositories,</span><br/><span class="line">                                depSelector,</span><br/><span class="line">                                depManager,</span><br/><span class="line">                                depTraverser,</span><br/><span class="line">                                verFilter,</span><br/><span class="line">                                d,</span><br/><span class="line">                                descriptorResult,</span><br/><span class="line">                                child);</span><br/><span class="line">                    }</span><br/><span class="line">                }</span><br/><span class="line">            } <span class="keyword">else</span> {</span><br/><span class="line">                <span class="type">DependencyNode</span> <span class="variable">node</span> <span class="operator">=</span> args.nodes.top();</span><br/><span class="line">                List&lt;RemoteRepository&gt; repos = getRemoteRepositories(rangeResult.getRepository(version), repositories);</span><br/><span class="line">                <span class="type">DefaultDependencyNode</span> <span class="variable">child</span> <span class="operator">=</span> createDependencyNode(</span><br/><span class="line">                        relocations,</span><br/><span class="line">                        preManaged,</span><br/><span class="line">                        rangeResult,</span><br/><span class="line">                        version,</span><br/><span class="line">                        d,</span><br/><span class="line">                        <span class="literal">null</span>,</span><br/><span class="line">                        repos,</span><br/><span class="line">                        args.request.getRequestContext());</span><br/><span class="line">                node.getChildren().add(child);</span><br/><span class="line">            }</span><br/><span class="line">        }</span><br/><span class="line">    }</span><br/><span class="line">    ...</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>代码中已用注释写明了关键代码位置，可以得知在RootDependency的Collect操作中，会进行ArtifactDescriptor(即，依赖的pom文件的解析)的解析操作，得到该Dependency的直接依赖，此操作由ArtifactDescriptorReader进行，但是既然解析了pom文件，为什么不根据pom文件内声明的extension类型来修正Artifact对应的文件类型呢？只因<del>你太美</del>Artifact中的extension是final修饰的，咱也不懂Aether为什么不写个自动修正extension的操作，毕竟人家是apache foundation下的，咱也不敢问。</p><h4 id="解决方法"><a href="https://xiue233.github.io/2023/09/09/aether-manual/#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95" class="headerlink" title="解决方法"></a>解决方法</h4><p>前情回顾，Aether内部使用了Dependency Injection，我们如果需要更改内部的逻辑，最简单的当然还是利用DefaultLocatorService操作了。</p><p>我们只需这么修改代码，将默认的ArtifactDescriptorReader更改为可以自动修正的自定义ArtifactDescriptorReader即可:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/></pre></td><td class="code"><pre><span class="line">...</span><br/><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RepositorySystem <span class="title function_">newRepositorySystem</span><span class="params">()</span> {</span><br/><span class="line">        <span class="type">DefaultServiceLocator</span> <span class="variable">locator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultServiceLocator</span>();</span><br/><span class="line"><span class="comment">//        locator.addService(ArtifactDescriptorReader.class, DefaultArtifactDescriptorReader.class); //默认的ArtifactDescriptorReader</span></span><br/><span class="line">        locator.addService(ArtifactDescriptorReader.class, CompactAARArtifactDescriptorReader.class);<span class="comment">//兼容AAR的CompactAARArtifactDescriptorReader</span></span><br/><span class="line">        locator.addService(VersionResolver.class, DefaultVersionResolver.class);</span><br/><span class="line">        locator.addService(VersionRangeResolver.class, DefaultVersionRangeResolver.class);</span><br/><span class="line">        locator.addService(MetadataGeneratorFactory.class, SnapshotMetadataGeneratorFactory.class);</span><br/><span class="line">        locator.addService(MetadataGeneratorFactory.class, VersionsMetadataGeneratorFactory.class);</span><br/><span class="line">        locator.addService(RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class);</span><br/><span class="line">        locator.addService(TransporterFactory.class, FileTransporterFactory.class);</span><br/><span class="line">        locator.addService(TransporterFactory.class, HttpTransporterFactory.class);</span><br/><span class="line">        <span class="keyword">return</span> locator.getService(RepositorySystem.class);</span><br/><span class="line">    }</span><br/><span class="line">...</span><br/></pre></td></tr></tbody></table></figure><p>这个思路显然是对的，但是问题又来了，我们如何实现自动修正，毕竟人家extension是final修饰的？反射操作。</p><p>那，又怎么获取正确的extension呢？不妨来看看ArtifactDescriptorReader的代码，看看人家是怎么解析的。</p><p><code>org.apache.maven.repository.internal.DefaultArtifactDescriptorReader</code>的代码摘要(具体片段懒得继续缩减了，就这个方法先凑活看好了):</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/><span class="line">42</span><br/><span class="line">43</span><br/><span class="line">44</span><br/><span class="line">45</span><br/><span class="line">46</span><br/><span class="line">47</span><br/><span class="line">48</span><br/><span class="line">49</span><br/><span class="line">50</span><br/><span class="line">51</span><br/><span class="line">52</span><br/><span class="line">53</span><br/><span class="line">54</span><br/><span class="line">55</span><br/><span class="line">56</span><br/><span class="line">57</span><br/><span class="line">58</span><br/><span class="line">59</span><br/><span class="line">60</span><br/><span class="line">61</span><br/><span class="line">62</span><br/><span class="line">63</span><br/><span class="line">64</span><br/><span class="line">65</span><br/><span class="line">66</span><br/><span class="line">67</span><br/><span class="line">68</span><br/><span class="line">69</span><br/><span class="line">70</span><br/><span class="line">71</span><br/><span class="line">72</span><br/><span class="line">73</span><br/><span class="line">74</span><br/><span class="line">75</span><br/><span class="line">76</span><br/><span class="line">77</span><br/><span class="line">78</span><br/><span class="line">79</span><br/><span class="line">80</span><br/><span class="line">81</span><br/><span class="line">82</span><br/><span class="line">83</span><br/><span class="line">84</span><br/><span class="line">85</span><br/><span class="line">86</span><br/><span class="line">87</span><br/><span class="line">88</span><br/><span class="line">89</span><br/><span class="line">90</span><br/><span class="line">91</span><br/><span class="line">92</span><br/><span class="line">93</span><br/><span class="line">94</span><br/><span class="line">95</span><br/><span class="line">96</span><br/><span class="line">97</span><br/><span class="line">98</span><br/><span class="line">99</span><br/><span class="line">100</span><br/><span class="line">101</span><br/><span class="line">102</span><br/><span class="line">103</span><br/><span class="line">104</span><br/><span class="line">105</span><br/><span class="line">106</span><br/><span class="line">107</span><br/><span class="line">108</span><br/><span class="line">109</span><br/><span class="line">110</span><br/><span class="line">111</span><br/><span class="line">112</span><br/><span class="line">113</span><br/><span class="line">114</span><br/><span class="line">115</span><br/><span class="line">116</span><br/><span class="line">117</span><br/><span class="line">118</span><br/><span class="line">119</span><br/><span class="line">120</span><br/><span class="line">121</span><br/><span class="line">122</span><br/><span class="line">123</span><br/><span class="line">124</span><br/><span class="line">125</span><br/><span class="line">126</span><br/><span class="line">127</span><br/><span class="line">128</span><br/><span class="line">129</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultArtifactDescriptorReader</span></span><br/><span class="line">    <span class="keyword">implements</span> <span class="title class_">ArtifactDescriptorReader</span>, Service</span><br/><span class="line">{</span><br/><span class="line">    ...</span><br/><span class="line">    <span class="keyword">private</span> Model <span class="title function_">loadPom</span><span class="params">( RepositorySystemSession session, ArtifactDescriptorRequest request,</span></span><br/><span class="line"><span class="params">                           ArtifactDescriptorResult result )</span></span><br/><span class="line">        <span class="keyword">throws</span> ArtifactDescriptorException</span><br/><span class="line">    {</span><br/><span class="line">        <span class="type">RequestTrace</span> <span class="variable">trace</span> <span class="operator">=</span> RequestTrace.newChild( request.getTrace(), request );</span><br/><span class="line"></span><br/><span class="line">        Set&lt;String&gt; visited = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;String&gt;();</span><br/><span class="line">        <span class="keyword">for</span> ( <span class="type">Artifact</span> <span class="variable">artifact</span> <span class="operator">=</span> request.getArtifact();; )</span><br/><span class="line">        {</span><br/><span class="line">            <span class="keyword">try</span></span><br/><span class="line">            {</span><br/><span class="line">                <span class="type">VersionRequest</span> <span class="variable">versionRequest</span> <span class="operator">=</span></span><br/><span class="line">                    <span class="keyword">new</span> <span class="title class_">VersionRequest</span>( artifact, request.getRepositories(), request.getRequestContext() );</span><br/><span class="line">                versionRequest.setTrace( trace );</span><br/><span class="line">                <span class="type">VersionResult</span> <span class="variable">versionResult</span> <span class="operator">=</span> versionResolver.resolveVersion( session, versionRequest );</span><br/><span class="line"></span><br/><span class="line">                artifact = artifact.setVersion( versionResult.getVersion() );</span><br/><span class="line">            }</span><br/><span class="line">            <span class="keyword">catch</span> ( VersionResolutionException e )</span><br/><span class="line">            {</span><br/><span class="line">                result.addException( e );</span><br/><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArtifactDescriptorException</span>( result );</span><br/><span class="line">            }</span><br/><span class="line"></span><br/><span class="line">            <span class="keyword">if</span> ( !visited.add( artifact.getGroupId() + <span class="string">&#39;:&#39;</span> + artifact.getArtifactId() + <span class="string">&#39;:&#39;</span> + artifact.getBaseVersion() ) )</span><br/><span class="line">            {</span><br/><span class="line">                <span class="type">RepositoryException</span> <span class="variable">exception</span> <span class="operator">=</span></span><br/><span class="line">                    <span class="keyword">new</span> <span class="title class_">RepositoryException</span>( <span class="string">&#34;Artifact relocations form a cycle: &#34;</span> + visited );</span><br/><span class="line">                invalidDescriptor( session, trace, artifact, exception );</span><br/><span class="line">                <span class="keyword">if</span> ( ( getPolicy( session, artifact, request ) &amp; ArtifactDescriptorPolicy.IGNORE_INVALID ) != <span class="number">0</span> )</span><br/><span class="line">                {</span><br/><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br/><span class="line">                }</span><br/><span class="line">                result.addException( exception );</span><br/><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArtifactDescriptorException</span>( result );</span><br/><span class="line">            }</span><br/><span class="line"></span><br/><span class="line">            <span class="type">Artifact</span> <span class="variable">pomArtifact</span> <span class="operator">=</span> ArtifactDescriptorUtils.toPomArtifact( artifact );</span><br/><span class="line"></span><br/><span class="line">            ArtifactResult resolveResult;</span><br/><span class="line">            <span class="keyword">try</span></span><br/><span class="line">            {</span><br/><span class="line">                <span class="type">ArtifactRequest</span> <span class="variable">resolveRequest</span> <span class="operator">=</span></span><br/><span class="line">                    <span class="keyword">new</span> <span class="title class_">ArtifactRequest</span>( pomArtifact, request.getRepositories(), request.getRequestContext() );</span><br/><span class="line">                resolveRequest.setTrace( trace );</span><br/><span class="line">                resolveResult = artifactResolver.resolveArtifact( session, resolveRequest );</span><br/><span class="line">                pomArtifact = resolveResult.getArtifact();</span><br/><span class="line">                result.setRepository( resolveResult.getRepository() );</span><br/><span class="line">            }</span><br/><span class="line">            <span class="keyword">catch</span> ( ArtifactResolutionException e )</span><br/><span class="line">            {</span><br/><span class="line">                <span class="keyword">if</span> ( e.getCause() <span class="keyword">instanceof</span> ArtifactNotFoundException )</span><br/><span class="line">                {</span><br/><span class="line">                    missingDescriptor( session, trace, artifact, (Exception) e.getCause() );</span><br/><span class="line">                    <span class="keyword">if</span> ( ( getPolicy( session, artifact, request ) &amp; ArtifactDescriptorPolicy.IGNORE_MISSING ) != <span class="number">0</span> )</span><br/><span class="line">                    {</span><br/><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br/><span class="line">                    }</span><br/><span class="line">                }</span><br/><span class="line">                result.addException( e );</span><br/><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArtifactDescriptorException</span>( result );</span><br/><span class="line">            }</span><br/><span class="line"></span><br/><span class="line">            Model model;<span class="comment">// Model为POM文件对应的模型类</span></span><br/><span class="line">            <span class="keyword">try</span></span><br/><span class="line">            {</span><br/><span class="line">                <span class="type">ModelBuildingRequest</span> <span class="variable">modelRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultModelBuildingRequest</span>();</span><br/><span class="line">                modelRequest.setValidationLevel( ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL );</span><br/><span class="line">                modelRequest.setProcessPlugins( <span class="literal">false</span> );</span><br/><span class="line">                modelRequest.setTwoPhaseBuilding( <span class="literal">false</span> );</span><br/><span class="line">                modelRequest.setSystemProperties( toProperties( session.getUserProperties(),</span><br/><span class="line">                                                                session.getSystemProperties() ) );</span><br/><span class="line">                modelRequest.setModelCache( DefaultModelCache.newInstance( session ) );</span><br/><span class="line">                modelRequest.setModelResolver( <span class="keyword">new</span> <span class="title class_">DefaultModelResolver</span>( session, trace.newChild( modelRequest ),</span><br/><span class="line">                                                                         request.getRequestContext(), artifactResolver,</span><br/><span class="line">                                                                         remoteRepositoryManager,</span><br/><span class="line">                                                                         request.getRepositories() ) );</span><br/><span class="line">                <span class="keyword">if</span> ( resolveResult.getRepository() <span class="keyword">instanceof</span> WorkspaceRepository )</span><br/><span class="line">                {</span><br/><span class="line">                    modelRequest.setPomFile( pomArtifact.getFile() );</span><br/><span class="line">                }</span><br/><span class="line">                <span class="keyword">else</span></span><br/><span class="line">                {</span><br/><span class="line">                    modelRequest.setModelSource( <span class="keyword">new</span> <span class="title class_">FileModelSource</span>( pomArtifact.getFile() ) );</span><br/><span class="line">                }</span><br/><span class="line"></span><br/><span class="line">                model = modelBuilder.build( modelRequest ).getEffectiveModel();</span><br/><span class="line">            }</span><br/><span class="line">            <span class="keyword">catch</span> ( ModelBuildingException e )</span><br/><span class="line">            {</span><br/><span class="line">                <span class="keyword">for</span> ( ModelProblem problem : e.getProblems() )</span><br/><span class="line">                {</span><br/><span class="line">                    <span class="keyword">if</span> ( problem.getException() <span class="keyword">instanceof</span> UnresolvableModelException )</span><br/><span class="line">                    {</span><br/><span class="line">                        result.addException( problem.getException() );</span><br/><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArtifactDescriptorException</span>( result );</span><br/><span class="line">                    }</span><br/><span class="line">                }</span><br/><span class="line">                invalidDescriptor( session, trace, artifact, e );</span><br/><span class="line">                <span class="keyword">if</span> ( ( getPolicy( session, artifact, request ) &amp; ArtifactDescriptorPolicy.IGNORE_INVALID ) != <span class="number">0</span> )</span><br/><span class="line">                {</span><br/><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br/><span class="line">                }</span><br/><span class="line">                result.addException( e );</span><br/><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArtifactDescriptorException</span>( result );</span><br/><span class="line">            }</span><br/><span class="line"></span><br/><span class="line">            <span class="type">Relocation</span> <span class="variable">relocation</span> <span class="operator">=</span> getRelocation( model );</span><br/><span class="line"></span><br/><span class="line">            <span class="keyword">if</span> ( relocation != <span class="literal">null</span> )</span><br/><span class="line">            {</span><br/><span class="line">                result.addRelocation( artifact );</span><br/><span class="line">                artifact =</span><br/><span class="line">                    <span class="keyword">new</span> <span class="title class_">RelocatedArtifact</span>( artifact, relocation.getGroupId(), relocation.getArtifactId(),</span><br/><span class="line">                                           relocation.getVersion() );</span><br/><span class="line">                result.setArtifact( artifact );</span><br/><span class="line">            }</span><br/><span class="line">            <span class="keyword">else</span></span><br/><span class="line">            {</span><br/><span class="line">                <span class="keyword">return</span> model;</span><br/><span class="line">            }</span><br/><span class="line">        }</span><br/><span class="line">    }</span><br/><span class="line">    ...</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>上面的loadPom()方法会在DefaultArtifactDescriptorReader.readArtifactDescriptor()中调用，代码中的<code>org.apache.maven.model.Model</code>类是POM文件的模型类，我们可以调用Model.getPackaging()获得extension，并且loadPom()接受一个ArtifactDescriptorResult参数，我们可以通过ArtifactDescriptorResult.getArtifact()取得当前操作的Artifact以更正extension字段。</p><blockquote><p>Q：为什么我不使用setArtifact()方法来替换Artifact？<br/>A：因为，lazy不想再实验了，并且用反射得到的程序可以正常运行(逃)。如果感兴趣可以自己试试</p></blockquote><p><strong>注意：代码中存在internal的类，我们不能在自己项目内直接调用，所以再加一层反射操作来替换这些操作internal的类即可。</strong></p><p>CompactAARArtifactDescriptorReader代码如下(随手写的，建议用者再仔细看看，另外Reflect为团队内的反射工具，自己替换为正常的反射代码即可)：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/><span class="line">42</span><br/><span class="line">43</span><br/><span class="line">44</span><br/><span class="line">45</span><br/><span class="line">46</span><br/><span class="line">47</span><br/><span class="line">48</span><br/><span class="line">49</span><br/><span class="line">50</span><br/><span class="line">51</span><br/><span class="line">52</span><br/><span class="line">53</span><br/><span class="line">54</span><br/><span class="line">55</span><br/><span class="line">56</span><br/><span class="line">57</span><br/><span class="line">58</span><br/><span class="line">59</span><br/><span class="line">60</span><br/><span class="line">61</span><br/><span class="line">62</span><br/><span class="line">63</span><br/><span class="line">64</span><br/><span class="line">65</span><br/><span class="line">66</span><br/><span class="line">67</span><br/><span class="line">68</span><br/><span class="line">69</span><br/><span class="line">70</span><br/><span class="line">71</span><br/><span class="line">72</span><br/><span class="line">73</span><br/><span class="line">74</span><br/><span class="line">75</span><br/><span class="line">76</span><br/><span class="line">77</span><br/><span class="line">78</span><br/><span class="line">79</span><br/><span class="line">80</span><br/><span class="line">81</span><br/><span class="line">82</span><br/><span class="line">83</span><br/><span class="line">84</span><br/><span class="line">85</span><br/><span class="line">86</span><br/><span class="line">87</span><br/><span class="line">88</span><br/><span class="line">89</span><br/><span class="line">90</span><br/><span class="line">91</span><br/><span class="line">92</span><br/><span class="line">93</span><br/><span class="line">94</span><br/><span class="line">95</span><br/><span class="line">96</span><br/><span class="line">97</span><br/><span class="line">98</span><br/><span class="line">99</span><br/><span class="line">100</span><br/><span class="line">101</span><br/><span class="line">102</span><br/><span class="line">103</span><br/><span class="line">104</span><br/><span class="line">105</span><br/><span class="line">106</span><br/><span class="line">107</span><br/><span class="line">108</span><br/><span class="line">109</span><br/><span class="line">110</span><br/><span class="line">111</span><br/><span class="line">112</span><br/><span class="line">113</span><br/><span class="line">114</span><br/><span class="line">115</span><br/><span class="line">116</span><br/><span class="line">117</span><br/><span class="line">118</span><br/><span class="line">119</span><br/><span class="line">120</span><br/><span class="line">121</span><br/><span class="line">122</span><br/><span class="line">123</span><br/><span class="line">124</span><br/><span class="line">125</span><br/><span class="line">126</span><br/><span class="line">127</span><br/><span class="line">128</span><br/><span class="line">129</span><br/><span class="line">130</span><br/><span class="line">131</span><br/><span class="line">132</span><br/><span class="line">133</span><br/><span class="line">134</span><br/><span class="line">135</span><br/><span class="line">136</span><br/><span class="line">137</span><br/><span class="line">138</span><br/><span class="line">139</span><br/><span class="line">140</span><br/><span class="line">141</span><br/><span class="line">142</span><br/><span class="line">143</span><br/><span class="line">144</span><br/><span class="line">145</span><br/><span class="line">146</span><br/><span class="line">147</span><br/><span class="line">148</span><br/><span class="line">149</span><br/><span class="line">150</span><br/><span class="line">151</span><br/><span class="line">152</span><br/><span class="line">153</span><br/><span class="line">154</span><br/><span class="line">155</span><br/><span class="line">156</span><br/><span class="line">157</span><br/><span class="line">158</span><br/><span class="line">159</span><br/><span class="line">160</span><br/><span class="line">161</span><br/><span class="line">162</span><br/><span class="line">163</span><br/><span class="line">164</span><br/><span class="line">165</span><br/><span class="line">166</span><br/><span class="line">167</span><br/><span class="line">168</span><br/><span class="line">169</span><br/><span class="line">170</span><br/><span class="line">171</span><br/><span class="line">172</span><br/><span class="line">173</span><br/><span class="line">174</span><br/><span class="line">175</span><br/><span class="line">176</span><br/><span class="line">177</span><br/><span class="line">178</span><br/><span class="line">179</span><br/><span class="line">180</span><br/><span class="line">181</span><br/><span class="line">182</span><br/><span class="line">183</span><br/><span class="line">184</span><br/><span class="line">185</span><br/><span class="line">186</span><br/><span class="line">187</span><br/><span class="line">188</span><br/><span class="line">189</span><br/><span class="line">190</span><br/><span class="line">191</span><br/><span class="line">192</span><br/><span class="line">193</span><br/><span class="line">194</span><br/><span class="line">195</span><br/><span class="line">196</span><br/><span class="line">197</span><br/><span class="line">198</span><br/><span class="line">199</span><br/><span class="line">200</span><br/><span class="line">201</span><br/><span class="line">202</span><br/><span class="line">203</span><br/><span class="line">204</span><br/><span class="line">205</span><br/><span class="line">206</span><br/><span class="line">207</span><br/><span class="line">208</span><br/><span class="line">209</span><br/><span class="line">210</span><br/><span class="line">211</span><br/><span class="line">212</span><br/><span class="line">213</span><br/><span class="line">214</span><br/><span class="line">215</span><br/><span class="line">216</span><br/><span class="line">217</span><br/><span class="line">218</span><br/><span class="line">219</span><br/><span class="line">220</span><br/><span class="line">221</span><br/><span class="line">222</span><br/><span class="line">223</span><br/><span class="line">224</span><br/><span class="line">225</span><br/><span class="line">226</span><br/><span class="line">227</span><br/><span class="line">228</span><br/><span class="line">229</span><br/><span class="line">230</span><br/><span class="line">231</span><br/><span class="line">232</span><br/><span class="line">233</span><br/><span class="line">234</span><br/><span class="line">235</span><br/><span class="line">236</span><br/><span class="line">237</span><br/><span class="line">238</span><br/><span class="line">239</span><br/><span class="line">240</span><br/><span class="line">241</span><br/><span class="line">242</span><br/><span class="line">243</span><br/><span class="line">244</span><br/><span class="line">245</span><br/><span class="line">246</span><br/><span class="line">247</span><br/><span class="line">248</span><br/><span class="line">249</span><br/><span class="line">250</span><br/><span class="line">251</span><br/><span class="line">252</span><br/><span class="line">253</span><br/><span class="line">254</span><br/><span class="line">255</span><br/><span class="line">256</span><br/><span class="line">257</span><br/><span class="line">258</span><br/><span class="line">259</span><br/><span class="line">260</span><br/><span class="line">261</span><br/><span class="line">262</span><br/><span class="line">263</span><br/><span class="line">264</span><br/><span class="line">265</span><br/><span class="line">266</span><br/><span class="line">267</span><br/><span class="line">268</span><br/><span class="line">269</span><br/><span class="line">270</span><br/><span class="line">271</span><br/><span class="line">272</span><br/><span class="line">273</span><br/><span class="line">274</span><br/><span class="line">275</span><br/><span class="line">276</span><br/><span class="line">277</span><br/><span class="line">278</span><br/><span class="line">279</span><br/><span class="line">280</span><br/><span class="line">281</span><br/><span class="line">282</span><br/><span class="line">283</span><br/><span class="line">284</span><br/><span class="line">285</span><br/><span class="line">286</span><br/><span class="line">287</span><br/><span class="line">288</span><br/><span class="line">289</span><br/><span class="line">290</span><br/><span class="line">291</span><br/><span class="line">292</span><br/><span class="line">293</span><br/><span class="line">294</span><br/><span class="line">295</span><br/><span class="line">296</span><br/><span class="line">297</span><br/><span class="line">298</span><br/><span class="line">299</span><br/><span class="line">300</span><br/><span class="line">301</span><br/><span class="line">302</span><br/><span class="line">303</span><br/><span class="line">304</span><br/><span class="line">305</span><br/><span class="line">306</span><br/><span class="line">307</span><br/><span class="line">308</span><br/><span class="line">309</span><br/><span class="line">310</span><br/><span class="line">311</span><br/><span class="line">312</span><br/><span class="line">313</span><br/><span class="line">314</span><br/><span class="line">315</span><br/><span class="line">316</span><br/><span class="line">317</span><br/><span class="line">318</span><br/><span class="line">319</span><br/><span class="line">320</span><br/><span class="line">321</span><br/><span class="line">322</span><br/><span class="line">323</span><br/><span class="line">324</span><br/><span class="line">325</span><br/><span class="line">326</span><br/><span class="line">327</span><br/><span class="line">328</span><br/><span class="line">329</span><br/><span class="line">330</span><br/><span class="line">331</span><br/><span class="line">332</span><br/><span class="line">333</span><br/><span class="line">334</span><br/><span class="line">335</span><br/><span class="line">336</span><br/><span class="line">337</span><br/><span class="line">338</span><br/><span class="line">339</span><br/><span class="line">340</span><br/><span class="line">341</span><br/><span class="line">342</span><br/><span class="line">343</span><br/><span class="line">344</span><br/><span class="line">345</span><br/><span class="line">346</span><br/><span class="line">347</span><br/><span class="line">348</span><br/><span class="line">349</span><br/><span class="line">350</span><br/><span class="line">351</span><br/><span class="line">352</span><br/><span class="line">353</span><br/><span class="line">354</span><br/><span class="line">355</span><br/><span class="line">356</span><br/><span class="line">357</span><br/><span class="line">358</span><br/><span class="line">359</span><br/><span class="line">360</span><br/><span class="line">361</span><br/><span class="line">362</span><br/><span class="line">363</span><br/><span class="line">364</span><br/><span class="line">365</span><br/><span class="line">366</span><br/><span class="line">367</span><br/><span class="line">368</span><br/><span class="line">369</span><br/><span class="line">370</span><br/><span class="line">371</span><br/><span class="line">372</span><br/><span class="line">373</span><br/><span class="line">374</span><br/><span class="line">375</span><br/><span class="line">376</span><br/><span class="line">377</span><br/><span class="line">378</span><br/><span class="line">379</span><br/><span class="line">380</span><br/><span class="line">381</span><br/><span class="line">382</span><br/><span class="line">383</span><br/><span class="line">384</span><br/><span class="line">385</span><br/><span class="line">386</span><br/><span class="line">387</span><br/><span class="line">388</span><br/><span class="line">389</span><br/><span class="line">390</span><br/><span class="line">391</span><br/><span class="line">392</span><br/><span class="line">393</span><br/><span class="line">394</span><br/><span class="line">395</span><br/><span class="line">396</span><br/><span class="line">397</span><br/><span class="line">398</span><br/><span class="line">399</span><br/><span class="line">400</span><br/><span class="line">401</span><br/><span class="line">402</span><br/><span class="line">403</span><br/><span class="line">404</span><br/><span class="line">405</span><br/><span class="line">406</span><br/><span class="line">407</span><br/><span class="line">408</span><br/><span class="line">409</span><br/><span class="line">410</span><br/><span class="line">411</span><br/><span class="line">412</span><br/><span class="line">413</span><br/><span class="line">414</span><br/><span class="line">415</span><br/><span class="line">416</span><br/><span class="line">417</span><br/><span class="line">418</span><br/><span class="line">419</span><br/><span class="line">420</span><br/><span class="line">421</span><br/><span class="line">422</span><br/><span class="line">423</span><br/><span class="line">424</span><br/><span class="line">425</span><br/><span class="line">426</span><br/><span class="line">427</span><br/><span class="line">428</span><br/><span class="line">429</span><br/><span class="line">430</span><br/><span class="line">431</span><br/><span class="line">432</span><br/><span class="line">433</span><br/><span class="line">434</span><br/><span class="line">435</span><br/><span class="line">436</span><br/><span class="line">437</span><br/><span class="line">438</span><br/><span class="line">439</span><br/><span class="line">440</span><br/><span class="line">441</span><br/><span class="line">442</span><br/><span class="line">443</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.maven.model.DependencyManagement;</span><br/><span class="line"><span class="keyword">import</span> org.apache.maven.model.DistributionManagement;</span><br/><span class="line"><span class="keyword">import</span> org.apache.maven.model.License;</span><br/><span class="line"><span class="keyword">import</span> org.apache.maven.model.Model;</span><br/><span class="line"><span class="keyword">import</span> org.apache.maven.model.Prerequisites;</span><br/><span class="line"><span class="keyword">import</span> org.apache.maven.model.Relocation;</span><br/><span class="line"><span class="keyword">import</span> org.apache.maven.model.Repository;</span><br/><span class="line"><span class="keyword">import</span> org.apache.maven.model.building.DefaultModelBuilderFactory;</span><br/><span class="line"><span class="keyword">import</span> org.apache.maven.model.building.DefaultModelBuildingRequest;</span><br/><span class="line"><span class="keyword">import</span> org.apache.maven.model.building.FileModelSource;</span><br/><span class="line"><span class="keyword">import</span> org.apache.maven.model.building.ModelBuilder;</span><br/><span class="line"><span class="keyword">import</span> org.apache.maven.model.building.ModelBuildingException;</span><br/><span class="line"><span class="keyword">import</span> org.apache.maven.model.building.ModelBuildingRequest;</span><br/><span class="line"><span class="keyword">import</span> org.apache.maven.model.building.ModelProblem;</span><br/><span class="line"><span class="keyword">import</span> org.apache.maven.model.resolution.UnresolvableModelException;</span><br/><span class="line"><span class="keyword">import</span> org.apache.maven.repository.internal.ArtifactDescriptorUtils;</span><br/><span class="line"><span class="keyword">import</span> org.codehaus.plexus.component.annotations.Component;</span><br/><span class="line"><span class="keyword">import</span> org.codehaus.plexus.component.annotations.Requirement;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.RepositoryEvent;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.RepositoryEvent.EventType;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.RepositoryException;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.RepositorySystemSession;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.RequestTrace;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.artifact.Artifact;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.artifact.ArtifactProperties;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.artifact.ArtifactType;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.artifact.ArtifactTypeRegistry;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.artifact.DefaultArtifact;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.artifact.DefaultArtifactType;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.graph.Dependency;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.graph.Exclusion;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.impl.ArtifactDescriptorReader;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.impl.ArtifactResolver;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.impl.RemoteRepositoryManager;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.impl.RepositoryEventDispatcher;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.impl.VersionResolver;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.repository.WorkspaceRepository;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.resolution.ArtifactDescriptorException;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.resolution.ArtifactDescriptorPolicy;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.resolution.ArtifactDescriptorPolicyRequest;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.resolution.ArtifactDescriptorRequest;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.resolution.ArtifactDescriptorResult;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.resolution.ArtifactRequest;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.resolution.ArtifactResolutionException;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.resolution.ArtifactResult;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.resolution.VersionRequest;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.resolution.VersionResolutionException;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.resolution.VersionResult;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.spi.locator.Service;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.spi.locator.ServiceLocator;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.spi.log.Logger;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.spi.log.LoggerFactory;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.spi.log.NullLoggerFactory;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.transfer.ArtifactNotFoundException;</span><br/><span class="line"></span><br/><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br/><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br/><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br/><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br/><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br/><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br/><span class="line"><span class="keyword">import</span> java.util.List;</span><br/><span class="line"><span class="keyword">import</span> java.util.Map;</span><br/><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br/><span class="line"><span class="keyword">import</span> java.util.Set;</span><br/><span class="line"></span><br/><span class="line"><span class="keyword">import</span> javax.inject.Inject;</span><br/><span class="line"><span class="keyword">import</span> javax.inject.Named;</span><br/><span class="line"></span><br/><span class="line"><span class="meta">@Named</span></span><br/><span class="line"><span class="meta">@Component(role = ArtifactDescriptorReader.class)</span></span><br/><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompactAARArtifactDescriptorReader</span></span><br/><span class="line">        <span class="keyword">implements</span> <span class="title class_">ArtifactDescriptorReader</span>, Service {</span><br/><span class="line"></span><br/><span class="line">    <span class="meta">@SuppressWarnings(&#34;unused&#34;)</span></span><br/><span class="line">    <span class="meta">@Requirement(role = LoggerFactory.class)</span></span><br/><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> NullLoggerFactory.LOGGER;</span><br/><span class="line"></span><br/><span class="line">    <span class="meta">@Requirement</span></span><br/><span class="line">    <span class="keyword">private</span> RemoteRepositoryManager remoteRepositoryManager;</span><br/><span class="line"></span><br/><span class="line">    <span class="meta">@Requirement</span></span><br/><span class="line">    <span class="keyword">private</span> VersionResolver versionResolver;</span><br/><span class="line"></span><br/><span class="line">    <span class="meta">@Requirement</span></span><br/><span class="line">    <span class="keyword">private</span> ArtifactResolver artifactResolver;</span><br/><span class="line"></span><br/><span class="line">    <span class="meta">@Requirement</span></span><br/><span class="line">    <span class="keyword">private</span> RepositoryEventDispatcher repositoryEventDispatcher;</span><br/><span class="line"></span><br/><span class="line">    <span class="meta">@Requirement</span></span><br/><span class="line">    <span class="keyword">private</span> ModelBuilder modelBuilder;</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">public</span> <span class="title function_">CompactAARArtifactDescriptorReader</span><span class="params">()</span> {</span><br/><span class="line">        <span class="comment">// enable no-arg constructor</span></span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="meta">@Inject</span></span><br/><span class="line">    CompactAARArtifactDescriptorReader(RemoteRepositoryManager remoteRepositoryManager, VersionResolver versionResolver,</span><br/><span class="line">                                       ArtifactResolver artifactResolver, ModelBuilder modelBuilder,</span><br/><span class="line">                                       RepositoryEventDispatcher repositoryEventDispatcher, LoggerFactory loggerFactory) {</span><br/><span class="line">        setRemoteRepositoryManager(remoteRepositoryManager);</span><br/><span class="line">        setVersionResolver(versionResolver);</span><br/><span class="line">        setArtifactResolver(artifactResolver);</span><br/><span class="line">        setModelBuilder(modelBuilder);</span><br/><span class="line">        setLoggerFactory(loggerFactory);</span><br/><span class="line">        setRepositoryEventDispatcher(repositoryEventDispatcher);</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initService</span><span class="params">(ServiceLocator locator)</span> {</span><br/><span class="line">        setLoggerFactory(locator.getService(LoggerFactory.class));</span><br/><span class="line">        setRemoteRepositoryManager(locator.getService(RemoteRepositoryManager.class));</span><br/><span class="line">        setVersionResolver(locator.getService(VersionResolver.class));</span><br/><span class="line">        setArtifactResolver(locator.getService(ArtifactResolver.class));</span><br/><span class="line">        setRepositoryEventDispatcher(locator.getService(RepositoryEventDispatcher.class));</span><br/><span class="line">        modelBuilder = locator.getService(ModelBuilder.class);</span><br/><span class="line">        <span class="keyword">if</span> (modelBuilder == <span class="literal">null</span>) {</span><br/><span class="line">            setModelBuilder(<span class="keyword">new</span> <span class="title class_">DefaultModelBuilderFactory</span>().newInstance());</span><br/><span class="line">        }</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">public</span> CompactAARArtifactDescriptorReader <span class="title function_">setLoggerFactory</span><span class="params">(LoggerFactory loggerFactory)</span> {</span><br/><span class="line">        <span class="built_in">this</span>.logger = NullLoggerFactory.getSafeLogger(loggerFactory, getClass());</span><br/><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">void</span> <span class="title function_">setLogger</span><span class="params">(LoggerFactory loggerFactory)</span> {</span><br/><span class="line">        <span class="comment">// plexus support</span></span><br/><span class="line">        setLoggerFactory(loggerFactory);</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">public</span> CompactAARArtifactDescriptorReader <span class="title function_">setRemoteRepositoryManager</span><span class="params">(RemoteRepositoryManager remoteRepositoryManager)</span> {</span><br/><span class="line">        <span class="keyword">if</span> (remoteRepositoryManager == <span class="literal">null</span>) {</span><br/><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&#34;remote repository manager has not been specified&#34;</span>);</span><br/><span class="line">        }</span><br/><span class="line">        <span class="built_in">this</span>.remoteRepositoryManager = remoteRepositoryManager;</span><br/><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">public</span> CompactAARArtifactDescriptorReader <span class="title function_">setVersionResolver</span><span class="params">(VersionResolver versionResolver)</span> {</span><br/><span class="line">        <span class="keyword">if</span> (versionResolver == <span class="literal">null</span>) {</span><br/><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&#34;version resolver has not been specified&#34;</span>);</span><br/><span class="line">        }</span><br/><span class="line">        <span class="built_in">this</span>.versionResolver = versionResolver;</span><br/><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">public</span> CompactAARArtifactDescriptorReader <span class="title function_">setArtifactResolver</span><span class="params">(ArtifactResolver artifactResolver)</span> {</span><br/><span class="line">        <span class="keyword">if</span> (artifactResolver == <span class="literal">null</span>) {</span><br/><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&#34;artifact resolver has not been specified&#34;</span>);</span><br/><span class="line">        }</span><br/><span class="line">        <span class="built_in">this</span>.artifactResolver = artifactResolver;</span><br/><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">public</span> CompactAARArtifactDescriptorReader <span class="title function_">setRepositoryEventDispatcher</span><span class="params">(RepositoryEventDispatcher repositoryEventDispatcher)</span> {</span><br/><span class="line">        <span class="keyword">if</span> (repositoryEventDispatcher == <span class="literal">null</span>) {</span><br/><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&#34;repository event dispatcher has not been specified&#34;</span>);</span><br/><span class="line">        }</span><br/><span class="line">        <span class="built_in">this</span>.repositoryEventDispatcher = repositoryEventDispatcher;</span><br/><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">public</span> CompactAARArtifactDescriptorReader <span class="title function_">setModelBuilder</span><span class="params">(ModelBuilder modelBuilder)</span> {</span><br/><span class="line">        <span class="keyword">if</span> (modelBuilder == <span class="literal">null</span>) {</span><br/><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&#34;model builder has not been specified&#34;</span>);</span><br/><span class="line">        }</span><br/><span class="line">        <span class="built_in">this</span>.modelBuilder = modelBuilder;</span><br/><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">public</span> ArtifactDescriptorResult <span class="title function_">readArtifactDescriptor</span><span class="params">(RepositorySystemSession session,</span></span><br/><span class="line"><span class="params">                                                           ArtifactDescriptorRequest request)</span></span><br/><span class="line">            <span class="keyword">throws</span> ArtifactDescriptorException {</span><br/><span class="line">        <span class="type">ArtifactDescriptorResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArtifactDescriptorResult</span>(request);</span><br/><span class="line"></span><br/><span class="line">        <span class="type">Model</span> <span class="variable">model</span> <span class="operator">=</span> loadPom(session, request, result);</span><br/><span class="line"></span><br/><span class="line">        <span class="keyword">if</span> (model != <span class="literal">null</span>) {</span><br/><span class="line">            <span class="type">ArtifactTypeRegistry</span> <span class="variable">stereotypes</span> <span class="operator">=</span> session.getArtifactTypeRegistry();</span><br/><span class="line"></span><br/><span class="line">            <span class="keyword">for</span> (Repository r : model.getRepositories()) {</span><br/><span class="line">                result.addRepository(ArtifactDescriptorUtils.toRemoteRepository(r));</span><br/><span class="line">            }</span><br/><span class="line"></span><br/><span class="line">            <span class="keyword">for</span> (org.apache.maven.model.Dependency dependency : model.getDependencies()) {</span><br/><span class="line">                result.addDependency(convert(dependency, stereotypes));</span><br/><span class="line">            }</span><br/><span class="line"></span><br/><span class="line">            <span class="type">DependencyManagement</span> <span class="variable">mngt</span> <span class="operator">=</span> model.getDependencyManagement();</span><br/><span class="line">            <span class="keyword">if</span> (mngt != <span class="literal">null</span>) {</span><br/><span class="line">                <span class="keyword">for</span> (org.apache.maven.model.Dependency dependency : mngt.getDependencies()) {</span><br/><span class="line">                    result.addManagedDependency(convert(dependency, stereotypes));</span><br/><span class="line">                }</span><br/><span class="line">            }</span><br/><span class="line"></span><br/><span class="line">            Map&lt;String, Object&gt; properties = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;String, Object&gt;();</span><br/><span class="line"></span><br/><span class="line">            <span class="type">Prerequisites</span> <span class="variable">prerequisites</span> <span class="operator">=</span> model.getPrerequisites();</span><br/><span class="line">            <span class="keyword">if</span> (prerequisites != <span class="literal">null</span>) {</span><br/><span class="line">                properties.put(<span class="string">&#34;prerequisites.maven&#34;</span>, prerequisites.getMaven());</span><br/><span class="line">            }</span><br/><span class="line"></span><br/><span class="line">            List&lt;License&gt; licenses = model.getLicenses();</span><br/><span class="line">            properties.put(<span class="string">&#34;license.count&#34;</span>, licenses.size());</span><br/><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; licenses.size(); i++) {</span><br/><span class="line">                <span class="type">License</span> <span class="variable">license</span> <span class="operator">=</span> licenses.get(i);</span><br/><span class="line">                properties.put(<span class="string">&#34;license.&#34;</span> + i + <span class="string">&#34;.name&#34;</span>, license.getName());</span><br/><span class="line">                properties.put(<span class="string">&#34;license.&#34;</span> + i + <span class="string">&#34;.url&#34;</span>, license.getUrl());</span><br/><span class="line">                properties.put(<span class="string">&#34;license.&#34;</span> + i + <span class="string">&#34;.comments&#34;</span>, license.getComments());</span><br/><span class="line">                properties.put(<span class="string">&#34;license.&#34;</span> + i + <span class="string">&#34;.distribution&#34;</span>, license.getDistribution());</span><br/><span class="line">            }</span><br/><span class="line"></span><br/><span class="line">            result.setProperties(properties);</span><br/><span class="line"></span><br/><span class="line">            setArtifactProperties(result, model);</span><br/><span class="line">        }</span><br/><span class="line"></span><br/><span class="line">        <span class="keyword">return</span> result;</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">private</span> Model <span class="title function_">loadPom</span><span class="params">(RepositorySystemSession session, ArtifactDescriptorRequest request,</span></span><br/><span class="line"><span class="params">                          ArtifactDescriptorResult result)</span></span><br/><span class="line">            <span class="keyword">throws</span> ArtifactDescriptorException {</span><br/><span class="line">        <span class="type">RequestTrace</span> <span class="variable">trace</span> <span class="operator">=</span> RequestTrace.newChild(request.getTrace(), request);</span><br/><span class="line"></span><br/><span class="line">        Set&lt;String&gt; visited = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;String&gt;();</span><br/><span class="line">        <span class="keyword">for</span> (<span class="type">Artifact</span> <span class="variable">artifact</span> <span class="operator">=</span> request.getArtifact(); ; ) {</span><br/><span class="line">            <span class="keyword">try</span> {</span><br/><span class="line">                <span class="type">VersionRequest</span> <span class="variable">versionRequest</span> <span class="operator">=</span></span><br/><span class="line">                        <span class="keyword">new</span> <span class="title class_">VersionRequest</span>(artifact, request.getRepositories(), request.getRequestContext());</span><br/><span class="line">                versionRequest.setTrace(trace);</span><br/><span class="line">                <span class="type">VersionResult</span> <span class="variable">versionResult</span> <span class="operator">=</span> versionResolver.resolveVersion(session, versionRequest);</span><br/><span class="line"></span><br/><span class="line">                artifact = artifact.setVersion(versionResult.getVersion());</span><br/><span class="line">            } <span class="keyword">catch</span> (VersionResolutionException e) {</span><br/><span class="line">                result.addException(e);</span><br/><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArtifactDescriptorException</span>(result);</span><br/><span class="line">            }</span><br/><span class="line"></span><br/><span class="line">            <span class="keyword">if</span> (!visited.add(artifact.getGroupId() + <span class="string">&#39;:&#39;</span> + artifact.getArtifactId() + <span class="string">&#39;:&#39;</span> + artifact.getBaseVersion())) {</span><br/><span class="line">                <span class="type">RepositoryException</span> <span class="variable">exception</span> <span class="operator">=</span></span><br/><span class="line">                        <span class="keyword">new</span> <span class="title class_">RepositoryException</span>(<span class="string">&#34;Artifact relocations form a cycle: &#34;</span> + visited);</span><br/><span class="line">                invalidDescriptor(session, trace, artifact, exception);</span><br/><span class="line">                <span class="keyword">if</span> ((getPolicy(session, artifact, request) &amp; ArtifactDescriptorPolicy.IGNORE_INVALID) != <span class="number">0</span>) {</span><br/><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br/><span class="line">                }</span><br/><span class="line">                result.addException(exception);</span><br/><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArtifactDescriptorException</span>(result);</span><br/><span class="line">            }</span><br/><span class="line"></span><br/><span class="line">            <span class="type">Artifact</span> <span class="variable">pomArtifact</span> <span class="operator">=</span> ArtifactDescriptorUtils.toPomArtifact(artifact);</span><br/><span class="line"></span><br/><span class="line">            ArtifactResult resolveResult;</span><br/><span class="line">            <span class="keyword">try</span> {</span><br/><span class="line">                <span class="type">ArtifactRequest</span> <span class="variable">resolveRequest</span> <span class="operator">=</span></span><br/><span class="line">                        <span class="keyword">new</span> <span class="title class_">ArtifactRequest</span>(pomArtifact, request.getRepositories(), request.getRequestContext());</span><br/><span class="line">                resolveRequest.setTrace(trace);</span><br/><span class="line">                resolveResult = artifactResolver.resolveArtifact(session, resolveRequest);</span><br/><span class="line">                pomArtifact = resolveResult.getArtifact();</span><br/><span class="line">                result.setRepository(resolveResult.getRepository());</span><br/><span class="line">            } <span class="keyword">catch</span> (ArtifactResolutionException e) {</span><br/><span class="line">                <span class="keyword">if</span> (e.getCause() <span class="keyword">instanceof</span> ArtifactNotFoundException) {</span><br/><span class="line">                    missingDescriptor(session, trace, artifact, (Exception) e.getCause());</span><br/><span class="line">                    <span class="keyword">if</span> ((getPolicy(session, artifact, request) &amp; ArtifactDescriptorPolicy.IGNORE_MISSING) != <span class="number">0</span>) {</span><br/><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br/><span class="line">                    }</span><br/><span class="line">                }</span><br/><span class="line">                result.addException(e);</span><br/><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArtifactDescriptorException</span>(result);</span><br/><span class="line">            }</span><br/><span class="line"></span><br/><span class="line">            Model model;</span><br/><span class="line">            <span class="keyword">try</span> {</span><br/><span class="line">                <span class="type">ModelBuildingRequest</span> <span class="variable">modelRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultModelBuildingRequest</span>();</span><br/><span class="line">                modelRequest.setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL);</span><br/><span class="line">                modelRequest.setProcessPlugins(<span class="literal">false</span>);</span><br/><span class="line">                modelRequest.setTwoPhaseBuilding(<span class="literal">false</span>);</span><br/><span class="line">                modelRequest.setSystemProperties(toProperties(session.getUserProperties(),</span><br/><span class="line">                        session.getSystemProperties()));</span><br/><span class="line">                modelRequest.setModelCache(</span><br/><span class="line">                        Reflect.on(<span class="string">&#34;org.apache.maven.repository.internal.DefaultModelCache&#34;</span>)</span><br/><span class="line">                                .call(<span class="string">&#34;newInstance&#34;</span>, session).get());</span><br/><span class="line">                <span class="comment">//modelRequest.setModelCache( DefaultModelCache.newInstance( session ) );</span></span><br/><span class="line">                modelRequest.setModelResolver(</span><br/><span class="line">                        Reflect.on(<span class="string">&#34;org.apache.maven.repository.internal.DefaultModelResolver&#34;</span>)</span><br/><span class="line">                                .create(session, trace.newChild(modelRequest),</span><br/><span class="line">                                        request.getRequestContext(), artifactResolver,</span><br/><span class="line">                                        remoteRepositoryManager,</span><br/><span class="line">                                        request.getRepositories())</span><br/><span class="line">                                .get());</span><br/><span class="line"><span class="comment">//              modelRequest.setModelResolver(new DefaultModelResolver(session, trace.newChild(modelRequest),</span></span><br/><span class="line"><span class="comment">//                        request.getRequestContext(), artifactResolver,</span></span><br/><span class="line"><span class="comment">//                        remoteRepositoryManager,</span></span><br/><span class="line"><span class="comment">//                        request.getRepositories()));</span></span><br/><span class="line">                <span class="keyword">if</span> (resolveResult.getRepository() <span class="keyword">instanceof</span> WorkspaceRepository) {</span><br/><span class="line">                    modelRequest.setPomFile(pomArtifact.getFile());</span><br/><span class="line">                } <span class="keyword">else</span> {</span><br/><span class="line">                    modelRequest.setModelSource(<span class="keyword">new</span> <span class="title class_">FileModelSource</span>(pomArtifact.getFile()));</span><br/><span class="line">                }</span><br/><span class="line"></span><br/><span class="line">                model = modelBuilder.build(modelRequest).getEffectiveModel();</span><br/><span class="line">            } <span class="keyword">catch</span> (ModelBuildingException e) {</span><br/><span class="line">                <span class="keyword">for</span> (ModelProblem problem : e.getProblems()) {</span><br/><span class="line">                    <span class="keyword">if</span> (problem.getException() <span class="keyword">instanceof</span> UnresolvableModelException) {</span><br/><span class="line">                        result.addException(problem.getException());</span><br/><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArtifactDescriptorException</span>(result);</span><br/><span class="line">                    }</span><br/><span class="line">                }</span><br/><span class="line">                invalidDescriptor(session, trace, artifact, e);</span><br/><span class="line">                <span class="keyword">if</span> ((getPolicy(session, artifact, request) &amp; ArtifactDescriptorPolicy.IGNORE_INVALID) != <span class="number">0</span>) {</span><br/><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br/><span class="line">                }</span><br/><span class="line">                result.addException(e);</span><br/><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArtifactDescriptorException</span>(result);</span><br/><span class="line">            }</span><br/><span class="line"></span><br/><span class="line">            <span class="type">Relocation</span> <span class="variable">relocation</span> <span class="operator">=</span> getRelocation(model);</span><br/><span class="line"></span><br/><span class="line">            <span class="type">String</span> <span class="variable">packaging</span> <span class="operator">=</span> model.getPackaging();</span><br/><span class="line">            <span class="keyword">if</span> (<span class="string">&#34;aar&#34;</span>.equals(packaging)) { <span class="comment">//适配aar类型</span></span><br/><span class="line">                <span class="comment">//根据POM重置artifact的extenstion</span></span><br/><span class="line">                <span class="keyword">try</span> {</span><br/><span class="line">                    Class&lt;DefaultArtifact&gt; artifactCls = DefaultArtifact.class;</span><br/><span class="line">                    <span class="type">Field</span> <span class="variable">extension</span> <span class="operator">=</span> artifactCls.getDeclaredField(<span class="string">&#34;extension&#34;</span>);</span><br/><span class="line">                    extension.setAccessible(<span class="literal">true</span>);</span><br/><span class="line">                    extension.set(result.getArtifact(), model.getPackaging());</span><br/><span class="line">                } <span class="keyword">catch</span> (Exception e) {</span><br/><span class="line">                    e.printStackTrace();</span><br/><span class="line">                }</span><br/><span class="line">            }</span><br/><span class="line"></span><br/><span class="line">            <span class="keyword">if</span> (relocation != <span class="literal">null</span>) {</span><br/><span class="line">                result.addRelocation(artifact);</span><br/><span class="line">                artifact = Reflect.on(<span class="string">&#34;org.apache.maven.repository.internal.RelocatedArtifact&#34;</span>)</span><br/><span class="line">                        .create(artifact, relocation.getGroupId(), relocation.getArtifactId(),</span><br/><span class="line">                                relocation.getVersion()).get();</span><br/><span class="line"></span><br/><span class="line"><span class="comment">//                artifact =</span></span><br/><span class="line"><span class="comment">//                        new RelocatedArtifact(artifact, relocation.getGroupId(), relocation.getArtifactId(),</span></span><br/><span class="line"><span class="comment">//                                relocation.getVersion());</span></span><br/><span class="line">                result.setArtifact(artifact);</span><br/><span class="line">            } <span class="keyword">else</span> {</span><br/><span class="line">                <span class="keyword">return</span> model;</span><br/><span class="line">            }</span><br/><span class="line">        }</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">private</span> Properties <span class="title function_">toProperties</span><span class="params">(Map&lt;String, String&gt; dominant, Map&lt;String, String&gt; recessive)</span> {</span><br/><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br/><span class="line">        <span class="keyword">if</span> (recessive != <span class="literal">null</span>) {</span><br/><span class="line">            props.putAll(recessive);</span><br/><span class="line">        }</span><br/><span class="line">        <span class="keyword">if</span> (dominant != <span class="literal">null</span>) {</span><br/><span class="line">            props.putAll(dominant);</span><br/><span class="line">        }</span><br/><span class="line">        <span class="keyword">return</span> props;</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">private</span> Relocation <span class="title function_">getRelocation</span><span class="params">(Model model)</span> {</span><br/><span class="line">        <span class="type">Relocation</span> <span class="variable">relocation</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br/><span class="line">        <span class="type">DistributionManagement</span> <span class="variable">distMngt</span> <span class="operator">=</span> model.getDistributionManagement();</span><br/><span class="line">        <span class="keyword">if</span> (distMngt != <span class="literal">null</span>) {</span><br/><span class="line">            relocation = distMngt.getRelocation();</span><br/><span class="line">        }</span><br/><span class="line">        <span class="keyword">return</span> relocation;</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setArtifactProperties</span><span class="params">(ArtifactDescriptorResult result, Model model)</span> {</span><br/><span class="line">        <span class="type">String</span> <span class="variable">downloadUrl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br/><span class="line">        <span class="type">DistributionManagement</span> <span class="variable">distMngt</span> <span class="operator">=</span> model.getDistributionManagement();</span><br/><span class="line">        <span class="keyword">if</span> (distMngt != <span class="literal">null</span>) {</span><br/><span class="line">            downloadUrl = distMngt.getDownloadUrl();</span><br/><span class="line">        }</span><br/><span class="line">        <span class="keyword">if</span> (downloadUrl != <span class="literal">null</span> &amp;&amp; downloadUrl.length() &gt; <span class="number">0</span>) {</span><br/><span class="line">            <span class="type">Artifact</span> <span class="variable">artifact</span> <span class="operator">=</span> result.getArtifact();</span><br/><span class="line">            Map&lt;String, String&gt; props = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;(artifact.getProperties());</span><br/><span class="line">            props.put(ArtifactProperties.DOWNLOAD_URL, downloadUrl);</span><br/><span class="line">            result.setArtifact(artifact.setProperties(props));</span><br/><span class="line">        }</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">private</span> Dependency <span class="title function_">convert</span><span class="params">(org.apache.maven.model.Dependency dependency, ArtifactTypeRegistry stereotypes)</span> {</span><br/><span class="line">        <span class="type">ArtifactType</span> <span class="variable">stereotype</span> <span class="operator">=</span> stereotypes.get(dependency.getType());</span><br/><span class="line">        <span class="keyword">if</span> (stereotype == <span class="literal">null</span>) {</span><br/><span class="line">            stereotype = <span class="keyword">new</span> <span class="title class_">DefaultArtifactType</span>(dependency.getType());</span><br/><span class="line">        }</span><br/><span class="line"></span><br/><span class="line">        <span class="type">boolean</span> <span class="variable">system</span> <span class="operator">=</span> dependency.getSystemPath() != <span class="literal">null</span> &amp;&amp; dependency.getSystemPath().length() &gt; <span class="number">0</span>;</span><br/><span class="line"></span><br/><span class="line">        Map&lt;String, String&gt; props = <span class="literal">null</span>;</span><br/><span class="line">        <span class="keyword">if</span> (system) {</span><br/><span class="line">            props = Collections.singletonMap(ArtifactProperties.LOCAL_PATH, dependency.getSystemPath());</span><br/><span class="line">        }</span><br/><span class="line"></span><br/><span class="line">        <span class="type">Artifact</span> <span class="variable">artifact</span> <span class="operator">=</span></span><br/><span class="line">                <span class="keyword">new</span> <span class="title class_">DefaultArtifact</span>(dependency.getGroupId(), dependency.getArtifactId(), dependency.getClassifier(), <span class="literal">null</span>,</span><br/><span class="line">                        dependency.getVersion(), props, stereotype);</span><br/><span class="line"></span><br/><span class="line">        List&lt;Exclusion&gt; exclusions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Exclusion&gt;(dependency.getExclusions().size());</span><br/><span class="line">        <span class="keyword">for</span> (org.apache.maven.model.Exclusion exclusion : dependency.getExclusions()) {</span><br/><span class="line">            exclusions.add(convert(exclusion));</span><br/><span class="line">        }</span><br/><span class="line"></span><br/><span class="line">        <span class="type">Dependency</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dependency</span>(artifact, dependency.getScope(), dependency.isOptional(), exclusions);</span><br/><span class="line"></span><br/><span class="line">        <span class="keyword">return</span> result;</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">private</span> Exclusion <span class="title function_">convert</span><span class="params">(org.apache.maven.model.Exclusion exclusion)</span> {</span><br/><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Exclusion</span>(exclusion.getGroupId(), exclusion.getArtifactId(), <span class="string">&#34;*&#34;</span>, <span class="string">&#34;*&#34;</span>);</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">missingDescriptor</span><span class="params">(RepositorySystemSession session, RequestTrace trace, Artifact artifact,</span></span><br/><span class="line"><span class="params">                                   Exception exception)</span> {</span><br/><span class="line">        RepositoryEvent.<span class="type">Builder</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RepositoryEvent</span>.Builder(session, EventType.ARTIFACT_DESCRIPTOR_MISSING);</span><br/><span class="line">        event.setTrace(trace);</span><br/><span class="line">        event.setArtifact(artifact);</span><br/><span class="line">        event.setException(exception);</span><br/><span class="line"></span><br/><span class="line">        repositoryEventDispatcher.dispatch(event.build());</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">invalidDescriptor</span><span class="params">(RepositorySystemSession session, RequestTrace trace, Artifact artifact,</span></span><br/><span class="line"><span class="params">                                   Exception exception)</span> {</span><br/><span class="line">        RepositoryEvent.<span class="type">Builder</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RepositoryEvent</span>.Builder(session, EventType.ARTIFACT_DESCRIPTOR_INVALID);</span><br/><span class="line">        event.setTrace(trace);</span><br/><span class="line">        event.setArtifact(artifact);</span><br/><span class="line">        event.setException(exception);</span><br/><span class="line"></span><br/><span class="line">        repositoryEventDispatcher.dispatch(event.build());</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getPolicy</span><span class="params">(RepositorySystemSession session, Artifact artifact, ArtifactDescriptorRequest request)</span> {</span><br/><span class="line">        <span class="type">ArtifactDescriptorPolicy</span> <span class="variable">policy</span> <span class="operator">=</span> session.getArtifactDescriptorPolicy();</span><br/><span class="line">        <span class="keyword">if</span> (policy == <span class="literal">null</span>) {</span><br/><span class="line">            <span class="keyword">return</span> ArtifactDescriptorPolicy.STRICT;</span><br/><span class="line">        }</span><br/><span class="line">        <span class="keyword">return</span> policy.getPolicy(session, <span class="keyword">new</span> <span class="title class_">ArtifactDescriptorPolicyRequest</span>(artifact, request.getRequestContext()));</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">}</span><br/><span class="line"></span><br/></pre></td></tr></tbody></table></figure><p><strong>提示：千万不要忘记在Factory内替换DefaultArtifactDescriptorReader为CompactAARArtifactDescriptorReader。</strong></p><h3 id="Aether的版本冲突解决方式与Gradle的不同"><a href="https://xiue233.github.io/2023/09/09/aether-manual/#Aether%E7%9A%84%E7%89%88%E6%9C%AC%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F%E4%B8%8EGradle%E7%9A%84%E4%B8%8D%E5%90%8C" class="headerlink" title="Aether的版本冲突解决方式与Gradle的不同"></a>Aether的版本冲突解决方式与Gradle的不同</h3><p>假如，使用已经兼容AAR依赖的Aether系统去下载Google的一些库，比如<code>androidx</code>系列，很大概率出现因为依赖冲突而无法下载的问题，或者即使下载了也无法正常编译。</p><p>这个问题是因为Aether和Gradle的默认版本冲突解决方式不同，Aether是就近原则，依赖程度浅的版本则优先度高，Gradle则是就近+最新原则，在本地配置内采用最近原则，在处理远程依赖的子依赖时采用最新版本。</p><h4 id="解决方法-1"><a href="https://xiue233.github.io/2023/09/09/aether-manual/#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95-1" class="headerlink" title="解决方法"></a>解决方法</h4><p>我们只需要改变依赖冲突的解决方式即可，这个需要通过RepositorySystemSession来设置。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> RepositorySystemSession <span class="title function_">newSession</span><span class="params">(RepositorySystem system, LocalRepository localRepo)</span> {</span><br/><span class="line">        <span class="type">DefaultRepositorySystemSession</span> <span class="variable">session</span> <span class="operator">=</span> MavenRepositorySystemUtils.newSession();</span><br/><span class="line">        session.setConfigProperty(ConflictResolver.CONFIG_PROP_VERBOSE, <span class="literal">true</span>);</span><br/><span class="line">        session.setConfigProperty(DependencyManagerUtils.CONFIG_PROP_VERBOSE, <span class="literal">true</span>);</span><br/><span class="line">        session.setLocalRepositoryManager(system.newLocalRepositoryManager(session, localRepo));</span><br/><span class="line">        session.setDependencyGraphTransformer(</span><br/><span class="line">            <span class="comment">//改为自定义的DependencyGraphTransformer</span></span><br/><span class="line">        );</span><br/><span class="line">        <span class="keyword">return</span> session;</span><br/><span class="line">    }</span><br/></pre></td></tr></tbody></table></figure><p>自己实现所需的依赖树裁枝方式即可。我这里比较懒省事，直接做一个LazyConflictResolver，下载依赖树上的所有依赖，之后在编译的时候取最新的版本。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.eclipse.aether.RepositoryException;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.collection.DependencyGraphTransformationContext;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.collection.DependencyGraphTransformer;</span><br/><span class="line"><span class="keyword">import</span> org.eclipse.aether.graph.DependencyNode;</span><br/><span class="line"></span><br/><span class="line"><span class="comment">/**</span></span><br/><span class="line"><span class="comment"> * 选择摆烂的ConflictResolver,遇到困难睡大觉，把困难丢给后面的人解决。</span></span><br/><span class="line"><span class="comment"> */</span></span><br/><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyConflictResolver</span> <span class="keyword">implements</span> <span class="title class_">DependencyGraphTransformer</span> {</span><br/><span class="line">    <span class="meta">@Override</span></span><br/><span class="line">    <span class="keyword">public</span> DependencyNode <span class="title function_">transformGraph</span><span class="params">(DependencyNode node, DependencyGraphTransformationContext context)</span> <span class="keyword">throws</span> RepositoryException {</span><br/><span class="line">        <span class="keyword">return</span> node;</span><br/><span class="line">    }</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure></body></html>