<html><head></head><body><p>目前 Cyber Terminal 前端的基础样式解决方案是<code>tailwindcss</code>，配合 <code>daisy UI</code> 和我自己封装的一套 <code>RxUI</code> 勉强凑合着用。<code>daisy UI</code> 的设计理念是纯 CSS 实现，不掺杂任何的 JavaScript 代码，我挺喜欢这种实现方式，纯 CSS 实现的用户界面比掺杂了 JS 的界面总是让人更放心一点。但是 CSS 终究是没有 JS 强大的，它只是一套静态布局系统，这就导致了一系列的用户体验问题。</p>
<p>比如说一个简单的弹出框。在 <code>daisy UI</code> 的解决方案中，他们使用了元素的 <code>focus</code> 状态，配合 CSS 选择器来显示弹出元素。这乍一听好像挺符合设计思想的，但是用的时候就出现了一堆问题。为了保证元素正确加载，在未显示的情况下，弹出元素上设置的并不是 <code>display: none</code>，而是 <code>visibility: hidden</code>，这就导致弹出元素即使在未显示的状态下也占据了实际空间的，只是不可见而已，可能会在某些情况下打乱布局。</p>
<p>比如，我想要实现一个可滚动的 <code>Table</code> 组件，在表格的每一列上我都放置了一系列操作按钮，对于比较危险的操作，例如删除，会有一个弹出框让用户进行二次确认。这个时候问题就来了，由于弹出框在未显示的情况下也是占据空间的，最后一列上的弹出框就会继续向下拓展，就导致了表格滚动到最后一列后还能继续向下滚动一段距离，看起来很奇怪。</p>
<p>问题还不止这一点，由于 CSS 没有类似于 <code>floating</code> 的功能，元素是无法探查可视边界的。Table 组件默认可滚动，导致内部元素的溢出行为是<code>clip</code>，于是把溢出窗口的对话框一起给切了。不只是对话框，还有 <code>tooltip</code> 之类的东西，会变成这个样子：</p>
<p></p>
<p>嘛……虽然应该没人拿宽度这么巧的设备打CTF……但是这个行为太蠢了，我写的时候得时时刻刻注意着弹出位置，放左边溢出了，放右边也溢出了，放下边好消息是没溢出，坏消息是给滚动条撑起来了……</p>
<p></p>
<p>于是我就开始找解决方案，找着找着找到了Microsoft在油管上发的<a href="https://www.youtube.com/watch?v=yhzAn4A1gbk" target="_blank" rel="noopener noreffer ">Fluent UI Design相关视频</a>。他们最终选了 <a href="https://popper.js.org/" target="_blank" rel="noopener noreffer ">popper.js</a> 作为弹出式组件的解决方案。但是……这个组件只有 React 框架的集成方案，Vue 的几个第三方集成方案都不太好使了。</p>
<p>还是自己写吧……</p>
<p>最终选用了 Floating UI 作为实现方案，按照svelte的生命周期简单包装了一下。相关API参考都在这里了：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-typescript" data-lang="typescript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">computePosition</span><span class="p">,</span> <span class="nx">autoUpdate</span><span class="p">,</span> <span class="nx">offset</span><span class="p">,</span> <span class="nx">shift</span><span class="p">,</span> <span class="nx">flip</span> <span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;@floating-ui/dom&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/** Placement https://floating-ui.com/docs/computePosition#placement */</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">type</span> <span class="nx">Direction</span> <span class="o">=</span> <span class="s1">&#39;top&#39;</span> <span class="o">|</span> <span class="s1">&#39;bottom&#39;</span> <span class="o">|</span> <span class="s1">&#39;left&#39;</span> <span class="o">|</span> <span class="s1">&#39;right&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">type</span> <span class="nx">Placement</span> <span class="o">=</span> <span class="nx">Direction</span> <span class="o">|</span> <span class="sb">`</span><span class="si">${</span><span class="nx">Direction</span><span class="si">}</span><span class="sb">-start`</span> <span class="o">|</span> <span class="sb">`</span><span class="si">${</span><span class="nx">Direction</span><span class="si">}</span><span class="sb">-end`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Options &amp; Middleware
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="kr">interface</span> <span class="nx">Middleware</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// Required ---
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="cm">/** Offset middleware settings: https://floating-ui.com/docs/offset */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">offset?</span>: <span class="kt">number</span> <span class="o">|</span> <span class="nx">Record</span><span class="p">&lt;</span><span class="nt">string</span><span class="err">,</span> <span class="na">unknown</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/** Shift middleware settings: https://floating-ui.com/docs/shift */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">shift?</span>: <span class="kt">Record</span><span class="p">&lt;</span><span class="nt">string</span><span class="err">,</span> <span class="na">unknown</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/** Flip middleware settings: https://floating-ui.com/docs/flip */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">flip?</span>: <span class="kt">Record</span><span class="p">&lt;</span><span class="nt">string</span><span class="err">,</span> <span class="na">unknown</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// Optional ---
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="cm">/** Size middleware settings: https://floating-ui.com/docs/size */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">size?</span>: <span class="kt">Record</span><span class="p">&lt;</span><span class="nt">string</span><span class="err">,</span> <span class="na">unknown</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/** Auto Placement middleware settings: https://floating-ui.com/docs/autoPlacement */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">autoPlacement?</span>: <span class="kt">Record</span><span class="p">&lt;</span><span class="nt">string</span><span class="err">,</span> <span class="na">unknown</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/** Hide middleware settings: https://floating-ui.com/docs/hide */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">hide?</span>: <span class="kt">Record</span><span class="p">&lt;</span><span class="nt">string</span><span class="err">,</span> <span class="na">unknown</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/** Inline middleware settings: https://floating-ui.com/docs/inline */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">inline?</span>: <span class="kt">Record</span><span class="p">&lt;</span><span class="nt">string</span><span class="err">,</span> <span class="na">unknown</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">interface</span> <span class="nx">PopupSettings</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/** Provide the event type. */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">event</span><span class="o">:</span> <span class="s1">&#39;click&#39;</span> <span class="o">|</span> <span class="s1">&#39;hover&#39;</span> <span class="o">|</span> <span class="s1">&#39;focus-blur&#39;</span> <span class="o">|</span> <span class="s1">&#39;focus-click&#39;</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/** Match the popup data value `data-popup=&#34;targetNameHere&#34;` */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">target</span>: <span class="kt">string</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/** Set the placement position. Defaults &#39;bottom&#39;. */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">placement?</span>: <span class="kt">Placement</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/** Query elements that close the popup when clicked. Defaults `&#39;a[href], button&#39;`. */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">closeQuery?</span>: <span class="kt">string</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/** Optional callback function that reports state change. */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">state</span><span class="o">?:</span> <span class="p">(</span><span class="nx">event</span><span class="o">:</span> <span class="p">{</span> <span class="nx">state</span>: <span class="kt">boolean</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="k">void</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/** Provide Floating UI middleware settings. */</span>
</span></span><span class="line"><span class="cl">  <span class="nx">middleware?</span>: <span class="kt">Middleware</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kd">function</span> <span class="nx">popup</span><span class="p">(</span><span class="nx">triggerNode</span>: <span class="kt">HTMLElement</span><span class="p">,</span> <span class="nx">args</span>: <span class="kt">PopupSettings</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// Local State
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="nx">popupState</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">open</span>: <span class="kt">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// eslint-disable-next-line @typescript-eslint/no-empty-function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">autoUpdateCleanup</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{},</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">focusableAllowedList</span> <span class="o">=</span> <span class="s1">&#39;:is(a[href], button, input, textarea, select, details, [tabindex]):not([tabindex=&#34;-1&#34;])&#39;</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">focusablePopupElements</span>: <span class="kt">HTMLElement</span><span class="p">[]</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// Elements
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kd">let</span> <span class="nx">elemPopup</span>: <span class="kt">HTMLElement</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">function</span> <span class="nx">setDomElements</span><span class="p">()</span><span class="o">:</span> <span class="k">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">elemPopup</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="sb">`[data-popup=&#34;</span><span class="si">${</span><span class="nx">args</span><span class="p">.</span><span class="nx">target</span><span class="si">}</span><span class="sb">&#34;]`</span><span class="p">)</span> <span class="o">??</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">elemPopup</span><span class="p">.</span><span class="nx">style</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">position</span><span class="o">:</span> <span class="s1">&#39;absolute&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">opacity</span><span class="o">:</span> <span class="s1">&#39;0&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">top</span><span class="o">:</span> <span class="s1">&#39;0&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">left</span><span class="o">:</span> <span class="s1">&#39;0&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">scale</span><span class="o">:</span> <span class="s1">&#39;0.95&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">display</span><span class="o">:</span> <span class="s1">&#39;none&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="nx">elemPopup</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;transition-all&#39;</span><span class="p">,</span> <span class="s1">&#39;duration-100&#39;</span><span class="p">,</span> <span class="s1">&#39;ease-in-out&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">setDomElements</span><span class="p">()</span> <span class="c1">// init
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="c1">// Render Floating UI Popup
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kd">function</span> <span class="nx">render</span><span class="p">()</span><span class="o">:</span> <span class="k">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Error handling for required Floating UI modules
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">elemPopup</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="sb">`The data-popup=&#34;</span><span class="si">${</span><span class="nx">args</span><span class="p">.</span><span class="nx">target</span><span class="si">}</span><span class="sb">&#34; element was not found.`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">computePosition</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="sb">`Floating UI &#39;computePosition&#39; not found for data-popup=&#34;</span><span class="si">${</span><span class="nx">args</span><span class="p">.</span><span class="nx">target</span><span class="si">}</span><span class="sb">&#34;.`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">offset</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="sb">`Floating UI &#39;offset&#39; not found for data-popup=&#34;</span><span class="si">${</span><span class="nx">args</span><span class="p">.</span><span class="nx">target</span><span class="si">}</span><span class="sb">&#34;.`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">shift</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="sb">`Floating UI &#39;shift&#39; not found for data-popup=&#34;</span><span class="si">${</span><span class="nx">args</span><span class="p">.</span><span class="nx">target</span><span class="si">}</span><span class="sb">&#34;.`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">flip</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="sb">`Floating UI &#39;flip&#39; not found for data-popup=&#34;</span><span class="si">${</span><span class="nx">args</span><span class="p">.</span><span class="nx">target</span><span class="si">}</span><span class="sb">&#34;.`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Floating UI Compute Position
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// https://floating-ui.com/docs/computePosition
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">computePosition</span><span class="p">(</span><span class="nx">triggerNode</span><span class="p">,</span> <span class="nx">elemPopup</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">placement</span>: <span class="kt">args.placement</span> <span class="o">??</span> <span class="s1">&#39;bottom&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1">// Middleware - NOTE: the order matters:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// https://floating-ui.com/docs/middleware#ordering
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">middleware</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// https://floating-ui.com/docs/offset
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">offset</span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">middleware</span><span class="o">?</span><span class="p">.</span><span class="nx">offset</span> <span class="o">??</span> <span class="mi">8</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// https://floating-ui.com/docs/shift
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">shift</span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">middleware</span><span class="o">?</span><span class="p">.</span><span class="nx">shift</span> <span class="o">??</span> <span class="p">{</span> <span class="nx">padding</span>: <span class="kt">8</span> <span class="p">}),</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// https://floating-ui.com/docs/flip
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">flip</span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">middleware</span><span class="o">?</span><span class="p">.</span><span class="nx">flip</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">      <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">}).</span><span class="nx">then</span><span class="p">(({</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">elemPopup</span><span class="p">.</span><span class="nx">style</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">left</span><span class="o">:</span> <span class="sb">`</span><span class="si">${</span><span class="nx">x</span><span class="si">}</span><span class="sb">px`</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">top</span><span class="o">:</span> <span class="sb">`</span><span class="si">${</span><span class="nx">y</span><span class="si">}</span><span class="sb">px`</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// State Handlers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kd">function</span> <span class="nx">open</span><span class="p">()</span><span class="o">:</span> <span class="k">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">elemPopup</span><span class="p">)</span> <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Set open state to on
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">popupState</span><span class="p">.</span><span class="nx">open</span> <span class="o">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Return the current state
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">state</span><span class="p">)</span> <span class="nx">args</span><span class="p">.</span><span class="nx">state</span><span class="p">({</span> <span class="nx">state</span>: <span class="kt">popupState.open</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Update render settings
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">render</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Update the DOM
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">elemPopup</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s1">&#39;block&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">elemPopup</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">opacity</span> <span class="o">=</span> <span class="s1">&#39;1&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="nx">elemPopup</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">scale</span> <span class="o">=</span> <span class="s1">&#39;1&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">elemPopup</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">pointerEvents</span> <span class="o">=</span> <span class="s1">&#39;auto&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Trigger Floating UI autoUpdate (open only)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// https://floating-ui.com/docs/autoUpdate
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">popupState</span><span class="p">.</span><span class="nx">autoUpdateCleanup</span> <span class="o">=</span> <span class="nx">autoUpdate</span><span class="p">(</span><span class="nx">triggerNode</span><span class="p">,</span> <span class="nx">elemPopup</span><span class="p">,</span> <span class="nx">render</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Focus the first focusable element within the popup
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">focusablePopupElements</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="kr">from</span><span class="p">(</span><span class="nx">elemPopup</span><span class="o">?</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">focusableAllowedList</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="kd">function</span> <span class="nx">close</span><span class="p">(</span><span class="nx">callback</span><span class="o">?:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">elemPopup</span><span class="p">)</span> <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Set transition duration
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kr">const</span> <span class="nx">cssTransitionDuration</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">      <span class="nb">parseFloat</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">getComputedStyle</span><span class="p">(</span><span class="nx">elemPopup</span><span class="p">).</span><span class="nx">transitionDuration</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;s&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">))</span> <span class="o">*</span> <span class="mi">1000</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Set open state to off
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">popupState</span><span class="p">.</span><span class="nx">open</span> <span class="o">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Return the current state
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">state</span><span class="p">)</span> <span class="nx">args</span><span class="p">.</span><span class="nx">state</span><span class="p">({</span> <span class="nx">state</span>: <span class="kt">popupState.open</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Update the DOM
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">elemPopup</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">opacity</span> <span class="o">=</span> <span class="s1">&#39;0&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">elemPopup</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">scale</span> <span class="o">=</span> <span class="s1">&#39;0.95&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">elemPopup</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s1">&#39;none&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span> <span class="nx">cssTransitionDuration</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">elemPopup</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">pointerEvents</span> <span class="o">=</span> <span class="s1">&#39;none&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Cleanup Floating UI autoUpdate (close only)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">popupState</span><span class="p">.</span><span class="nx">autoUpdateCleanup</span><span class="p">)</span> <span class="nx">popupState</span><span class="p">.</span><span class="nx">autoUpdateCleanup</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Trigger callback
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="nx">callback</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Event Handlers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kd">function</span> <span class="nx">toggle</span><span class="p">()</span><span class="o">:</span> <span class="k">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">popupState</span><span class="p">.</span><span class="nx">open</span> <span class="o">===</span> <span class="kc">false</span> <span class="o">?</span> <span class="nx">open</span><span class="p">()</span> <span class="o">:</span> <span class="nx">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="kd">function</span> <span class="nx">onWindowClick</span><span class="p">(</span><span class="nx">event</span>: <span class="kt">Event</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Return if the popup is not yet open
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">popupState</span><span class="p">.</span><span class="nx">open</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Return if click is the trigger element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">triggerNode</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span> <span class="kr">as</span> <span class="nx">Node</span><span class="p">))</span> <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// If click it outside the popup
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">elemPopup</span> <span class="o">&amp;&amp;</span> <span class="nx">elemPopup</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span> <span class="kr">as</span> <span class="nx">Node</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Handle Close Query State
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kr">const</span> <span class="nx">closeQueryString</span>: <span class="kt">string</span> <span class="o">=</span> <span class="nx">args</span><span class="p">.</span><span class="nx">closeQuery</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="o">?</span> <span class="s1">&#39;a[href], button&#39;</span> <span class="o">:</span> <span class="nx">args</span><span class="p">.</span><span class="nx">closeQuery</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">closableMenuElements</span> <span class="o">=</span> <span class="nx">elemPopup</span><span class="o">?</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">closeQueryString</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">closableMenuElements</span><span class="o">?</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">elem</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nx">elem</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span> <span class="kr">as</span> <span class="nx">Node</span><span class="p">))</span> <span class="nx">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Keyboard Interactions for A11y
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="nx">onWindowKeyDown</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span>: <span class="kt">KeyboardEvent</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">popupState</span><span class="p">.</span><span class="nx">open</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Handle keys
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kr">const</span> <span class="nx">key</span>: <span class="kt">string</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">key</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// On Esc key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">key</span> <span class="o">===</span> <span class="s1">&#39;Escape&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="nx">triggerNode</span><span class="p">.</span><span class="nx">focus</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="nx">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// On Tab or ArrowDown key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kr">const</span> <span class="nx">triggerMenuFocused</span>: <span class="kt">boolean</span> <span class="o">=</span> <span class="nx">popupState</span><span class="p">.</span><span class="nx">open</span> <span class="o">&amp;&amp;</span> <span class="nb">document</span><span class="p">.</span><span class="nx">activeElement</span> <span class="o">===</span> <span class="nx">triggerNode</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="nx">triggerMenuFocused</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="nx">key</span> <span class="o">===</span> <span class="s1">&#39;ArrowDown&#39;</span> <span class="o">||</span> <span class="nx">key</span> <span class="o">===</span> <span class="s1">&#39;Tab&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">      <span class="nx">focusableAllowedList</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">      <span class="nx">focusablePopupElements</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="nx">focusablePopupElements</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">focus</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Event Listeners
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">switch</span> <span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="s1">&#39;click&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">      <span class="nx">triggerNode</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">toggle</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">onWindowClick</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="s1">&#39;hover&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">      <span class="nx">triggerNode</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;mouseover&#39;</span><span class="p">,</span> <span class="nx">open</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">triggerNode</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;mouseleave&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">close</span><span class="p">(),</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="s1">&#39;focus-blur&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">      <span class="nx">triggerNode</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;focus&#39;</span><span class="p">,</span> <span class="nx">toggle</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">triggerNode</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;blur&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">close</span><span class="p">(),</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="s1">&#39;focus-click&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">      <span class="nx">triggerNode</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;focus&#39;</span><span class="p">,</span> <span class="nx">open</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">onWindowClick</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span>
</span></span><span class="line"><span class="cl">    <span class="k">default</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="sb">`Event value of &#39;</span><span class="si">${</span><span class="nx">args</span><span class="p">.</span><span class="nx">event</span><span class="si">}</span><span class="sb">&#39; is not supported.`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;keydown&#39;</span><span class="p">,</span> <span class="nx">onWindowKeyDown</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Render popup on initialization
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">render</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Lifecycle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">update</span><span class="p">(</span><span class="nx">newArgs</span>: <span class="kt">PopupSettings</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">close</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">args</span> <span class="o">=</span> <span class="nx">newArgs</span>
</span></span><span class="line"><span class="cl">        <span class="nx">render</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nx">setDomElements</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">destroy() {</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// Trigger Events
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">triggerNode</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">toggle</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">triggerNode</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s1">&#39;mouseover&#39;</span><span class="p">,</span> <span class="nx">open</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">triggerNode</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s1">&#39;mouseleave&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">close</span><span class="p">(),</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">triggerNode</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s1">&#39;focus&#39;</span><span class="p">,</span> <span class="nx">toggle</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">triggerNode</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s1">&#39;focus&#39;</span><span class="p">,</span> <span class="nx">open</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">triggerNode</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s1">&#39;blur&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">close</span><span class="p">(),</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// Window Events
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nb">window</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">onWindowClick</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nb">window</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s1">&#39;keydown&#39;</span><span class="p">,</span> <span class="nx">onWindowKeyDown</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></body></html>