<html><head></head><body><h2 id="函数部分"><a href="https://xeonds.github.io/2021/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87/#%E5%87%BD%E6%95%B0%E9%83%A8%E5%88%86" class="headerlink" title="函数部分"></a>函数部分</h2><h3 id="内联函数"><a href="https://xeonds.github.io/2021/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87/#%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0" class="headerlink" title="内联函数"></a>内联函数</h3><p>代码直接内嵌而无需跳转进入函数，<strong>执行速度更快，但存储空间占用更大</strong>。适用于函数体短且调用频繁的地方。</p><ul><li>用法</li></ul><p>在函数原型/定义前加上关键字<code>inline</code>即可。例如：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>{<span class="keyword">return</span> a+b;}</span><br/></pre></td></tr></tbody></table></figure><p>注意：<strong>内联函数不能递归</strong>。</p><blockquote><p>C语言的寄存器变量：将值存储在处理器的寄存器中，能提高运行速度。声明前加上<code>register</code>即可。不过一般很少用，因为现在编译器优化都很强了。</p></blockquote><h3 id="引用变量：-amp-的重载"><a href="https://xeonds.github.io/2021/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87/#%E5%BC%95%E7%94%A8%E5%8F%98%E9%87%8F%EF%BC%9A-amp-%E7%9A%84%E9%87%8D%E8%BD%BD" class="headerlink" title="引用变量：&amp;的重载"></a>引用变量：<code>&amp;</code>的重载</h3><p>主要用于函数的参数，以此实现传址调用，和<code>const指针</code>比较像。不过和指针又有区别：声明时就得初始化。</p><ul><li>用法：和指针声明很像：</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br/><span class="line"></span><br/><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span>{<span class="type">int</span> temp=a;a=b,b=temp;}</span><br/><span class="line"></span><br/><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br/><span class="line"><span class="function"></span>{</span><br/><span class="line">    <span class="type">int</span> rats;</span><br/><span class="line">    <span class="type">int</span> &amp;rodents = rats;</span><br/><span class="line"></span><br/><span class="line">    <span class="type">int</span> a = <span class="number">5</span>, b = <span class="number">3</span>;</span><br/><span class="line">    cout&lt;&lt;<span class="string">&#34;a=&#34;</span>&lt;&lt;a&lt;&lt;<span class="string">&#34; b=&#34;</span>&lt;&lt;b&lt;&lt;endl;</span><br/><span class="line">    <span class="built_in">swap</span>(&amp;a, &amp;b);</span><br/><span class="line">    cout&lt;&lt;<span class="string">&#34;a=:&lt;&lt;a&lt;&lt;&#34;</span> b=<span class="string">&#34;&lt;&lt;b&lt;&lt;endl;</span></span><br/><span class="line"><span class="string"></span></span><br/><span class="line"><span class="string">    return 0;    //C++可以不加</span></span><br/><span class="line"><span class="string">}</span></span><br/></pre></td></tr></tbody></table></figure><h3 id="默认参数"><a href="https://xeonds.github.io/2021/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87/#%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0" class="headerlink" title="默认参数"></a>默认参数</h3><ul><li>用法：从右往左添加：</li></ul><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">chico</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m, <span class="type">int</span> c=<span class="number">0</span>)</span></span>;</span><br/></pre></td></tr></tbody></table></figure><h3 id="函数多态"><a href="https://xeonds.github.io/2021/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87/#%E5%87%BD%E6%95%B0%E5%A4%9A%E6%80%81" class="headerlink" title="函数多态"></a>函数多态</h3><p>允许声明同名但不同参的函数。这一般用来解决对不同类型参数应用同一种操作的情况，即“泛型编程”。典型的例子如下：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">abs</span><span class="params">(<span class="type">int</span> x)</span></span>{<span class="keyword">return</span> x&gt;<span class="number">0</span>?x:-x;}</span><br/><span class="line"><span class="function"><span class="type">float</span> <span class="title">abs</span><span class="params">(<span class="type">float</span> x)</span></span>{<span class="keyword">return</span> x&gt;<span class="number">0</span>?x:-x;}</span><br/><span class="line"><span class="function"><span class="type">double</span> <span class="title">abs</span><span class="params">(<span class="type">double</span> x)</span></span>{<span class="keyword">return</span> x&gt;<span class="number">0</span>?x:-x;}</span><br/></pre></td></tr></tbody></table></figure><p>当然，也可以使用C++模板来完成。</p><h2 id="C-泛型编程"><a href="https://xeonds.github.io/2021/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87/#C-%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B" class="headerlink" title="C++泛型编程"></a>C++泛型编程</h2><p>借助模板，可以实现与数据类型无关的编程。</p></body></html>