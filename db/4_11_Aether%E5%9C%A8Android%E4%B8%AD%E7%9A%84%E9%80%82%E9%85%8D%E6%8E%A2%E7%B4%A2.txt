<html><head></head><body><p>相关文章：《<a href="https://xiue233.github.io/2023/09/09/aether-manual/" title="Aether使用指南(主体功能概述)">Aether使用指南(主体功能概述)</a>》</p><p>本文章为针对一年前技术探索的回想与记录，因时间跨度过大，有部分实现细节已经遗忘，望谅解。</p><p>因为篇幅原因，本文只做Aether的简单介绍以及在Android下的兼容开发过程，Aether的使用以及针对Gradle Dependency Conflict Resolution的适配见后续文章。</p><blockquote><p>Aether is a library for working with artifact repositories. Aether deals with the specification of local repository, remote repository, developer workspaces, artifact transports, and artifact resolution.<br/>(Aether是一个用于处理Artifact仓库的库。 Aether能够处理本地Maven仓库、远程Maven仓库、开发工作区、Artifact的传输和Artifact的解析。)</p></blockquote><h2 id="什么是Aether？我们为什么要使用Aether？"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#%E4%BB%80%E4%B9%88%E6%98%AFAether%EF%BC%9F%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8Aether%EF%BC%9F" class="headerlink" title="什么是Aether？我们为什么要使用Aether？"></a>什么是Aether？我们为什么要使用Aether？</h2><p>Aether是<em>Eclipse Foundation</em>下的一个用于Maven拉取与本地仓库管理的项目。不同于Maven，Aether是Maven包装后的可插件版。</p><p>通过Aether，开发者可以把控Artifact拉取以及存放过程中的各种细节，并自定义<em>依赖冲突解决策略</em>、<em>版本比较方案</em>、<em>依赖树遍历策略</em>等功能。</p><p>当然，因为我的目的是在Android上运行一个Maven Resolver，经过和朋友们的筛选，发现Aether较符合我们的要求(兼容度与功能丰富度)，所以使用了他。</p><p><strong>Aether现已废弃，更名为<a href="https://github.com/apache/maven-resolver">maven-resolver</a>并持续更新中。</strong></p><blockquote><p>相关链接：<br/><a href="https://projects.eclipse.org/projects/technology.aether">Aether Project Website(已废弃)</a><br/><a href="https://github.com/apache/maven-resolver">maven-resolver</a><br/><a href="https://wiki.eclipse.org/Aether">Aether Wiki</a></p></blockquote><h2 id="Aether的依赖结构"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#Aether%E7%9A%84%E4%BE%9D%E8%B5%96%E7%BB%93%E6%9E%84" class="headerlink" title="Aether的依赖结构"></a>Aether的依赖结构</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/><span class="line">42</span><br/><span class="line">43</span><br/><span class="line">44</span><br/><span class="line">45</span><br/><span class="line">46</span><br/><span class="line">47</span><br/><span class="line">48</span><br/><span class="line">49</span><br/><span class="line">50</span><br/><span class="line">51</span><br/><span class="line">52</span><br/><span class="line">53</span><br/></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;<span class="name">aetherVersion</span>&gt;</span>1.0.0.v20140518<span class="tag">&lt;/<span class="name">aetherVersion</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;<span class="name">mavenVersion</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">mavenVersion</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;<span class="name">wagonVersion</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">wagonVersion</span>&gt;</span></span><br/><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br/><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br/><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.aether<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aether-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>${aetherVersion}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.aether<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aether-util<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>${aetherVersion}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.aether<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aether-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>${aetherVersion}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.aether<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aether-connector-basic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>${aetherVersion}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.aether<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aether-transport-file<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>${aetherVersion}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.aether<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aether-transport-http<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>${aetherVersion}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.aether<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aether-transport-wagon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>${aetherVersion}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-aether-provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>${mavenVersion}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.wagon<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wagon-ssh<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br/><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>${wagonVersion}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br/><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br/><span class="line">  </span><br/><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br/></pre></td></tr></tbody></table></figure><p>上述依赖用途说明 *(摘自Aether Wiki)*：</p><ul><li>aether-api<br/>此Jar依赖包含了Aether interfaces，Aether系统的入口类是<em>org.eclipse.aether.RepositorySystem</em>。</li><li>aether-util<br/>如名，此依赖包含了许多工具类，并提供了常用系统组件。</li><li>aether-impl<br/>此依赖包含了仓库系统接口的实例化类。<strong>除非在特殊情况下，需要自定义Aether系统的内部处理逻辑，或者需要手动协同一些功能，在程序的开发过程中不建议直接访问/操作此依赖中的任何类。</strong></li><li>aether-connector-basic<br/>Artifact到远程Repository的上传和下载是通过Repository connector实现的。 这一connector一部分通用，并将部分工作委托给可插拔的传输协议和repository layouts。 因此，需要明确的是，该connector本身无法访问任何repository，必需包含一个或多个传输模块才能组合为正常运行的系统。</li><li>ether-transport-file<br/>此依赖提供了通过file或者URL访问repository的支持库。</li><li>aether-transport-http<br/>此依赖提供了访问基于http或者https协议的repository的支持库。</li><li>aether-transport-wagon<br/>此依赖基于Maven Wagon，通过已有Wagon providers来访问repository。</li><li>wagon-ssh<br/>此依赖项补充了前面提到的 aether-transport-wagon库，并添加了对使用 scp: 和 sftp: 方案进行传输的支持。 它包含在上面的 POM 片段中只是一个示例，可以使用任何符合需求的 Wagon provider；也可以根本不使用，此时，可以从依赖中删除 aether-transport-wagon。</li><li>maven-aether-provider<br/>此依赖提供了使用 Maven POM 作为Artifact descriptors并从中提取依赖关系信息。 此外，它还提供了对Maven Repository中使用的其他元数据(metadata)文件的处理。</li></ul><p><strong>注意: Aether需要1.5及以上的JDK来编译及允许。</strong></p><h2 id="针对Android的适配"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#%E9%92%88%E5%AF%B9Android%E7%9A%84%E9%80%82%E9%85%8D" class="headerlink" title="针对Android的适配"></a>针对Android的适配</h2><p>适配问题其实很简单明了，只需要抓住主要矛盾：需要什么？有什么不同导致了需要的东西缺失？以什么方式来补全缺失？</p><p>从Jre上来看(暂且不论版本问题，毕竟Aether是个老项目，Java 1.5+即可)，Android上的Jre与PC端的不同点主要在于Android上的Jre是针对Android的阉割优化版，大体内容不变，但是不包含许多javax包下的类，以及所有针对PC平台的类。</p><h3 id="剖析：需要什么？有什么不同导致了需要的东西缺失？"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#%E5%89%96%E6%9E%90%EF%BC%9A%E9%9C%80%E8%A6%81%E4%BB%80%E4%B9%88%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%E5%AF%BC%E8%87%B4%E4%BA%86%E9%9C%80%E8%A6%81%E7%9A%84%E4%B8%9C%E8%A5%BF%E7%BC%BA%E5%A4%B1%EF%BC%9F" class="headerlink" title="剖析：需要什么？有什么不同导致了需要的东西缺失？"></a>剖析：需要什么？有什么不同导致了需要的东西缺失？</h3><p>(当然，此文编造的是不断的尝试后的事后诸葛亮行为，解决问题的最好方式还是实践求真理，做个简单的demo并且不断地尝试了。)</p><p>我们仍从上述依赖配置中探索，首先针对Aether API、util、impl以及provider部分，因为只使用了基础的类，显然兼容度很高；然后，分析剩下的transport协议库，对于file部分没啥争议，毕竟Java 1.8之后才会考虑Path这个影响兼容性的东东，那么就是网络协议部分可能有问题了。</p><p>为了不纸上谈兵，我们先做一个简单的项目，并写一行，debug打包允许：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">DefaultServiceLocator</span> <span class="variable">locator</span> <span class="operator">=</span> MavenRepositorySystemUtils.newServiceLocator();</span><br/></pre></td></tr></tbody></table></figure><p>果不其然，我们可以得到一个报错:</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/></pre></td><td class="code"><pre><span class="line">java.lang.NoSuchMethodError:No direct method &lt;init&gt;(Ljavax/net/ssl/SSLSocketFactory;Lorg/apache/http/conn/ssl/X509HostnameVerifier;)V in class Lorg/apache/http/conn/ssl/SSLSocketFactory; or its super classes(declaration of &#39;org.apache.http.conn.ssl.SSLSocketFactory&#39; appears in /system/framework/framework.jar!classes3.dex)</span><br/><span class="line"></span><br/><span class="line">framework/framework.jar!classes3.dex)</span><br/><span class="line"></span><br/><span class="line">at org.eclipse.aether.transport.http.SslSocketFactory.&lt;init(SslSocketFactory.java:57)</span><br/><span class="line"></span><br/><span class="line">...</span><br/></pre></td></tr></tbody></table></figure><p>原来是<em>org.eclipse.aether.transport.http.SslSocketFactory</em>的构造方法里面出现问题了，我们顺藤摸瓜看看为啥：</p><p>(在Android Studio内，切换到Project工程结构展示，展开External Libraries，进入org.eclipse.aether.transport-http包内查找)</p><p><em>org.eclipse.aether.transport.http.SslSocketFactory</em>文件内容:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SslSocketFactory</span></span><br/><span class="line">    <span class="keyword">extends</span> <span class="title class_">org</span>.apache.http.conn.ssl.SSLSocketFactory</span><br/><span class="line">{</span><br/><span class="line">...</span><br/><span class="line">    <span class="keyword">private</span> <span class="title function_">SslSocketFactory</span><span class="params">( SSLSocketFactory socketfactory, X509HostnameVerifier hostnameVerifier,</span></span><br/><span class="line"><span class="params">                              String[] cipherSuites, String[] protocols )</span></span><br/><span class="line">    {</span><br/><span class="line">        <span class="built_in">super</span>( socketfactory, hostnameVerifier );</span><br/><span class="line"> </span><br/><span class="line">        <span class="built_in">this</span>.cipherSuites = cipherSuites;</span><br/><span class="line">        <span class="built_in">this</span>.protocols = protocols;</span><br/><span class="line">    }</span><br/><span class="line">...</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>其实在AS内可以看到这里已经显示报错了:<br/><img src="https://xiue233.github.io/images/aether_error_in_as.png" alt="AS code error"/></p><p>显然是父类根本没这个构造方法。那么问题来了，为什么在PC上的JRE可以用，Android上的却不行了？查资料可知：<br/><img src="https://xiue233.github.io/images/apache_http_client_removal.png" alt="apache_http_client_removal"/></p><p>原来是，Android这小子不识抬举，大大阉割了Apache Http提供的Android特别版，转向使用OKhttp了，导致使用不了大部分Apache Http API。</p><p>知道问题了那么解决方案是什么？</p><h3 id="以什么方式来补全缺失？"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#%E4%BB%A5%E4%BB%80%E4%B9%88%E6%96%B9%E5%BC%8F%E6%9D%A5%E8%A1%A5%E5%85%A8%E7%BC%BA%E5%A4%B1%EF%BC%9F" class="headerlink" title="以什么方式来补全缺失？"></a>以什么方式来补全缺失？</h3><h4 id="Try-1-导入-Apache-Http-Legacy-包-失败"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#Try-1-%E5%AF%BC%E5%85%A5-Apache-Http-Legacy-%E5%8C%85-%E5%A4%B1%E8%B4%A5" class="headerlink" title="Try 1: 导入 Apache Http Legacy 包 (失败)"></a>Try 1: 导入 Apache Http Legacy 包 (失败)</h4><p>导入<em>org.apache.http.legacy</em>包，但是这么简单的办法当然是不行的，在许多设备上无法成功，很小一部分设备可以。(点名批评Homo OS based AOSP，就是它兼容性最差。)</p><h4 id="Try-2-使用JarFilter替换不兼容类，改用兼容代码-失败"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#Try-2-%E4%BD%BF%E7%94%A8JarFilter%E6%9B%BF%E6%8D%A2%E4%B8%8D%E5%85%BC%E5%AE%B9%E7%B1%BB%EF%BC%8C%E6%94%B9%E7%94%A8%E5%85%BC%E5%AE%B9%E4%BB%A3%E7%A0%81-%E5%A4%B1%E8%B4%A5" class="headerlink" title="Try 2: 使用JarFilter替换不兼容类，改用兼容代码 (失败)"></a>Try 2: 使用JarFilter替换不兼容类，改用兼容代码 (失败)</h4><p><a href="https://github.com/nekocode/JarFilterPlugin">JarFilter</a>是一个用于编译时替换所依赖Jar中指定类的Gradle Plugin。</p><p>于是有了以下操作:</p><p>1.使用JarFilter移除org.eclipse.aether.transport.http.SslSocketFactory</p><p>2.改用新自定义类，来适配安卓版的Apache Http，完成相关功能</p><h5 id="实践"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#%E5%AE%9E%E8%B7%B5" class="headerlink" title="实践"></a>实践</h5><p>首先，在app模块下的build.gradle文件内添加如下内容:</p><figure class="highlight groovy"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#34;jar-filter&#34;</span></span><br/><span class="line"> </span><br/><span class="line">jarFilters {</span><br/><span class="line">    <span class="comment">//兼容安卓版本的apache SSLSocketFactory</span></span><br/><span class="line">    <span class="string">&#34;org.eclipse.aether:aether-transport-http:(.*)&#34;</span> {</span><br/><span class="line">        excludes = [</span><br/><span class="line">                <span class="string">&#39;org/eclipse/aether/transport/http/SslSocketFactory.class&#39;</span>,</span><br/><span class="line">                <span class="string">&#39;org/eclipse/aether/transport/http/SslSocketFactory\\$(.*).class&#39;</span></span><br/><span class="line">        ]</span><br/><span class="line">    }</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>再创建一个同名的替换类<em>org.eclipse.aether.transport.http.SslSocketFactory</em>，</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/><span class="line">42</span><br/><span class="line">43</span><br/><span class="line">44</span><br/><span class="line">45</span><br/><span class="line">46</span><br/><span class="line">47</span><br/><span class="line">48</span><br/><span class="line">49</span><br/><span class="line">50</span><br/><span class="line">51</span><br/><span class="line">52</span><br/><span class="line">53</span><br/><span class="line">54</span><br/><span class="line">55</span><br/><span class="line">56</span><br/><span class="line">57</span><br/><span class="line">58</span><br/><span class="line">59</span><br/><span class="line">60</span><br/><span class="line">61</span><br/><span class="line">62</span><br/><span class="line">63</span><br/><span class="line">64</span><br/><span class="line">65</span><br/><span class="line">66</span><br/><span class="line">67</span><br/><span class="line">68</span><br/><span class="line">69</span><br/><span class="line">70</span><br/><span class="line">71</span><br/><span class="line">72</span><br/><span class="line">73</span><br/><span class="line">74</span><br/><span class="line">75</span><br/><span class="line">76</span><br/><span class="line">77</span><br/><span class="line">78</span><br/><span class="line">79</span><br/><span class="line">80</span><br/><span class="line">81</span><br/><span class="line">82</span><br/><span class="line">83</span><br/><span class="line">84</span><br/><span class="line">85</span><br/><span class="line">86</span><br/><span class="line">87</span><br/><span class="line">88</span><br/><span class="line">89</span><br/><span class="line">90</span><br/><span class="line">91</span><br/><span class="line">92</span><br/><span class="line">93</span><br/><span class="line">94</span><br/><span class="line">95</span><br/><span class="line">96</span><br/><span class="line">97</span><br/><span class="line">98</span><br/><span class="line">99</span><br/><span class="line">100</span><br/><span class="line">101</span><br/><span class="line">102</span><br/><span class="line">103</span><br/><span class="line">104</span><br/><span class="line">105</span><br/><span class="line">106</span><br/><span class="line">107</span><br/><span class="line">108</span><br/><span class="line">109</span><br/><span class="line">110</span><br/><span class="line">111</span><br/><span class="line">112</span><br/><span class="line">113</span><br/><span class="line">114</span><br/><span class="line">115</span><br/><span class="line">116</span><br/><span class="line">117</span><br/><span class="line">118</span><br/><span class="line">119</span><br/><span class="line">120</span><br/><span class="line">121</span><br/><span class="line">122</span><br/><span class="line">123</span><br/><span class="line">124</span><br/><span class="line">125</span><br/><span class="line">126</span><br/><span class="line">127</span><br/><span class="line">128</span><br/><span class="line">129</span><br/><span class="line">130</span><br/><span class="line">131</span><br/><span class="line">132</span><br/><span class="line">133</span><br/><span class="line">134</span><br/><span class="line">135</span><br/><span class="line">136</span><br/><span class="line">137</span><br/><span class="line">138</span><br/><span class="line">139</span><br/><span class="line">140</span><br/><span class="line">141</span><br/><span class="line">142</span><br/><span class="line">143</span><br/><span class="line">144</span><br/><span class="line">145</span><br/><span class="line">146</span><br/><span class="line">147</span><br/><span class="line">148</span><br/><span class="line">149</span><br/><span class="line">150</span><br/><span class="line">151</span><br/><span class="line">152</span><br/><span class="line">153</span><br/><span class="line">154</span><br/><span class="line">155</span><br/><span class="line">156</span><br/><span class="line">157</span><br/><span class="line">158</span><br/><span class="line">159</span><br/><span class="line">160</span><br/><span class="line">161</span><br/><span class="line">162</span><br/><span class="line">163</span><br/><span class="line">164</span><br/><span class="line">165</span><br/><span class="line">166</span><br/><span class="line">167</span><br/><span class="line">168</span><br/><span class="line">169</span><br/><span class="line">170</span><br/><span class="line">171</span><br/><span class="line">172</span><br/><span class="line">173</span><br/><span class="line">174</span><br/><span class="line">175</span><br/><span class="line">176</span><br/><span class="line">177</span><br/><span class="line">178</span><br/><span class="line">179</span><br/><span class="line">180</span><br/><span class="line">181</span><br/><span class="line">182</span><br/></pre></td><td class="code"><pre><span class="line"></span><br/><span class="line"><span class="keyword">package</span> org.eclipse.aether.transport.http;</span><br/><span class="line"> </span><br/><span class="line"><span class="keyword">import</span> org.apache.http.conn.ConnectTimeoutException;</span><br/><span class="line"><span class="keyword">import</span> org.apache.http.conn.HttpInetSocketAddress;</span><br/><span class="line"><span class="keyword">import</span> org.apache.http.conn.scheme.HostNameResolver;</span><br/><span class="line"><span class="keyword">import</span> org.apache.http.conn.scheme.LayeredSchemeSocketFactory;</span><br/><span class="line"><span class="keyword">import</span> org.apache.http.conn.scheme.LayeredSocketFactory;</span><br/><span class="line"><span class="keyword">import</span> org.apache.http.conn.scheme.SchemeLayeredSocketFactory;</span><br/><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.X509HostnameVerifier;</span><br/><span class="line"><span class="keyword">import</span> org.apache.http.params.HttpConnectionParams;</span><br/><span class="line"><span class="keyword">import</span> org.apache.http.params.HttpParams;</span><br/><span class="line"> </span><br/><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br/><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br/><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br/><span class="line"><span class="keyword">import</span> java.net.SocketTimeoutException;</span><br/><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br/><span class="line"><span class="keyword">import</span> java.security.KeyManagementException;</span><br/><span class="line"><span class="keyword">import</span> java.security.KeyStore;</span><br/><span class="line"><span class="keyword">import</span> java.security.KeyStoreException;</span><br/><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br/><span class="line"><span class="keyword">import</span> java.security.UnrecoverableKeyException;</span><br/><span class="line"><span class="keyword">import</span> java.security.cert.CertificateException;</span><br/><span class="line"> </span><br/><span class="line"><span class="keyword">import</span> javax.net.ssl.HostnameVerifier;</span><br/><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br/><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocket;</span><br/><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br/><span class="line"> </span><br/><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SslSocketFactory</span></span><br/><span class="line">        <span class="keyword">extends</span> <span class="title class_">org</span>.apache.http.conn.ssl.SSLSocketFactory <span class="keyword">implements</span> <span class="title class_">SchemeLayeredSocketFactory</span>,</span><br/><span class="line">        LayeredSchemeSocketFactory, LayeredSocketFactory {</span><br/><span class="line"> </span><br/><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SSLContext sslcontext;</span><br/><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> javax.net.ssl.SSLSocketFactory socketfactory;</span><br/><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HostNameResolver nameResolver;</span><br/><span class="line">    <span class="keyword">private</span> <span class="type">X509HostnameVerifier</span> <span class="variable">hostnameVerifier</span> <span class="operator">=</span> BROWSER_COMPATIBLE_HOSTNAME_VERIFIER;</span><br/><span class="line"> </span><br/><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] cipherSuites;</span><br/><span class="line"> </span><br/><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] protocols;</span><br/><span class="line"> </span><br/><span class="line">    <span class="keyword">public</span> <span class="title function_">SslSocketFactory</span><span class="params">(SslConfig config)</span> <span class="keyword">throws</span> UnrecoverableKeyException, KeyStoreException, NoSuchAlgorithmException, KeyManagementException, CertificateException, IOException {</span><br/><span class="line">        <span class="built_in">this</span>(getSocketFactory(config.context), getHostnameVerifier(config.verifier), config.cipherSuites,</span><br/><span class="line">                config.protocols);</span><br/><span class="line">    }</span><br/><span class="line"> </span><br/><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SSLSocketFactory <span class="title function_">getSocketFactory</span><span class="params">(SSLContext context)</span> {</span><br/><span class="line">        <span class="keyword">return</span> (context != <span class="literal">null</span>) ? context.getSocketFactory() : (SSLSocketFactory) SSLSocketFactory.getDefault();</span><br/><span class="line">    }</span><br/><span class="line"> </span><br/><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> X509HostnameVerifier <span class="title function_">getHostnameVerifier</span><span class="params">(HostnameVerifier verifier)</span> {</span><br/><span class="line">        <span class="keyword">return</span> (verifier != <span class="literal">null</span>) ? X509HostnameVerifierAdapter.adapt(verifier)</span><br/><span class="line">                : org.apache.http.conn.ssl.SSLSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER;</span><br/><span class="line">    }</span><br/><span class="line"> </span><br/><span class="line">    <span class="keyword">private</span> <span class="title function_">SslSocketFactory</span><span class="params">(SSLSocketFactory socketfactory, X509HostnameVerifier hostnameVerifier,</span></span><br/><span class="line"><span class="params">                             String[] cipherSuites, String[] protocols)</span> <span class="keyword">throws</span> UnrecoverableKeyException, KeyStoreException, NoSuchAlgorithmException, KeyManagementException, CertificateException, IOException {</span><br/><span class="line">        <span class="built_in">super</span>(defaultKeyStore());</span><br/><span class="line">        <span class="built_in">this</span>.sslcontext = <span class="literal">null</span>;</span><br/><span class="line">        <span class="built_in">this</span>.socketfactory = socketfactory;</span><br/><span class="line">        <span class="built_in">this</span>.nameResolver = <span class="literal">null</span>;</span><br/><span class="line">        <span class="built_in">this</span>.setHostnameVerifier(hostnameVerifier);</span><br/><span class="line">        <span class="built_in">this</span>.cipherSuites = cipherSuites;</span><br/><span class="line">        <span class="built_in">this</span>.protocols = protocols;</span><br/><span class="line">    }</span><br/><span class="line"> </span><br/><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> KeyStore <span class="title function_">defaultKeyStore</span><span class="params">()</span> <span class="keyword">throws</span> KeyStoreException, CertificateException, IOException, NoSuchAlgorithmException {</span><br/><span class="line">        <span class="type">KeyStore</span> <span class="variable">trustStore</span> <span class="operator">=</span> KeyStore.getInstance(KeyStore.getDefaultType());</span><br/><span class="line">        trustStore.load(<span class="literal">null</span>, <span class="literal">null</span>);</span><br/><span class="line">        <span class="keyword">return</span> trustStore;</span><br/><span class="line">    }</span><br/><span class="line"> </span><br/><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">prepareSocket</span><span class="params">(SSLSocket socket)</span></span><br/><span class="line">            <span class="keyword">throws</span> IOException {</span><br/><span class="line">        <span class="keyword">if</span> (cipherSuites != <span class="literal">null</span>) {</span><br/><span class="line">            socket.setEnabledCipherSuites(cipherSuites);</span><br/><span class="line">        }</span><br/><span class="line">        <span class="keyword">if</span> (protocols != <span class="literal">null</span>) {</span><br/><span class="line">            socket.setEnabledProtocols(protocols);</span><br/><span class="line">        }</span><br/><span class="line">    }</span><br/><span class="line"> </span><br/><span class="line">    <span class="meta">@Override</span></span><br/><span class="line">    <span class="keyword">public</span> Socket <span class="title function_">createLayeredSocket</span><span class="params">(Socket socket, String target, <span class="type">int</span> port, <span class="type">boolean</span> autoClose)</span> <span class="keyword">throws</span> IOException, UnknownHostException {</span><br/><span class="line">        <span class="type">SSLSocket</span> <span class="variable">sslSocket</span> <span class="operator">=</span> (SSLSocket) <span class="built_in">this</span>.socketfactory.createSocket(</span><br/><span class="line">                socket,</span><br/><span class="line">                target,</span><br/><span class="line">                port,</span><br/><span class="line">                autoClose</span><br/><span class="line">        );</span><br/><span class="line">        prepareSocket(sslSocket);</span><br/><span class="line">        sslSocket.startHandshake();</span><br/><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.hostnameVerifier != <span class="literal">null</span>) {</span><br/><span class="line">            <span class="built_in">this</span>.hostnameVerifier.verify(target, sslSocket);</span><br/><span class="line">        }</span><br/><span class="line">        <span class="comment">// verifyHostName() didn&#39;t blowup - good!</span></span><br/><span class="line">        <span class="keyword">return</span> sslSocket;</span><br/><span class="line">    }</span><br/><span class="line"> </span><br/><span class="line">    <span class="meta">@Override</span></span><br/><span class="line">    <span class="keyword">public</span> Socket <span class="title function_">createLayeredSocket</span><span class="params">(Socket socket, String target, <span class="type">int</span> port, HttpParams params)</span> <span class="keyword">throws</span> IOException, UnknownHostException {</span><br/><span class="line">        <span class="type">SSLSocket</span> <span class="variable">sslSocket</span> <span class="operator">=</span> (SSLSocket) <span class="built_in">this</span>.socketfactory.createSocket(</span><br/><span class="line">                socket,</span><br/><span class="line">                target,</span><br/><span class="line">                port,</span><br/><span class="line">                <span class="literal">true</span>);</span><br/><span class="line">        prepareSocket(sslSocket);</span><br/><span class="line">        sslSocket.startHandshake();</span><br/><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.hostnameVerifier != <span class="literal">null</span>) {</span><br/><span class="line">            <span class="built_in">this</span>.hostnameVerifier.verify(target, sslSocket);</span><br/><span class="line">        }</span><br/><span class="line">        <span class="comment">// verifyHostName() didn&#39;t blowup - good!</span></span><br/><span class="line">        <span class="keyword">return</span> sslSocket;</span><br/><span class="line">    }</span><br/><span class="line"> </span><br/><span class="line">    <span class="meta">@Override</span></span><br/><span class="line">    <span class="keyword">public</span> Socket <span class="title function_">createSocket</span><span class="params">(HttpParams params)</span> <span class="keyword">throws</span> IOException {</span><br/><span class="line">        <span class="type">SSLSocket</span> <span class="variable">sock</span> <span class="operator">=</span> (SSLSocket) <span class="built_in">this</span>.socketfactory.createSocket();</span><br/><span class="line">        prepareSocket(sock);</span><br/><span class="line">        <span class="keyword">return</span> sock;</span><br/><span class="line">    }</span><br/><span class="line"> </span><br/><span class="line">    <span class="meta">@Override</span></span><br/><span class="line">    <span class="keyword">public</span> Socket <span class="title function_">connectSocket</span><span class="params">(Socket socket, InetSocketAddress remoteAddress, InetSocketAddress localAddress, HttpParams params)</span> <span class="keyword">throws</span> IOException, UnknownHostException, ConnectTimeoutException {</span><br/><span class="line">        <span class="keyword">if</span> (remoteAddress == <span class="literal">null</span>) {</span><br/><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&#34;Remote address may not be null&#34;</span>);</span><br/><span class="line">        }</span><br/><span class="line">        <span class="keyword">if</span> (params == <span class="literal">null</span>) {</span><br/><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&#34;HTTP parameters may not be null&#34;</span>);</span><br/><span class="line">        }</span><br/><span class="line">        <span class="type">Socket</span> <span class="variable">sock</span> <span class="operator">=</span> socket != <span class="literal">null</span> ? socket : <span class="built_in">this</span>.socketfactory.createSocket();</span><br/><span class="line">        <span class="keyword">if</span> (localAddress != <span class="literal">null</span>) {</span><br/><span class="line">            sock.setReuseAddress(params.getBooleanParameter(<span class="string">&#34;http.socket.reuseaddr&#34;</span>, <span class="literal">false</span>));</span><br/><span class="line">            sock.bind(localAddress);</span><br/><span class="line">        }</span><br/><span class="line"> </span><br/><span class="line">        <span class="type">int</span> <span class="variable">connTimeout</span> <span class="operator">=</span> HttpConnectionParams.getConnectionTimeout(params);</span><br/><span class="line">        <span class="type">int</span> <span class="variable">soTimeout</span> <span class="operator">=</span> HttpConnectionParams.getSoTimeout(params);</span><br/><span class="line"> </span><br/><span class="line">        <span class="keyword">try</span> {</span><br/><span class="line">            sock.setSoTimeout(soTimeout);</span><br/><span class="line">            sock.connect(remoteAddress, connTimeout);</span><br/><span class="line">        } <span class="keyword">catch</span> (SocketTimeoutException ex) {</span><br/><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConnectTimeoutException</span>(</span><br/><span class="line">                    <span class="string">&#34;Connect to &#34;</span> + remoteAddress + <span class="string">&#34; timed out :&#34;</span> + ex.getMessage());</span><br/><span class="line">“连接到” + 远程地址 + “ 超时 ：” + ex.getMessage（））;</span><br/><span class="line">        }</span><br/><span class="line"> </span><br/><span class="line">        String hostname;</span><br/><span class="line">        <span class="keyword">if</span> (remoteAddress <span class="keyword">instanceof</span> HttpInetSocketAddress) {</span><br/><span class="line">            hostname = ((HttpInetSocketAddress) remoteAddress).getHttpHost().getHostName();</span><br/><span class="line">        } <span class="keyword">else</span> {</span><br/><span class="line">            hostname = remoteAddress.getHostName();</span><br/><span class="line">        }</span><br/><span class="line"> </span><br/><span class="line">        SSLSocket sslsock;</span><br/><span class="line">        <span class="comment">// Setup SSL layering if necessary</span></span><br/><span class="line">        <span class="keyword">if</span> (sock <span class="keyword">instanceof</span> SSLSocket) {</span><br/><span class="line">            sslsock = (SSLSocket) sock;</span><br/><span class="line">        } <span class="keyword">else</span> {</span><br/><span class="line">            <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> remoteAddress.getPort();</span><br/><span class="line">            sslsock = (SSLSocket) <span class="built_in">this</span>.socketfactory.createSocket(sock, hostname, port, <span class="literal">true</span>);</span><br/><span class="line">            prepareSocket(sslsock);</span><br/><span class="line">        }</span><br/><span class="line">        sslsock.startHandshake();</span><br/><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.hostnameVerifier != <span class="literal">null</span>) {</span><br/><span class="line">            <span class="keyword">try</span> {</span><br/><span class="line">                <span class="built_in">this</span>.hostnameVerifier.verify(hostname, sslsock);</span><br/><span class="line">                <span class="comment">// verifyHostName() didn&#39;t blowup - good!</span></span><br/><span class="line">            } <span class="keyword">catch</span> (IOException iox) {</span><br/><span class="line">                <span class="comment">// close the socket before re-throwing the exception</span></span><br/><span class="line">                <span class="keyword">try</span> {</span><br/><span class="line">                    sslsock.close();</span><br/><span class="line">                } <span class="keyword">catch</span> (Exception x) { <span class="comment">/*ignore*/</span> }</span><br/><span class="line">                <span class="keyword">throw</span> iox;</span><br/><span class="line">            }</span><br/><span class="line">        }</span><br/><span class="line">        <span class="keyword">return</span> sslsock;</span><br/><span class="line">    }</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>这里我们直接使用Android所兼容的Apache Http API即可。</p><h5 id="结论"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#%E7%BB%93%E8%AE%BA" class="headerlink" title="结论"></a>结论</h5><p>经实验，部分手机可以允许，Homo OS依旧无法运行。最大的问题在于，这个JarFilter支持的AGP版本太低，在AGP版本较高时便不能在build release时正常运行，在部分版本下只能在build debug正常运行。</p><p>寄。</p><h4 id="Try3-强行塞入PC端Jre的一些类-Apache-Http包-成功"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#Try3-%E5%BC%BA%E8%A1%8C%E5%A1%9E%E5%85%A5PC%E7%AB%AFJre%E7%9A%84%E4%B8%80%E4%BA%9B%E7%B1%BB-Apache-Http%E5%8C%85-%E6%88%90%E5%8A%9F" class="headerlink" title="Try3: 强行塞入PC端Jre的一些类+Apache Http包 (成功)"></a>Try3: 强行塞入PC端Jre的一些类+Apache Http包 (成功)</h4><p>既然，Aether是transport缺少Apache Http API而无法运行，那么是不是可以直接把Apache Http给强行迁移过来呢？是，但是需要一定的魔改。</p><p>众所周知，JVM运行中，因为双亲委托机制的存在，用户能操作的ClassLoader是不能覆盖系统提供的类文件的，否则会有各种奇妙的异常(因为不同设备对Apache Http的阉割情况可能不同)，所以我们不能简单地直接依赖原版Apache Http包。</p><p>那么，较优的方法是通过JarJar修改所有包下关于Apache Http的包名信息为自定义的，然后强行塞入App内，<del>让它成为你想要的形状</del>。</p><h5 id="实践-1"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#%E5%AE%9E%E8%B7%B5-1" class="headerlink" title="实践"></a>实践</h5><p>(因为当时没完整记录这个流程，导致没有截图啥的信息，只在此说明大概思路了。)</p><p>首先，下载所需版本的<em>aether-transport-http.jar</em>、<em>Apache Http Core.jar</em>、<em>Apache Http Client.jar</em>；</p><p>然后，利用JarJar手写规则，将<em>org.apache.http</em>包名更改为你自定义的包名；</p><p>最后，去掉build.gradle中对于aether-transport-http、Apache Http Core以及Apache Http Client的依赖，改为上述已修改的Jar。</p><p>如果没有意外的话，就有意外了，发现又有新的报错，是缺少javax.*包下的类，这个解决也很简单暴力，直接复制一份Jre 1.8下lib文件夹内的rt.jar，删除一些无关类即可。(删除什么我已经忘记了，可以自行尝试，即使删的少了也并不会影响运行。)</p><h5 id="结论-1"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#%E7%BB%93%E8%AE%BA-1" class="headerlink" title="结论"></a>结论</h5><p>经实验，本解决方案完美适配已知所有设备（Homo也难不倒它），可以放心地使用此方案。</p></body></html>