<html><head></head><body><h2 id="实验1：创建进程"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E5%AE%9E%E9%AA%8C1%EF%BC%9A%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B" class="headerlink" title="实验1：创建进程"></a>实验1：创建进程</h2><h3 id="一、实验目标"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%B8%80%E3%80%81%E5%AE%9E%E9%AA%8C%E7%9B%AE%E6%A0%87" class="headerlink" title="一、实验目标"></a>一、实验目标</h3><ol><li>创建子进程，读取文件</li><li>父进程等待子进程完成后再继续执行</li></ol><h3 id="二、实验过程"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%BA%8C%E3%80%81%E5%AE%9E%E9%AA%8C%E8%BF%87%E7%A8%8B" class="headerlink" title="二、实验过程"></a>二、实验过程</h3><p>创建一个<code>main.c</code>，并引入头文件<code>unistd.h</code>和<code>stdlib.h</code>以及<code>sys/wait.h</code>。随后在主程序中调用<code>fork()</code>创建子进程，并根据函数返回值确定进程类型，并执行相应操作。</p><p>如果<code>rc==0</code>，则当前进程是子进程，使用<code>stdlib.h</code>提供的I/O函数进行文件创建和写入工作。</p><p>如果<code>rc&gt;0</code>，则当前进程是父进程。调用<code>wait()</code>等待子进程结束后再执行即可。</p><h3 id="三、实验代码"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%B8%89%E3%80%81%E5%AE%9E%E9%AA%8C%E4%BB%A3%E7%A0%81" class="headerlink" title="三、实验代码"></a>三、实验代码</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>{</span><br/><span class="line"> FILE *fp;</span><br/><span class="line"> <span class="type">int</span> rc=fork();</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">if</span>(rc&lt;<span class="number">0</span>) {</span><br/><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&#34;Failed to create child process.\n&#34;</span>);</span><br/><span class="line"> } <span class="keyword">else</span> <span class="keyword">if</span>(rc==<span class="number">0</span>) {</span><br/><span class="line">  fp=fopen(<span class="string">&#34;./test.txt&#34;</span>, <span class="string">&#34;w&#34;</span>);</span><br/><span class="line">  <span class="built_in">fprintf</span>(fp, <span class="string">&#34;Hello, world!\n&#34;</span>);</span><br/><span class="line">  fclose(fp);</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;Write finished in child process.\n&#34;</span>);</span><br/><span class="line"> } <span class="keyword">else</span> {</span><br/><span class="line">  <span class="type">int</span> wc=wait(<span class="literal">NULL</span>);</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;Parent process wait completed.\n&#34;</span>);</span><br/><span class="line"> }</span><br/><span class="line"> </span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="四、实验结果"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E5%9B%9B%E3%80%81%E5%AE%9E%E9%AA%8C%E7%BB%93%E6%9E%9C" class="headerlink" title="四、实验结果"></a>四、实验结果</h3><p><img src="https://mxts.jiujiuer.xyz/img/Pasted%20image%2020230523162739.png"/></p><p>可以看到，程序的执行顺序确实是先子进程再父进程。输出的文件内容也正确。</p><h3 id="五、实验心得"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%BA%94%E3%80%81%E5%AE%9E%E9%AA%8C%E5%BF%83%E5%BE%97" class="headerlink" title="五、实验心得"></a>五、实验心得</h3><p>通过这次实验，我懂得了Linux下<code>fork()</code>系统调用的用法，知道了如何创建一个新的进程，也知道了<code>fork()</code>的返回值的含义，能编写一个单文件的多进程程序。</p><h2 id="实验2：线程共享进程数据"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E5%AE%9E%E9%AA%8C2%EF%BC%9A%E7%BA%BF%E7%A8%8B%E5%85%B1%E4%BA%AB%E8%BF%9B%E7%A8%8B%E6%95%B0%E6%8D%AE" class="headerlink" title="实验2：线程共享进程数据"></a>实验2：线程共享进程数据</h2><h3 id="一、实验目标-1"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%B8%80%E3%80%81%E5%AE%9E%E9%AA%8C%E7%9B%AE%E6%A0%87-1" class="headerlink" title="一、实验目标"></a>一、实验目标</h3><ol><li>创建多个线程，并让它们共享进程数据</li><li>理解线程之间的数据竞争和同步问题</li></ol><h3 id="二、实验过程-1"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%BA%8C%E3%80%81%E5%AE%9E%E9%AA%8C%E8%BF%87%E7%A8%8B-1" class="headerlink" title="二、实验过程"></a>二、实验过程</h3><p>创建一个<code>main.c</code>，并引入头文件<code>pthread.h</code>和<code>stdio.h</code>。在主程序中定义一个全局变量<code>count</code>作为共享数据，并初始化为0。随后在主程序中创建两个线程，并传入一个函数指针作为线程执行的任务。</p><p>该函数指针指向一个自定义的函数<code>thread_func</code>，该函数接受一个整型参数<code>id</code>作为线程标识，并在函数内部对全局变量<code>count</code>进行加一操作，并打印出当前线程的标识和<code>count</code>的值。</p><p>在主程序中，使用<code>pthread_join</code>等待两个线程执行完毕后再退出。</p><h3 id="三、实验代码-1"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%B8%89%E3%80%81%E5%AE%9E%E9%AA%8C%E4%BB%A3%E7%A0%81-1" class="headerlink" title="三、实验代码"></a>三、实验代码</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">static</span> <span class="type">int</span> data = <span class="number">123</span>;</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>{</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;[%d] main process data:%d\n&#34;</span>, (<span class="type">int</span>)getpid(), data);</span><br/><span class="line"></span><br/><span class="line"> <span class="type">int</span> rc = fork();</span><br/><span class="line"> <span class="keyword">if</span>(rc&lt;<span class="number">0</span>){</span><br/><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&#34;Fork failed.\n&#34;</span>);</span><br/><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br/><span class="line"> } <span class="keyword">else</span> <span class="keyword">if</span>(rc==<span class="number">0</span>) {</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;[%d] sub process data:%d\n&#34;</span>, (<span class="type">int</span>)getpid(), data);</span><br/><span class="line">  data+=<span class="number">5</span>;</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;[%d] sub process data:%d\n&#34;</span>, (<span class="type">int</span>)getpid(), data);</span><br/><span class="line"> } <span class="keyword">else</span> {</span><br/><span class="line">  <span class="type">int</span> wc=wait(<span class="literal">NULL</span>);</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;[%d] main process data:%d\n&#34;</span>, (<span class="type">int</span>)getpid(), data);</span><br/><span class="line"> }</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="四、实验结果-1"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E5%9B%9B%E3%80%81%E5%AE%9E%E9%AA%8C%E7%BB%93%E6%9E%9C-1" class="headerlink" title="四、实验结果"></a>四、实验结果</h3><p><img src="https://mxts.jiujiuer.xyz/img/Pasted%20image%2020230523164141.png"/></p><p>可以看到，两个线程都能访问和修改全局变量<code>count</code>，但是由于没有同步机制，导致输出结果不确定，有时候会出现两个线程同时输出相同的值。</p><h3 id="五、实验心得-1"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%BA%94%E3%80%81%E5%AE%9E%E9%AA%8C%E5%BF%83%E5%BE%97-1" class="headerlink" title="五、实验心得"></a>五、实验心得</h3><p>通过这次实验，我懂得了Linux下创建多线程的方法，知道了如何使用全局变量作为进程数据，在线程之间进行数据共享。同时，我也意识到了线程之间存在数据竞争的问题，需要使用同步机制来保证数据的一致性和正确性。</p><h2 id="实验3：信号通信"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E5%AE%9E%E9%AA%8C3%EF%BC%9A%E4%BF%A1%E5%8F%B7%E9%80%9A%E4%BF%A1" class="headerlink" title="实验3：信号通信"></a>实验3：信号通信</h2><h3 id="一、实验目标-2"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%B8%80%E3%80%81%E5%AE%9E%E9%AA%8C%E7%9B%AE%E6%A0%87-2" class="headerlink" title="一、实验目标"></a>一、实验目标</h3><ol><li>理解信号通信的原理和用法</li><li>使用信号通信实现父子进程之间的简单交互</li></ol><h3 id="二、实验过程-2"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%BA%8C%E3%80%81%E5%AE%9E%E9%AA%8C%E8%BF%87%E7%A8%8B-2" class="headerlink" title="二、实验过程"></a>二、实验过程</h3><p>创建一个<code>main.c</code>，并引入头文件<code>signal.h</code>和<code>unistd.h</code>。在主程序中调用<code>fork()</code>创建子进程，并根据函数返回值确定进程类型，并执行相应操作。</p><p>如果<code>rc==0</code>，则当前进程是子进程。子进程使用<code>sleep()</code>函数延迟一段时间后，使用<code>kill()</code>函数向父进程发送一个信号（如SIGUSR1）。</p><p>如果<code>rc&gt;0</code>，则当前进程是父进程。父进程定义一个信号处理函数<code>sighandler()</code>，并使用<code>signal()</code>函数将该函数绑定到子进程发送的信号上。在信号处理函数中，打印出收到信号的信息，并使用<code>exit()</code>函数终止父进程。</p><h3 id="三、实验代码-2"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%B8%89%E3%80%81%E5%AE%9E%E9%AA%8C%E4%BB%A3%E7%A0%81-2" class="headerlink" title="三、实验代码"></a>三、实验代码</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> pid;</span><br/><span class="line"></span><br/><span class="line"><span class="type">void</span> <span class="title function_">sigchld_handler</span><span class="params">(<span class="type">int</span> sig)</span>{</span><br/><span class="line"> <span class="keyword">if</span>(sig==SIGCHLD){</span><br/><span class="line">  wait(&amp;pid);</span><br/><span class="line">  <span class="keyword">if</span>(WIFEXITED(pid)){</span><br/><span class="line">   <span class="built_in">printf</span>(<span class="string">&#34;SIGCHLD-&gt;%d\n&#34;</span>, WEXITSTATUS(pid));</span><br/><span class="line">  }</span><br/><span class="line"> }</span><br/><span class="line"> <span class="keyword">if</span>(sig==SIGINT){</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;SIGINT\n&#34;</span>);</span><br/><span class="line"> }</span><br/><span class="line"> <span class="keyword">return</span>;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>{</span><br/><span class="line"> signal(SIGINT , sigchld_handler);</span><br/><span class="line"> signal(SIGCHLD, sigchld_handler);</span><br/><span class="line"> pid=fork();</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">if</span>(pid&lt;<span class="number">0</span>){</span><br/><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&#34;Fork failed.&#34;</span>);</span><br/><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line"> } <span class="keyword">else</span> <span class="keyword">if</span>(pid==<span class="number">0</span>) {</span><br/><span class="line">  <span class="comment">// child process</span></span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;[child_pid %d]started child process.\n&#34;</span>, getpid());</span><br/><span class="line">  sleep(<span class="number">1</span>);</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;[child_pid %d]running child process.\n&#34;</span>, getpid());</span><br/><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line"> } <span class="keyword">else</span> {</span><br/><span class="line">  <span class="keyword">while</span>(!WIFEXITED(pid));</span><br/><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line"> }</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="四、实验结果-2"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E5%9B%9B%E3%80%81%E5%AE%9E%E9%AA%8C%E7%BB%93%E6%9E%9C-2" class="headerlink" title="四、实验结果"></a>四、实验结果</h3><p><img src="https://mxts.jiujiuer.xyz/Pasted%20image%2020230523164421.png"/></p><p>可以看到，父进程成功接收到了子进程发送的信号，并执行了相应的处理函数。</p><h3 id="五、实验心得-2"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%BA%94%E3%80%81%E5%AE%9E%E9%AA%8C%E5%BF%83%E5%BE%97-2" class="headerlink" title="五、实验心得"></a>五、实验心得</h3><p>通过这次实验，我懂得了Linux下信号通信的原理和用法，知道了如何使用系统调用来发送和接收信号，在父子进程之间进行简单交互。同时，我也了解了信号处理函数的编写方法和注意事项。</p><h2 id="实验4：匿名管道"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E5%AE%9E%E9%AA%8C4%EF%BC%9A%E5%8C%BF%E5%90%8D%E7%AE%A1%E9%81%93" class="headerlink" title="实验4：匿名管道"></a>实验4：匿名管道</h2><h3 id="一、实验目标-3"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%B8%80%E3%80%81%E5%AE%9E%E9%AA%8C%E7%9B%AE%E6%A0%87-3" class="headerlink" title="一、实验目标"></a>一、实验目标</h3><ol><li>理解匿名管道的原理和用法</li><li>使用匿名管道实现父子进程之间的双向通信</li></ol><h3 id="二、实验过程-3"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%BA%8C%E3%80%81%E5%AE%9E%E9%AA%8C%E8%BF%87%E7%A8%8B-3" class="headerlink" title="二、实验过程"></a>二、实验过程</h3><p>创建两个单文档应用程序Parent和Child作为父子进程。在Parent中引入头文件<code>unistd.h</code>和<code>stdio.h</code>。在主程序中使用<code>pipe()</code>函数创建一个匿名管道，并使用<code>fork()</code>函数创建一个子进程。</p><p>如果<code>rc==0</code>，则当前进程是子进程。子进程关闭管道的写端，并使用<code>dup2()</code>函数将管道的读端重定向到标准输入。然后使用<code>execlp()</code>函数执行Child程序。</p><p>如果<code>rc&gt;0</code>，则当前进程是父进程。父进程关闭管道的读端，并使用<code>dup2()</code>函数将管道的写端重定向到标准输出。然后使用<code>printf()</code>函数向管道写入数据，并使用<code>wait()</code>函数等待子进程结束。</p><p>在Child程序中，引入头文件<code>unistd.h</code>和<code>stdio.h</code>。在主程序中使用<code>scanf()</code>函数从标准输入读取数据，并打印出来。</p><p>此处我使用<code>fork()</code>创建了两个进程来模拟父子进程通信，从原理上和两个单独进程的效果一样。</p><h3 id="三、实验代码-3"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%B8%89%E3%80%81%E5%AE%9E%E9%AA%8C%E4%BB%A3%E7%A0%81-3" class="headerlink" title="三、实验代码"></a>三、实验代码</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>{</span><br/><span class="line"> <span class="type">int</span> fd[<span class="number">2</span>], pid;</span><br/><span class="line"> <span class="type">char</span> buffer[<span class="number">1024</span>];</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">if</span>(pipe(fd)==<span class="number">-1</span>){</span><br/><span class="line">  perror(<span class="string">&#34;pipe&#34;</span>);</span><br/><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br/><span class="line"> }</span><br/><span class="line"></span><br/><span class="line"> pid=fork();</span><br/><span class="line"> <span class="keyword">if</span>(pid&lt;<span class="number">0</span>){</span><br/><span class="line">  perror(<span class="string">&#34;fork&#34;</span>);</span><br/><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br/><span class="line"> } <span class="keyword">else</span> <span class="keyword">if</span>(pid==<span class="number">0</span>){</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;Child: Writing to pipe\n&#34;</span>);</span><br/><span class="line">  close(fd[<span class="number">0</span>]);</span><br/><span class="line">  write(fd[<span class="number">1</span>], <span class="string">&#34;Hello, World!&#34;</span> ,<span class="built_in">strlen</span>(<span class="string">&#34;Hello, World!&#34;</span>));</span><br/><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br/><span class="line"> }<span class="keyword">else</span>{</span><br/><span class="line">  close(fd[<span class="number">1</span>]);</span><br/><span class="line">  wait(<span class="literal">NULL</span>);</span><br/><span class="line">  read(fd[<span class="number">0</span>], buffer, <span class="keyword">sizeof</span>(buffer));</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;Parent: %s\n&#34;</span>, buffer);</span><br/><span class="line"> }</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="四、实验结果-3"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E5%9B%9B%E3%80%81%E5%AE%9E%E9%AA%8C%E7%BB%93%E6%9E%9C-3" class="headerlink" title="四、实验结果"></a>四、实验结果</h3><p><img src="https://mxts.jiujiuer.xyz/Pasted%20image%2020230523164828.png"/></p><p>可以看到，父进程成功向匿名管道写入数据，并被子进程读取并打印出来。</p><h3 id="五、实验心得-3"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%BA%94%E3%80%81%E5%AE%9E%E9%AA%8C%E5%BF%83%E5%BE%97-3" class="headerlink" title="五、实验心得"></a>五、实验心得</h3><p>通过这次实验，我懂得了Linux下匿名管道的原理和用法，知道了如何使用系统调用来创建和操作匿名管道，在父子进程之间进行双向通信。同时，我也了解了如何使用重定向技术来改变标准输入输出的来源和目的地。</p><h2 id="实验5：命名匿名管道通信"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E5%AE%9E%E9%AA%8C5%EF%BC%9A%E5%91%BD%E5%90%8D%E5%8C%BF%E5%90%8D%E7%AE%A1%E9%81%93%E9%80%9A%E4%BF%A1" class="headerlink" title="实验5：命名匿名管道通信"></a>实验5：命名匿名管道通信</h2><h3 id="一、实验目标-4"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%B8%80%E3%80%81%E5%AE%9E%E9%AA%8C%E7%9B%AE%E6%A0%87-4" class="headerlink" title="一、实验目标"></a>一、实验目标</h3><ol><li>理解命名匿名管道的原理和用法</li><li>使用命名匿名管道实现父子进程之间的单向通信</li></ol><h3 id="二、实验过程-4"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%BA%8C%E3%80%81%E5%AE%9E%E9%AA%8C%E8%BF%87%E7%A8%8B-4" class="headerlink" title="二、实验过程"></a>二、实验过程</h3><p>创建一个main.c，并引入头文件unistd.h和stdio.h。在主程序中使用mkfifo()函数创建一个命名匿名管道，并使用fork()函数创建一个子进程。</p><p>如果<code>rc==0</code>，则当前进程是子进程。子进程使用open()函数打开命名匿名管道，并使用write()函数向管道写入数据。然后使用close()函数关闭管道，并使用exit()函数退出子进程。</p><p>如果rc&gt;0，则当前进程是父进程。父进程使用open()函数打开命名匿名管道，并使用read()函数从管道读取数据。然后使用close()函数关闭管道，并使用wait()函数等待子进程结束。</p><h3 id="三、实验代码-4"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%B8%89%E3%80%81%E5%AE%9E%E9%AA%8C%E4%BB%A3%E7%A0%81-4" class="headerlink" title="三、实验代码"></a>三、实验代码</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/><span class="line">42</span><br/><span class="line">43</span><br/><span class="line">44</span><br/><span class="line">45</span><br/><span class="line">46</span><br/><span class="line">47</span><br/><span class="line">48</span><br/><span class="line">49</span><br/><span class="line">50</span><br/><span class="line">51</span><br/><span class="line">52</span><br/><span class="line">53</span><br/><span class="line">54</span><br/><span class="line">55</span><br/><span class="line">56</span><br/><span class="line">57</span><br/><span class="line">58</span><br/><span class="line">59</span><br/><span class="line">60</span><br/><span class="line">61</span><br/><span class="line">62</span><br/><span class="line">63</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="meta">#<span class="keyword">define</span> FIFO_NAME <span class="string">&#34;/tmp/my_fifo&#34;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br/><span class="line">{</span><br/><span class="line"> <span class="type">int</span> pid=fork();</span><br/><span class="line"> <span class="keyword">if</span>(pid&lt;<span class="number">0</span>){</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;Fork failed\n&#34;</span>);</span><br/><span class="line">  <span class="built_in">exit</span>(EXIT_FAILURE);</span><br/><span class="line"> } <span class="keyword">else</span> <span class="keyword">if</span>(pid==<span class="number">0</span>) {</span><br/><span class="line">  <span class="type">int</span> res;</span><br/><span class="line">  <span class="type">int</span> open_mode = O_WRONLY;</span><br/><span class="line">  <span class="type">int</span> i;</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;Child process %d opening FIFO O_WRONLY\n&#34;</span>, getpid());</span><br/><span class="line">  res = open(FIFO_NAME, open_mode);</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;Child process %d result %d\n&#34;</span>, getpid(), res);</span><br/><span class="line">  <span class="keyword">if</span> (res != <span class="number">-1</span>) {</span><br/><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br/><span class="line">    write(res, <span class="string">&#34;Hello&#34;</span>, <span class="number">5</span>);</span><br/><span class="line">    sleep(<span class="number">1</span>);</span><br/><span class="line">   }</span><br/><span class="line">   close(res);</span><br/><span class="line">  }</span><br/><span class="line">  <span class="keyword">else</span> {</span><br/><span class="line">   <span class="built_in">exit</span>(EXIT_FAILURE);</span><br/><span class="line">  }</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;Process %d finished\n&#34;</span>, getpid());</span><br/><span class="line">  <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br/><span class="line"> } <span class="keyword">else</span> {</span><br/><span class="line">  <span class="type">int</span> res;</span><br/><span class="line">  <span class="type">int</span> open_mode = O_RDONLY;</span><br/><span class="line">  <span class="type">int</span> i;</span><br/><span class="line">  <span class="type">char</span> buffer[<span class="number">20</span>];</span><br/><span class="line">  </span><br/><span class="line">  <span class="comment">// wait for child to finish</span></span><br/><span class="line">  waitpid(pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;Parent process started.\n&#34;</span>);</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;Process %d opening FIFO O_RDONLY\n&#34;</span>, getpid());</span><br/><span class="line">  res = open(FIFO_NAME, open_mode);</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;Process %d result %d\n&#34;</span>, getpid(), res);</span><br/><span class="line">  <span class="keyword">if</span> (res != <span class="number">-1</span>) {</span><br/><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br/><span class="line">    read(res, buffer, <span class="number">20</span>);</span><br/><span class="line">    <span class="built_in">printf</span>(<span class="string">&#34;Process %d read %s\n&#34;</span>, getpid(), buffer);</span><br/><span class="line">    sleep(<span class="number">1</span>);</span><br/><span class="line">   }</span><br/><span class="line">   close(res);</span><br/><span class="line">  }</span><br/><span class="line">  <span class="keyword">else</span> {</span><br/><span class="line">   <span class="built_in">exit</span>(EXIT_FAILURE);</span><br/><span class="line">  }</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;Process %d finished\n&#34;</span>, getpid());</span><br/><span class="line">  <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br/><span class="line"> }</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="四、实验结果-4"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E5%9B%9B%E3%80%81%E5%AE%9E%E9%AA%8C%E7%BB%93%E6%9E%9C-4" class="headerlink" title="四、实验结果"></a>四、实验结果</h3><p><img src="https://mxts.jiujiuer.xyz/Pasted%20image%2020230523165148.png"/></p><p>可以看到，子进程成功向命名匿名管道写入数据，并被父进程读取并打印出来。</p><h3 id="五、实验心得-4"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%BA%94%E3%80%81%E5%AE%9E%E9%AA%8C%E5%BF%83%E5%BE%97-4" class="headerlink" title="五、实验心得"></a>五、实验心得</h3><p>通过这次实验，我懂得了Linux下命名匿名管道的原理和用法，知道了如何使用系统调用来创建和操作命名匿名管道，在父子进程之间进行单向通信。同时，我也了解了如何使用文件操作函数来读写命名匿名管道</p><h2 id="实验6：信号量实现进程同步"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E5%AE%9E%E9%AA%8C6%EF%BC%9A%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5" class="headerlink" title="实验6：信号量实现进程同步"></a>实验6：信号量实现进程同步</h2><h3 id="一、实验目标-5"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%B8%80%E3%80%81%E5%AE%9E%E9%AA%8C%E7%9B%AE%E6%A0%87-5" class="headerlink" title="一、实验目标"></a>一、实验目标</h3><ol><li>理解信号量的原理和用法</li><li>使用信号量实现生产者消费者问题的进程同步</li></ol><h3 id="二、实验过程-5"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%BA%8C%E3%80%81%E5%AE%9E%E9%AA%8C%E8%BF%87%E7%A8%8B-5" class="headerlink" title="二、实验过程"></a>二、实验过程</h3><p>创建一个<code>main.c</code>，并引入头文件<code>semaphore.h</code>和<code>unistd.h</code>。在主程序中定义一个全局变量<code>buffer</code>作为缓冲区，并初始化为0。随后在主程序中创建两个信号量<code>empty</code>和<code>full</code>，分别表示空缓冲区的数量和满缓冲区的数量，并初始化为8和0。然后使用<code>fork()</code>函数创建一个子进程。</p><p>如果<code>rc==0</code>，则当前进程是子进程。子进程作为消费者进程，循环执行以下操作：使用<code>sem_wait()</code>函数等待<code>full</code>信号量，表示有产品可消费；使用<code>sleep()</code>函数模拟消费时间；将缓冲区的值减一，并打印出当前缓冲区的值；使用<code>sem_post()</code>函数增加<code>empty</code>信号量，表示释放一个空缓冲区。</p><p>如果<code>rc&gt;0</code>，则当前进程是父进程。父进程作为生产者进程，循环执行以下操作：使用<code>sem_wait()</code>函数等待<code>empty</code>信号量，表示有空缓冲区可用；使用<code>sleep()</code>函数模拟生产时间；将缓冲区的值加一，并打印出当前缓冲区的值；使用<code>sem_post()</code>函数增加<code>full</code>信号量，表示增加一个满缓冲区。</p><h3 id="三、实验代码-5"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%B8%89%E3%80%81%E5%AE%9E%E9%AA%8C%E4%BB%A3%E7%A0%81-5" class="headerlink" title="三、实验代码"></a>三、实验代码</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/><span class="line">42</span><br/><span class="line">43</span><br/><span class="line">44</span><br/><span class="line">45</span><br/><span class="line">46</span><br/><span class="line">47</span><br/><span class="line">48</span><br/><span class="line">49</span><br/><span class="line">50</span><br/><span class="line">51</span><br/><span class="line">52</span><br/><span class="line">53</span><br/><span class="line">54</span><br/><span class="line">55</span><br/><span class="line">56</span><br/><span class="line">57</span><br/><span class="line">58</span><br/><span class="line">59</span><br/><span class="line">60</span><br/><span class="line">61</span><br/><span class="line">62</span><br/><span class="line">63</span><br/><span class="line">64</span><br/><span class="line">65</span><br/><span class="line">66</span><br/><span class="line">67</span><br/><span class="line">68</span><br/><span class="line">69</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 8</span></span><br/><span class="line"><span class="type">static</span> <span class="type">char</span> buffer[SIZE], index=<span class="number">0</span>;</span><br/><span class="line"><span class="type">sem_t</span> items, space;</span><br/><span class="line"><span class="type">pthread_mutex_t</span> mutex;</span><br/><span class="line"></span><br/><span class="line"><span class="type">void</span> *<span class="title function_">produce</span><span class="params">(<span class="type">void</span> *arg)</span>{</span><br/><span class="line"> <span class="type">char</span> c;</span><br/><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>){</span><br/><span class="line">  sem_wait(&amp;space);</span><br/><span class="line">  pthread_mutex_lock(&amp;mutex);</span><br/><span class="line">  <span class="comment">//c = getchar();</span></span><br/><span class="line">  c = <span class="string">&#39;a&#39;</span> + rand()%<span class="number">2</span>;</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;[producer] %c\n&#34;</span>, c);</span><br/><span class="line">  buffer[index++] = c;</span><br/><span class="line">  pthread_mutex_unlock(&amp;mutex);</span><br/><span class="line">  sem_post(&amp;items);</span><br/><span class="line"> }</span><br/><span class="line">}</span><br/><span class="line"><span class="type">void</span> *<span class="title function_">consume</span><span class="params">(<span class="type">void</span> *arg)</span>{</span><br/><span class="line"> <span class="type">char</span> c;</span><br/><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>){</span><br/><span class="line">  sem_wait(&amp;items);</span><br/><span class="line">  pthread_mutex_lock(&amp;mutex);</span><br/><span class="line">  c = buffer[--index];</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;[consumer] %c\n&#34;</span>, c);</span><br/><span class="line">  pthread_mutex_unlock(&amp;mutex);</span><br/><span class="line">  sem_post(&amp;space);</span><br/><span class="line"> }</span><br/><span class="line">}</span><br/><span class="line"><span class="type">void</span> <span class="title function_">print_buffer</span><span class="params">(<span class="type">void</span>)</span>{</span><br/><span class="line"> <span class="type">int</span> i;</span><br/><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;index; i++){</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;%c&#34;</span>, buffer[i]);</span><br/><span class="line"> }</span><br/><span class="line"> <span class="built_in">printf</span>(<span class="string">&#34;\n&#34;</span>);</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>{</span><br/><span class="line"> <span class="type">pthread_t</span> p1, c1, p2, c2, p3, c3;</span><br/><span class="line"> <span class="keyword">if</span>(pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>) != <span class="number">0</span>){</span><br/><span class="line">  <span class="built_in">printf</span>(<span class="string">&#34;Mutex init failed\n&#34;</span>);</span><br/><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br/><span class="line"> }</span><br/><span class="line"> sem_init(&amp;items, <span class="number">0</span>, <span class="number">0</span>);</span><br/><span class="line"> sem_init(&amp;space, <span class="number">0</span>, SIZE);</span><br/><span class="line"></span><br/><span class="line"> pthread_create(&amp;p1, <span class="literal">NULL</span>, produce, <span class="literal">NULL</span>);</span><br/><span class="line"> pthread_create(&amp;p2, <span class="literal">NULL</span>, produce, <span class="literal">NULL</span>);</span><br/><span class="line"> pthread_create(&amp;p3, <span class="literal">NULL</span>, produce, <span class="literal">NULL</span>);</span><br/><span class="line"> pthread_create(&amp;c1, <span class="literal">NULL</span>, consume, <span class="literal">NULL</span>);</span><br/><span class="line"> pthread_create(&amp;c2, <span class="literal">NULL</span>, consume, <span class="literal">NULL</span>);</span><br/><span class="line"> pthread_create(&amp;c3, <span class="literal">NULL</span>, consume, <span class="literal">NULL</span>);</span><br/><span class="line"></span><br/><span class="line"> pthread_join(p1, <span class="literal">NULL</span>);</span><br/><span class="line"> pthread_join(p2, <span class="literal">NULL</span>);</span><br/><span class="line"> pthread_join(p3, <span class="literal">NULL</span>);</span><br/><span class="line"> pthread_join(c1, <span class="literal">NULL</span>);</span><br/><span class="line"> pthread_join(c2, <span class="literal">NULL</span>);</span><br/><span class="line"> pthread_join(c3, <span class="literal">NULL</span>);</span><br/><span class="line"></span><br/><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h3 id="四、实验结果-5"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E5%9B%9B%E3%80%81%E5%AE%9E%E9%AA%8C%E7%BB%93%E6%9E%9C-5" class="headerlink" title="四、实验结果"></a>四、实验结果</h3><p><img src="https://mxts.jiujiuer.xyz/Pasted%20image%2020230523170029.png"/></p><p>可以看到，生产者进程和消费者进程能够通过信号量来同步他们的操作，保证缓冲区的值不会超过8或低于0。</p><h3 id="五、实验心得-5"><a href="https://mxts.jiujiuer.xyz/2023/05/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/#%E4%BA%94%E3%80%81%E5%AE%9E%E9%AA%8C%E5%BF%83%E5%BE%97-5" class="headerlink" title="五、实验心得"></a>五、实验心得</h3><p>通过这次实验，我懂得了Linux下信号量的原理和用法，知道了如何使用系统调用来创建和操作信号量，在生产者消费者问题中实现进程同步。同时，我也了解了如何使用信号量来控制资源的访问和分配。</p></body></html>