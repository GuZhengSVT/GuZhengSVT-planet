<html><head></head><body><p>重点是定点数和浮点数的表示。数制啥的就不说了，主要还有原码补码反码这几个。<strong>下面的讨论都是对于二进制数而言的</strong>，因为计算机存储的结构以二进制保存原始值。</p><h2 id="定点数"><a href="https://mxts.jiujiuer.xyz/2023/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/#%E5%AE%9A%E7%82%B9%E6%95%B0" class="headerlink" title="定点数"></a>定点数</h2><p>也就是小数点位置不动的数。有两种，纯整数（小数点在最右侧）、纯小数（小数点在最左侧）。分为有/无符号数，前者具有<code>原码、反码、补码、移码</code>四种编码表示。</p><p>有符号数的最高位为符号位，<code>0正1负</code>。</p><h3 id="原码反码和补码"><a href="https://mxts.jiujiuer.xyz/2023/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/#%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81" class="headerlink" title="原码反码和补码"></a>原码反码和补码</h3><ul><li><strong>原码：正数是其二进制本身；负数是符号位为1,数值部分取X绝对值的二进制。</strong></li><li><strong>反码：正数的反码和原码相同；负数是符号位为1,其它位是原码取反。</strong></li><li><strong>补码：正数的补码和原码，反码相同；负数是符号位为1，其它位是原码取反，未位加1。（或者说负数的补码是其绝对值反码未位加1）</strong></li><li><strong>移码：将符号位取反的补码（不区分正负）</strong></li></ul><p>补码为什么是反码加1？因为它的目的就是为了把减法运算变成加法运算。用表举例子，加上8小时就等于减去4小时（从位置上来看）。二进制也是一样，比如4位二进制数，它的模值就是16，也就是10000。因此，一个数的补就是10000减去这个数，也就是这个数的反码再加1。</p><h4 id="补码加减法"><a href="https://mxts.jiujiuer.xyz/2023/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/#%E8%A1%A5%E7%A0%81%E5%8A%A0%E5%87%8F%E6%B3%95" class="headerlink" title="补码加减法"></a>补码加减法</h4><ul><li><strong>在做补码加减法时，只需将符号位和数值部分一起参与运算，并且将符号位产生的进位丢掉即可</strong></li><li>补码加法公式<br/>  [X+Y]补 ＝ [X]补 + [Y]补</li><li>补码减法公式<br/>  [X-Y]补 = [X]补-[Y]补 = [X]补 + [-Y]补<br/>其中：[-Y]补称为负补,求负补的办法是：对补码的每一位(包括符合位)求反，且未位加1.</li></ul><h2 id="浮点数"><a href="https://mxts.jiujiuer.xyz/2023/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/#%E6%B5%AE%E7%82%B9%E6%95%B0" class="headerlink" title="浮点数"></a>浮点数</h2><p>类似科学计数法的表示法：$F=M\times 2^E$，$M$称为尾数，$E$称为阶码。</p><p>计算机中常见的浮点数存储方式为：<code>数符 阶符 阶码数值部分 尾数数值部分</code>。</p><h3 id="编码表示"><a href="https://mxts.jiujiuer.xyz/2023/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/#%E7%BC%96%E7%A0%81%E8%A1%A8%E7%A4%BA" class="headerlink" title="编码表示"></a>编码表示</h3><ul><li>尾数$M$必须是小数，用$n+1$位定点小数表示，可用原码、补码。</li><li>阶码$E$必须为整数，以$k+1$位有符号定点整数表示，可用原码、补码、移码。</li><li>浮点数编码位数为$m=(n+1)+(k+1)$</li></ul><h4 id="规格化浮点数"><a href="https://mxts.jiujiuer.xyz/2023/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/#%E8%A7%84%E6%A0%BC%E5%8C%96%E6%B5%AE%E7%82%B9%E6%95%B0" class="headerlink" title="规格化浮点数"></a>规格化浮点数</h4><p>对尾数无限制可能使得存储空间利用不充分，因此使用规格化形式表示。</p><p>定义 将尾数（记为$M$）的绝对值限定在规定的数值范围内：$1/2 \leq |M| \lt 1$，这样的浮点数就是规格化浮点数。实现这一点很简单，下面的尾数以补码表示：</p><ul><li>$M \geq 0$：$M=0.1\times\times\times\cdots\times$</li><li>$M \lt 0$：$M=1.0\times\times\times\cdots\times$</li></ul><h3 id="浮点数溢出"><a href="https://mxts.jiujiuer.xyz/2023/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/#%E6%B5%AE%E7%82%B9%E6%95%B0%E6%BA%A2%E5%87%BA" class="headerlink" title="浮点数溢出"></a>浮点数溢出</h3><h3 id="IEEE754标准"><a href="https://mxts.jiujiuer.xyz/2023/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/#IEEE754%E6%A0%87%E5%87%86" class="headerlink" title="IEEE754标准"></a>IEEE754标准</h3><table><thead><tr><th align="left">参数</th><th align="center">单精度浮点数</th><th align="center">双精度浮点数</th></tr></thead><tbody><tr><td align="left">浮点数长度</td><td align="center">32</td><td align="center">64</td></tr><tr><td align="left">尾数长度$f$</td><td align="center">23</td><td align="center">52</td></tr><tr><td align="left">符号位$s$</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="left">指数$e$长度</td><td align="center">8</td><td align="center">11</td></tr></tbody></table><h4 id="单精度浮点数"><a href="https://mxts.jiujiuer.xyz/2023/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/#%E5%8D%95%E7%B2%BE%E5%BA%A6%E6%B5%AE%E7%82%B9%E6%95%B0" class="headerlink" title="单精度浮点数"></a>单精度浮点数</h4><p>$$<br/>N=(-1)^S\times 2^{e-127}\times 1.f<br/>$$</p><hr/><p>IEEE754可以表示规格化浮点数，也可以表示非规格化浮点数。它表示越接近0的数越精确，越接近正负无穷的数越不准确。</p><h3 id="浮点数存储"><a href="https://mxts.jiujiuer.xyz/2023/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/#%E6%B5%AE%E7%82%B9%E6%95%B0%E5%AD%98%E5%82%A8" class="headerlink" title="浮点数存储"></a>浮点数存储</h3><p>目前计算机主要推行小端存储：浮点数的四个字节从低位到高位分别存储在计算机内存地址的低位到高位。</p><h4 id="大小端判断"><a href="https://mxts.jiujiuer.xyz/2023/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/#%E5%A4%A7%E5%B0%8F%E7%AB%AF%E5%88%A4%E6%96%AD" class="headerlink" title="大小端判断"></a>大小端判断</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">type</span><span class="params">()</span>{</span><br/><span class="line">    <span class="class"><span class="keyword">union</span>{</span><span class="type">float</span> a; <span class="type">char</span> b;} i;</span><br/><span class="line">    i.a=<span class="number">1</span>;</span><br/><span class="line">    <span class="built_in">printf</span>(<span class="string">&#34;%d&#34;</span>, i.b);</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>如果输出1，则说明计算机是小端存储。</p><h3 id="浮点数模型表示范围"><a href="https://mxts.jiujiuer.xyz/2023/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/#%E6%B5%AE%E7%82%B9%E6%95%B0%E6%A8%A1%E5%9E%8B%E8%A1%A8%E7%A4%BA%E8%8C%83%E5%9B%B4" class="headerlink" title="浮点数模型表示范围"></a>浮点数模型表示范围</h3><h4 id="思考题"><a href="https://mxts.jiujiuer.xyz/2023/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/#%E6%80%9D%E8%80%83%E9%A2%98" class="headerlink" title="思考题"></a>思考题</h4><p><img src="https://mxts.jiujiuer.xyz/IMG_20230215_115634.jpg"/></p><p>已知迷你754编码规则如上，求它的表示范围。</p><h2 id="BCD编码"><a href="https://mxts.jiujiuer.xyz/2023/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/#BCD%E7%BC%96%E7%A0%81" class="headerlink" title="BCD编码"></a>BCD编码</h2><p>典型的有8421码，这四个数字是位权。还有非位权码，比如余3码，格雷码等。</p><h2 id="非数值编码"><a href="https://mxts.jiujiuer.xyz/2023/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/#%E9%9D%9E%E6%95%B0%E5%80%BC%E7%BC%96%E7%A0%81" class="headerlink" title="非数值编码"></a>非数值编码</h2><p>ASCII，GB2312，GBK，还有兼容Unicode-2的编码。汉字编码用了变长数据，技术上类似于霍夫曼编码。</p><h2 id="校验码"><a href="https://mxts.jiujiuer.xyz/2023/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/#%E6%A0%A1%E9%AA%8C%E7%A0%81" class="headerlink" title="校验码"></a>校验码</h2><p>传输过程中，检验数据是否有丢失/错误的一种检验手段。</p><h3 id="奇偶校验码"><a href="https://mxts.jiujiuer.xyz/2023/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/#%E5%A5%87%E5%81%B6%E6%A0%A1%E9%AA%8C%E7%A0%81" class="headerlink" title="奇偶校验码"></a>奇偶校验码</h3><p>只有一位校验位，在数据的最高位。它表示数据中包括校验位在内的位的1的个数是奇数还是偶数。前者校验位为1，后者为0。</p><h3 id="CRC冗余循环校验码"><a href="https://mxts.jiujiuer.xyz/2023/02/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/#CRC%E5%86%97%E4%BD%99%E5%BE%AA%E7%8E%AF%E6%A0%A1%E9%AA%8C%E7%A0%81" class="headerlink" title="CRC冗余循环校验码"></a>CRC冗余循环校验码</h3></body></html>