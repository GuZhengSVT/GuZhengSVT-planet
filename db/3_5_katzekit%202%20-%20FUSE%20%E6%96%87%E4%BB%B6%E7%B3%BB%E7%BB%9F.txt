<html><head></head><body><p>文件系统是一种用来存储和组织计算机文件的<strong>软件</strong>。我们日常所说的硬盘只是一种存储介质，可以理解为一张白纸，但是这张纸并不能对上面的数据进行分块管理，也不能保证每一个bit在过了一段时间之后还是正确的。而文件系统就是用来管理这张纸的，除了存储文件的元数据信息之外，大部分文件系统还会提供校验码之类的数据安全保障，保证用户的数据不会因为存储介质的问题发生改变。</p>
<p>文件系统本身作为软件，还可以提供一些额外的功能，例如权限控制、加密、压缩、快照等等。这些功能都是在文件系统层面实现的，所以用户不需要关心具体的实现细节，只需要在使用的时候调用相应的接口就可以了。文件系统甚至还可以建立在另一个文件系统之上，例如 <code>cvsfs-fuse</code> 等等。</p>
<p>在用户空间文件系统（User-space Filesystems）出现之前，文件系统开发一直是操作系统内核开发人员的工作。创建一个新的文件系统需要了解内核编程和一些内核技术（例如vfs），但是移动存储设备的新兴和数据管理的需求使得这种文件系统开发方式显得很麻烦，应当有一种更加简洁好使的方案来开发文件系统，并能够在不同的操作系统中与原有API相互配合，于是便有了 <strong>FUSE（Filesystem in Userspace）</strong>。</p>
<p>本文的目的是简单探索 FUSE 的 API 接口与设计方式，在后续 katze 的开发中可以借鉴这一套方案进行设计。</p>
<h2 id="fuse-简介">FUSE 简介</h2>
<p><strong>FUSE（Filesystem in Userspace）</strong> 即 用户空间文件系统，定义了一套简单的 API 接口用于文件系统与内核进行交互。FUSE 本身被设计为一个内核模块，用户空间文件系统通过实现 FUSE API 与 FUSE 模块配合，最终实现了在用户空间中对文件系统的访问。</p>
<p>使用 FUSE 开发的文件系统可以直接链接到 FUSE 库，也就是说使用这套文件系统框架不需要了解内核技术也不需要进行内核编程，极大地方便了文件系统开发工作。</p>
<h3 id="历史--前身">历史 &amp; 前身</h3>
<p>用户空间文件系统并不是一个新的设计，在 FUSE 出现之前已经有了一些方案：</p>
<ol>
<li><a href="https://en.wikipedia.org/wiki/Linux_Userland_Filesystem" target="_blank" rel="external nofollow noopener noreferrer">LUFS</a> 是一种混合用户空间文件系统框架，可为任何应用程序透明地支持无限数量的文件系统，由内核模块和用户空间守护进程组成；</li>
<li><a href="https://dl.acm.org/doi/pdf/10.1145/290409.290410" target="_blank" rel="external nofollow noopener noreferrer">Ufo</a> 项目是 Solaris 的一个全局文件系统，允许用户像对待本地文件一样对待远程文件。</li>
</ol>
<p>FUSE 的主要目的是将这种文件系统实现引入 Linux。</p>
<h2 id="fuse-operations">FUSE Operations</h2>
<p>要在 FUSE 中创建文件系统，需要安装 FUSE 内核模块，然后使用 FUSE 库和 API 集来创建文件系统。</p>
<p>一般来说现代 Linux 发行版仓库里都会有 FUSE，并且作为默认内核模块提供。</p>
<p>fuse_operation 结构体中的必要函数：</p>
<div class="highlight" id="id-1"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">fuse_operations</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">getattr</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="k">struct</span> <span class="n">stat</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">readlink</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="kt">char</span> <span class="p">,</span> <span class="kt">size_t</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">getdir</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="kt">fuse_dirh_t</span><span class="p">,</span> <span class="kt">fuse_dirfil_t</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">mknod</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="kt">mode_t</span><span class="p">,</span> <span class="kt">dev_t</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">mkdir</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="kt">mode_t</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">unlink</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">rmdir</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">symlink</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">rename</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">link</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">chmod</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="kt">mode_t</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">chown</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="kt">uid_t</span><span class="p">,</span> <span class="kt">gid_t</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">truncate</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="kt">off_t</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">utime</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="k">struct</span> <span class="n">utimbuf</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">open</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="k">struct</span> <span class="n">fuse_file_info</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">read</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="kt">char</span> <span class="p">,</span> <span class="kt">size_t</span><span class="p">,</span> <span class="kt">off_t</span><span class="p">,</span> <span class="k">struct</span> <span class="n">fuse_file_info</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">write</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="kt">size_t</span><span class="p">,</span> <span class="kt">off_t</span><span class="p">,</span><span class="k">struct</span> <span class="n">fuse_file_info</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">statfs</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="k">struct</span> <span class="n">statfs</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">flush</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="k">struct</span> <span class="n">fuse_file_info</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">release</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="k">struct</span> <span class="n">fuse_file_info</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">fsync</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="k">struct</span> <span class="n">fuse_file_info</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">setxattr</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="kt">size_t</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">getxattr</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="kt">char</span> <span class="p">,</span> <span class="kt">size_t</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">listxattr</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="kt">char</span> <span class="p">,</span> <span class="kt">size_t</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">(</span><span class="n">removexattr</span><span class="p">)</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre></div><ul>
<li><code>getattr</code>：获取文件属性。这类似于 <code>stat()</code> ，<code>st_dev</code> 和 <code>st_blksize</code> 将被忽略。除非给出 <code>use_ino</code>，否则 <code>st_ino</code> 也会被忽略；</li>
<li><code>readlink</code>：读取符号链接；</li>
<li><code>getdir</code>：读取目录的内容，此操作是 <code>opendir()</code> 、 <code>readdir()</code> 、…、 <code>closedir()</code> 操作序列组合成的。对于每个目录条目，应调用 <code>filldir()</code> 函数；</li>
<li><code>mknod</code>：将创建一个文件节点；</li>
<li><code>mkdir</code>：创建一个目录；</li>
<li><code>unlink</code>：删除一个文件；</li>
<li><code>rmdir</code>：删除一个目录；</li>
<li><code>symlink</code>：创建一个符号链接；</li>
<li><code>rename</code>：重命名一个文件；</li>
<li><code>link</code>：创建一个硬链接；</li>
<li><code>chmod</code>：更改文件权限；</li>
<li><code>chown</code>：更改文件所有者和组；</li>
<li><code>truncate</code>：更改文件大小；</li>
<li><code>utime</code>：更改文件访问和修改时间；</li>
<li><code>open</code>：打开文件；</li>
<li><code>read</code>：读取文件。<code>read()</code> 应准确返回请求的字节数，<code>EOF</code> 或错误除外。一个例外是当指定了 <code>direct_io</code> 时，<code>read()</code> 系统调用的返回值就是 <code>direct_io</code> 的返回值；</li>
<li><code>write</code>：写入文件；</li>
<li><code>statfs</code>：获取文件系统状态；</li>
<li><code>flush</code>：刷新缓冲区；</li>
<li><code>release</code>：释放打开的文件；</li>
<li><code>fsync</code>：同步文件；</li>
<li><code>setxattr</code>：设置扩展属性；</li>
<li><code>getxattr</code>：获取扩展属性；</li>
<li><code>listxattr</code>：列出扩展属性；</li>
</ul>
<p>这些操作并不都是绝对必要的，仅实现其中一部分也可以构建一个完整的文件系统。</p>
<p>对于 katze 来说，我们只需要读取操作，所以实现的 API 可以简化不少：</p>
<ul>
<li><code>getattr</code></li>
<li><code>getdir</code></li>
<li><code>read</code></li>
<li><code>statfs</code></li>
<li><code>getprops</code></li>
</ul>
<p>实际实现中还会加一些内部方法。在这些方法中，我主要简化了文件读取操作为单个read，read会返回指定范围的文件内容，不会一次性读取整个文件。在实际实现中这种操作可能需要优化，对于根文件来说应当保留fd，否则每次调用read的时候都要走系统调用重新打开fd再关上，很浪费IO性能。但是对于镜像文件内的文件就没必要这么做了，因为所有的数据都是通过 relay 对象逐步定位到镜像文件上的。</p>
</body></html>