<html><head></head><body><p>相关文章：《<a href="https://xiue233.github.io/2023/09/09/aether-manual/" title="Aether使用指南(主体功能概述)">Aether使用指南(主体功能概述)</a>》</p><p>本文章为针对一年前技术探索的回想与记录，因时间跨度过大，有部分实现细节已经遗忘，望谅解。</p><p>因为篇幅原因，本文只做Aether的简单介绍以及在Android下的兼容开发过程，Aether的使用以及针对Gradle Dependency Conflict Resolution的适配见后续文章。</p><blockquote><p>Aether is a library for working with artifact repositories. Aether deals with the specification of local repository, remote repository, developer workspaces, artifact transports, and artifact resolution.<br/>(Aether是一个用于处理Artifact仓库的库。 Aether能够处理本地Maven仓库、远程Maven仓库、开发工作区、Artifact的传输和Artifact的解析。)</p></blockquote><h2 id="什么是Aether？我们为什么要使用Aether？"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#%E4%BB%80%E4%B9%88%E6%98%AFAether%EF%BC%9F%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8Aether%EF%BC%9F" class="headerlink" title="什么是Aether？我们为什么要使用Aether？"></a>什么是Aether？我们为什么要使用Aether？</h2><p>Aether是<em>Eclipse Foundation</em>下的一个用于Maven拉取与本地仓库管理的项目。不同于Maven，Aether是Maven包装后的可插件版。</p><p>通过Aether，开发者可以把控Artifact拉取以及存放过程中的各种细节，并自定义<em>依赖冲突解决策略</em>、<em>版本比较方案</em>、<em>依赖树遍历策略</em>等功能。</p><p>当然，因为我的目的是在Android上运行一个Maven Resolver，经过和朋友们的筛选，发现Aether较符合我们的要求(兼容度与功能丰富度)，所以使用了他。</p><p><strong>Aether现已废弃，更名为<a href="https://github.com/apache/maven-resolver">maven-resolver</a>并持续更新中。</strong></p><blockquote><p>相关链接：<br/><a href="https://projects.eclipse.org/projects/technology.aether">Aether Project Website(已废弃)</a><br/><a href="https://github.com/apache/maven-resolver">maven-resolver</a><br/><a href="https://wiki.eclipse.org/Aether">Aether Wiki</a></p></blockquote><h2 id="Aether的依赖结构"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#Aether%E7%9A%84%E4%BE%9D%E8%B5%96%E7%BB%93%E6%9E%84" class="headerlink" title="Aether的依赖结构"></a>Aether的依赖结构</h2><pre><code class="XML">&lt;properties&gt;    &lt;aetherVersion&gt;1.0.0.v20140518&lt;/aetherVersion&gt;    &lt;mavenVersion&gt;3.1.0&lt;/mavenVersion&gt;    &lt;wagonVersion&gt;1.0&lt;/wagonVersion&gt;  &lt;/properties&gt;  &lt;dependencies&gt;  &lt;dependency&gt;      &lt;groupId&gt;org.eclipse.aether&lt;/groupId&gt;      &lt;artifactId&gt;aether-api&lt;/artifactId&gt;      &lt;version&gt;${aetherVersion}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.eclipse.aether&lt;/groupId&gt;      &lt;artifactId&gt;aether-util&lt;/artifactId&gt;      &lt;version&gt;${aetherVersion}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.eclipse.aether&lt;/groupId&gt;      &lt;artifactId&gt;aether-impl&lt;/artifactId&gt;      &lt;version&gt;${aetherVersion}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.eclipse.aether&lt;/groupId&gt;      &lt;artifactId&gt;aether-connector-basic&lt;/artifactId&gt;      &lt;version&gt;${aetherVersion}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.eclipse.aether&lt;/groupId&gt;      &lt;artifactId&gt;aether-transport-file&lt;/artifactId&gt;      &lt;version&gt;${aetherVersion}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.eclipse.aether&lt;/groupId&gt;      &lt;artifactId&gt;aether-transport-http&lt;/artifactId&gt;      &lt;version&gt;${aetherVersion}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.eclipse.aether&lt;/groupId&gt;      &lt;artifactId&gt;aether-transport-wagon&lt;/artifactId&gt;      &lt;version&gt;${aetherVersion}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;      &lt;artifactId&gt;maven-aether-provider&lt;/artifactId&gt;      &lt;version&gt;${mavenVersion}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.apache.maven.wagon&lt;/groupId&gt;      &lt;artifactId&gt;wagon-ssh&lt;/artifactId&gt;      &lt;version&gt;${wagonVersion}&lt;/version&gt;    &lt;/dependency&gt;    &lt;/dependencies&gt;</code></pre><p>上述依赖用途说明 *(摘自Aether Wiki)*：</p><ul><li>aether-api<br/>此Jar依赖包含了Aether interfaces，Aether系统的入口类是<em>org.eclipse.aether.RepositorySystem</em>。</li><li>aether-util<br/>如名，此依赖包含了许多工具类，并提供了常用系统组件。</li><li>aether-impl<br/>此依赖包含了仓库系统接口的实例化类。<strong>除非在特殊情况下，需要自定义Aether系统的内部处理逻辑，或者需要手动协同一些功能，在程序的开发过程中不建议直接访问/操作此依赖中的任何类。</strong></li><li>aether-connector-basic<br/>Artifact到远程Repository的上传和下载是通过Repository connector实现的。 这一connector一部分通用，并将部分工作委托给可插拔的传输协议和repository layouts。 因此，需要明确的是，该connector本身无法访问任何repository，必需包含一个或多个传输模块才能组合为正常运行的系统。</li><li>ether-transport-file<br/>此依赖提供了通过file或者URL访问repository的支持库。</li><li>aether-transport-http<br/>此依赖提供了访问基于http或者https协议的repository的支持库。</li><li>aether-transport-wagon<br/>此依赖基于Maven Wagon，通过已有Wagon providers来访问repository。</li><li>wagon-ssh<br/>此依赖项补充了前面提到的 aether-transport-wagon库，并添加了对使用 scp: 和 sftp: 方案进行传输的支持。 它包含在上面的 POM 片段中只是一个示例，可以使用任何符合需求的 Wagon provider；也可以根本不使用，此时，可以从依赖中删除 aether-transport-wagon。</li><li>maven-aether-provider<br/>此依赖提供了使用 Maven POM 作为Artifact descriptors并从中提取依赖关系信息。 此外，它还提供了对Maven Repository中使用的其他元数据(metadata)文件的处理。</li></ul><p><strong>注意: Aether需要1.5及以上的JDK来编译及允许。</strong></p><h2 id="针对Android的适配"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#%E9%92%88%E5%AF%B9Android%E7%9A%84%E9%80%82%E9%85%8D" class="headerlink" title="针对Android的适配"></a>针对Android的适配</h2><p>适配问题其实很简单明了，只需要抓住主要矛盾：需要什么？有什么不同导致了需要的东西缺失？以什么方式来补全缺失？</p><p>从Jre上来看(暂且不论版本问题，毕竟Aether是个老项目，Java 1.5+即可)，Android上的Jre与PC端的不同点主要在于Android上的Jre是针对Android的阉割优化版，大体内容不变，但是不包含许多javax包下的类，以及所有针对PC平台的类。</p><h3 id="剖析：需要什么？有什么不同导致了需要的东西缺失？"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#%E5%89%96%E6%9E%90%EF%BC%9A%E9%9C%80%E8%A6%81%E4%BB%80%E4%B9%88%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%E5%AF%BC%E8%87%B4%E4%BA%86%E9%9C%80%E8%A6%81%E7%9A%84%E4%B8%9C%E8%A5%BF%E7%BC%BA%E5%A4%B1%EF%BC%9F" class="headerlink" title="剖析：需要什么？有什么不同导致了需要的东西缺失？"></a>剖析：需要什么？有什么不同导致了需要的东西缺失？</h3><p>(当然，此文编造的是不断的尝试后的事后诸葛亮行为，解决问题的最好方式还是实践求真理，做个简单的demo并且不断地尝试了。)</p><p>我们仍从上述依赖配置中探索，首先针对Aether API、util、impl以及provider部分，因为只使用了基础的类，显然兼容度很高；然后，分析剩下的transport协议库，对于file部分没啥争议，毕竟Java 1.8之后才会考虑Path这个影响兼容性的东东，那么就是网络协议部分可能有问题了。</p><p>为了不纸上谈兵，我们先做一个简单的项目，并写一行，debug打包允许：</p><pre><code class="java">DefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();</code></pre><p>果不其然，我们可以得到一个报错:</p><pre><code class="txt">java.lang.NoSuchMethodError:No direct method &lt;init&gt;(Ljavax/net/ssl/SSLSocketFactory;Lorg/apache/http/conn/ssl/X509HostnameVerifier;)V in class Lorg/apache/http/conn/ssl/SSLSocketFactory; or its super classes(declaration of &#39;org.apache.http.conn.ssl.SSLSocketFactory&#39; appears in /system/framework/framework.jar!classes3.dex)framework/framework.jar!classes3.dex)at org.eclipse.aether.transport.http.SslSocketFactory.&lt;init(SslSocketFactory.java:57)...</code></pre><p>原来是<em>org.eclipse.aether.transport.http.SslSocketFactory</em>的构造方法里面出现问题了，我们顺藤摸瓜看看为啥：</p><p>(在Android Studio内，切换到Project工程结构展示，展开External Libraries，进入org.eclipse.aether.transport-http包内查找)</p><p><em>org.eclipse.aether.transport.http.SslSocketFactory</em>文件内容:</p><pre><code class="java">final class SslSocketFactory    extends org.apache.http.conn.ssl.SSLSocketFactory{...    private SslSocketFactory( SSLSocketFactory socketfactory, X509HostnameVerifier hostnameVerifier,                              String[] cipherSuites, String[] protocols )    {        super( socketfactory, hostnameVerifier );         this.cipherSuites = cipherSuites;        this.protocols = protocols;    }...}</code></pre><p>其实在AS内可以看到这里已经显示报错了:<br/><img src="https://xiue233.github.io/images/aether_error_in_as.png" alt="AS code error"/></p><p>显然是父类根本没这个构造方法。那么问题来了，为什么在PC上的JRE可以用，Android上的却不行了？查资料可知：<br/><img src="https://xiue233.github.io/images/apache_http_client_removal.png" alt="apache_http_client_removal"/></p><p>原来是，Android这小子不识抬举，大大阉割了Apache Http提供的Android特别版，转向使用OKhttp了，导致使用不了大部分Apache Http API。</p><p>知道问题了那么解决方案是什么？</p><h3 id="以什么方式来补全缺失？"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#%E4%BB%A5%E4%BB%80%E4%B9%88%E6%96%B9%E5%BC%8F%E6%9D%A5%E8%A1%A5%E5%85%A8%E7%BC%BA%E5%A4%B1%EF%BC%9F" class="headerlink" title="以什么方式来补全缺失？"></a>以什么方式来补全缺失？</h3><h4 id="Try-1-导入-Apache-Http-Legacy-包-失败"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#Try-1-%E5%AF%BC%E5%85%A5-Apache-Http-Legacy-%E5%8C%85-%E5%A4%B1%E8%B4%A5" class="headerlink" title="Try 1: 导入 Apache Http Legacy 包 (失败)"></a>Try 1: 导入 Apache Http Legacy 包 (失败)</h4><p>导入<em>org.apache.http.legacy</em>包，但是这么简单的办法当然是不行的，在许多设备上无法成功，很小一部分设备可以。(点名批评Homo OS based AOSP，就是它兼容性最差。)</p><h4 id="Try-2-使用JarFilter替换不兼容类，改用兼容代码-失败"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#Try-2-%E4%BD%BF%E7%94%A8JarFilter%E6%9B%BF%E6%8D%A2%E4%B8%8D%E5%85%BC%E5%AE%B9%E7%B1%BB%EF%BC%8C%E6%94%B9%E7%94%A8%E5%85%BC%E5%AE%B9%E4%BB%A3%E7%A0%81-%E5%A4%B1%E8%B4%A5" class="headerlink" title="Try 2: 使用JarFilter替换不兼容类，改用兼容代码 (失败)"></a>Try 2: 使用JarFilter替换不兼容类，改用兼容代码 (失败)</h4><p><a href="https://github.com/nekocode/JarFilterPlugin">JarFilter</a>是一个用于编译时替换所依赖Jar中指定类的Gradle Plugin。</p><p>于是有了以下操作:</p><p>1.使用JarFilter移除org.eclipse.aether.transport.http.SslSocketFactory</p><p>2.改用新自定义类，来适配安卓版的Apache Http，完成相关功能</p><h5 id="实践"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#%E5%AE%9E%E8%B7%B5" class="headerlink" title="实践"></a>实践</h5><p>首先，在app模块下的build.gradle文件内添加如下内容:</p><pre><code class="groovy">apply plugin: &#34;jar-filter&#34; jarFilters {    //兼容安卓版本的apache SSLSocketFactory    &#34;org.eclipse.aether:aether-transport-http:(.*)&#34; {        excludes = [                &#39;org/eclipse/aether/transport/http/SslSocketFactory.class&#39;,                &#39;org/eclipse/aether/transport/http/SslSocketFactory\\$(.*).class&#39;        ]    }}</code></pre><p>再创建一个同名的替换类<em>org.eclipse.aether.transport.http.SslSocketFactory</em>，</p><pre><code class="java">package org.eclipse.aether.transport.http; import org.apache.http.conn.ConnectTimeoutException;import org.apache.http.conn.HttpInetSocketAddress;import org.apache.http.conn.scheme.HostNameResolver;import org.apache.http.conn.scheme.LayeredSchemeSocketFactory;import org.apache.http.conn.scheme.LayeredSocketFactory;import org.apache.http.conn.scheme.SchemeLayeredSocketFactory;import org.apache.http.conn.ssl.X509HostnameVerifier;import org.apache.http.params.HttpConnectionParams;import org.apache.http.params.HttpParams; import java.io.IOException;import java.net.InetSocketAddress;import java.net.Socket;import java.net.SocketTimeoutException;import java.net.UnknownHostException;import java.security.KeyManagementException;import java.security.KeyStore;import java.security.KeyStoreException;import java.security.NoSuchAlgorithmException;import java.security.UnrecoverableKeyException;import java.security.cert.CertificateException; import javax.net.ssl.HostnameVerifier;import javax.net.ssl.SSLContext;import javax.net.ssl.SSLSocket;import javax.net.ssl.SSLSocketFactory; final class SslSocketFactory        extends org.apache.http.conn.ssl.SSLSocketFactory implements SchemeLayeredSocketFactory,        LayeredSchemeSocketFactory, LayeredSocketFactory {     private final SSLContext sslcontext;    private final javax.net.ssl.SSLSocketFactory socketfactory;    private final HostNameResolver nameResolver;    private X509HostnameVerifier hostnameVerifier = BROWSER_COMPATIBLE_HOSTNAME_VERIFIER;     private final String[] cipherSuites;     private final String[] protocols;     public SslSocketFactory(SslConfig config) throws UnrecoverableKeyException, KeyStoreException, NoSuchAlgorithmException, KeyManagementException, CertificateException, IOException {        this(getSocketFactory(config.context), getHostnameVerifier(config.verifier), config.cipherSuites,                config.protocols);    }     private static SSLSocketFactory getSocketFactory(SSLContext context) {        return (context != null) ? context.getSocketFactory() : (SSLSocketFactory) SSLSocketFactory.getDefault();    }     private static X509HostnameVerifier getHostnameVerifier(HostnameVerifier verifier) {        return (verifier != null) ? X509HostnameVerifierAdapter.adapt(verifier)                : org.apache.http.conn.ssl.SSLSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER;    }     private SslSocketFactory(SSLSocketFactory socketfactory, X509HostnameVerifier hostnameVerifier,                             String[] cipherSuites, String[] protocols) throws UnrecoverableKeyException, KeyStoreException, NoSuchAlgorithmException, KeyManagementException, CertificateException, IOException {        super(defaultKeyStore());        this.sslcontext = null;        this.socketfactory = socketfactory;        this.nameResolver = null;        this.setHostnameVerifier(hostnameVerifier);        this.cipherSuites = cipherSuites;        this.protocols = protocols;    }     private static KeyStore defaultKeyStore() throws KeyStoreException, CertificateException, IOException, NoSuchAlgorithmException {        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());        trustStore.load(null, null);        return trustStore;    }     protected void prepareSocket(SSLSocket socket)            throws IOException {        if (cipherSuites != null) {            socket.setEnabledCipherSuites(cipherSuites);        }        if (protocols != null) {            socket.setEnabledProtocols(protocols);        }    }     @Override    public Socket createLayeredSocket(Socket socket, String target, int port, boolean autoClose) throws IOException, UnknownHostException {        SSLSocket sslSocket = (SSLSocket) this.socketfactory.createSocket(                socket,                target,                port,                autoClose        );        prepareSocket(sslSocket);        sslSocket.startHandshake();        if (this.hostnameVerifier != null) {            this.hostnameVerifier.verify(target, sslSocket);        }        // verifyHostName() didn&#39;t blowup - good!        return sslSocket;    }     @Override    public Socket createLayeredSocket(Socket socket, String target, int port, HttpParams params) throws IOException, UnknownHostException {        SSLSocket sslSocket = (SSLSocket) this.socketfactory.createSocket(                socket,                target,                port,                true);        prepareSocket(sslSocket);        sslSocket.startHandshake();        if (this.hostnameVerifier != null) {            this.hostnameVerifier.verify(target, sslSocket);        }        // verifyHostName() didn&#39;t blowup - good!        return sslSocket;    }     @Override    public Socket createSocket(HttpParams params) throws IOException {        SSLSocket sock = (SSLSocket) this.socketfactory.createSocket();        prepareSocket(sock);        return sock;    }     @Override    public Socket connectSocket(Socket socket, InetSocketAddress remoteAddress, InetSocketAddress localAddress, HttpParams params) throws IOException, UnknownHostException, ConnectTimeoutException {        if (remoteAddress == null) {            throw new IllegalArgumentException(&#34;Remote address may not be null&#34;);        }        if (params == null) {            throw new IllegalArgumentException(&#34;HTTP parameters may not be null&#34;);        }        Socket sock = socket != null ? socket : this.socketfactory.createSocket();        if (localAddress != null) {            sock.setReuseAddress(params.getBooleanParameter(&#34;http.socket.reuseaddr&#34;, false));            sock.bind(localAddress);        }         int connTimeout = HttpConnectionParams.getConnectionTimeout(params);        int soTimeout = HttpConnectionParams.getSoTimeout(params);         try {            sock.setSoTimeout(soTimeout);            sock.connect(remoteAddress, connTimeout);        } catch (SocketTimeoutException ex) {            throw new ConnectTimeoutException(                    &#34;Connect to &#34; + remoteAddress + &#34; timed out :&#34; + ex.getMessage());“连接到” + 远程地址 + “ 超时 ：” + ex.getMessage（））;        }         String hostname;        if (remoteAddress instanceof HttpInetSocketAddress) {            hostname = ((HttpInetSocketAddress) remoteAddress).getHttpHost().getHostName();        } else {            hostname = remoteAddress.getHostName();        }         SSLSocket sslsock;        // Setup SSL layering if necessary        if (sock instanceof SSLSocket) {            sslsock = (SSLSocket) sock;        } else {            int port = remoteAddress.getPort();            sslsock = (SSLSocket) this.socketfactory.createSocket(sock, hostname, port, true);            prepareSocket(sslsock);        }        sslsock.startHandshake();        if (this.hostnameVerifier != null) {            try {                this.hostnameVerifier.verify(hostname, sslsock);                // verifyHostName() didn&#39;t blowup - good!            } catch (IOException iox) {                // close the socket before re-throwing the exception                try {                    sslsock.close();                } catch (Exception x) { /*ignore*/ }                throw iox;            }        }        return sslsock;    }}</code></pre><p>这里我们直接使用Android所兼容的Apache Http API即可。</p><h5 id="结论"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#%E7%BB%93%E8%AE%BA" class="headerlink" title="结论"></a>结论</h5><p>经实验，部分手机可以允许，Homo OS依旧无法运行。最大的问题在于，这个JarFilter支持的AGP版本太低，在AGP版本较高时便不能在build release时正常运行，在部分版本下只能在build debug正常运行。</p><p>寄。</p><h4 id="Try3-强行塞入PC端Jre的一些类-Apache-Http包-成功"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#Try3-%E5%BC%BA%E8%A1%8C%E5%A1%9E%E5%85%A5PC%E7%AB%AFJre%E7%9A%84%E4%B8%80%E4%BA%9B%E7%B1%BB-Apache-Http%E5%8C%85-%E6%88%90%E5%8A%9F" class="headerlink" title="Try3: 强行塞入PC端Jre的一些类+Apache Http包 (成功)"></a>Try3: 强行塞入PC端Jre的一些类+Apache Http包 (成功)</h4><p>既然，Aether是transport缺少Apache Http API而无法运行，那么是不是可以直接把Apache Http给强行迁移过来呢？是，但是需要一定的魔改。</p><p>众所周知，JVM运行中，因为双亲委托机制的存在，用户能操作的ClassLoader是不能覆盖系统提供的类文件的，否则会有各种奇妙的异常(因为不同设备对Apache Http的阉割情况可能不同)，所以我们不能简单地直接依赖原版Apache Http包。</p><p>那么，较优的方法是通过JarJar修改所有包下关于Apache Http的包名信息为自定义的，然后强行塞入App内，<del>让它成为你想要的形状</del>。</p><h5 id="实践-1"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#%E5%AE%9E%E8%B7%B5-1" class="headerlink" title="实践"></a>实践</h5><p>(因为当时没完整记录这个流程，导致没有截图啥的信息，只在此说明大概思路了。)</p><p>首先，下载所需版本的<em>aether-transport-http.jar</em>、<em>Apache Http Core.jar</em>、<em>Apache Http Client.jar</em>；</p><p>然后，利用JarJar手写规则，将<em>org.apache.http</em>包名更改为你自定义的包名；</p><p>最后，去掉build.gradle中对于aether-transport-http、Apache Http Core以及Apache Http Client的依赖，改为上述已修改的Jar。</p><p>如果没有意外的话，就有意外了，发现又有新的报错，是缺少javax.*包下的类，这个解决也很简单暴力，直接复制一份Jre 1.8下lib文件夹内的rt.jar，删除一些无关类即可。(删除什么我已经忘记了，可以自行尝试，即使删的少了也并不会影响运行。)</p><h5 id="结论-1"><a href="https://xiue233.github.io/2023/09/05/aether-in-android/#%E7%BB%93%E8%AE%BA-1" class="headerlink" title="结论"></a>结论</h5><p>经实验，本解决方案完美适配已知所有设备（Homo也难不倒它），可以放心地使用此方案。</p></body></html>