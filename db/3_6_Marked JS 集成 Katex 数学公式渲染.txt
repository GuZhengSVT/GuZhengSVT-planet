<html><head></head><body><h2 id="前言">前言</h2>
<p>在内容网站中支持 Markdown 渲染已经是一个很常见的需求了，相比较 <a href="https://github.com/Vanessa219/vditor" target="_blank" rel="noopener noreffer ">Vditor</a>、<a href="https://github.com/markdown-it/markdown-it" target="_blank" rel="noopener noreffer ">markdown-it</a> 等重量级 markdown 编辑器与渲染工具来说，用 <a href="https://marked.js.org" target="_blank" rel="noopener noreffer ">marked</a> 这类更轻量级的渲染库会带来更好的体验，网站的样式也都可以自己控制。但是 <a href="https://marked.js.org" target="_blank" rel="noopener noreffer ">Marked JS</a> 仅支持将基本 Markdown 语法渲染成 HTML 标记，对于 代码块高亮、数学公式还是无能为力的。有关代码高亮官方给出了与<a href="https://highlightjs.org/" target="_blank" rel="noopener noreffer ">highlightJS</a>集成的<a href="https://marked.js.org/using_advanced" target="_blank" rel="noopener noreffer ">方式</a>，但是有关集成数学公式渲染的我只搜到了几个issue和一些奇怪的实现：</p>
<ul>
<li><a href="https://github.com/markedjs/marked/issues/722" target="_blank" rel="noopener noreffer ">https://github.com/markedjs/marked/issues/722</a></li>
<li><a href="https://github.com/linxiaowu66/marked-kaTex" target="_blank" rel="noopener noreffer ">https://github.com/linxiaowu66/marked-kaTex</a> （甚至是直接fork了改的，项目也过期很久了）</li>
<li><a href="https://gist.github.com/tajpure/47c65cf72c44cb16f3a5df0ebc045f2f" target="_blank" rel="noopener noreffer ">https://gist.github.com/tajpure/47c65cf72c44cb16f3a5df0ebc045f2f</a> （拦截render实现，并提前渲染，会出一些奇怪的问题）</li>
<li><a href="https://www.xiaog.info/blog/post/marked_js_katex" target="_blank" rel="noopener noreffer ">https://www.xiaog.info/blog/post/marked_js_katex</a> （上面那个的中文版，似乎做了一点改进，但还是很奇怪）</li>
</ul>
<p>看了后两个现有方案，基本上是用正则表达式给数学公式提取出来，然后塞到 katex 里一顿处理成 html，然后塞回 marked 当成 html 块无脑再渲染一遍。我试了试是能用的，但是行为很奇怪，marked 在处理已经渲染好的 html 块时还会做一些额外的工作，例如转义什么的，最后某些字符总是显示的有问题。</p>
<p>还是看看远处的插件文档，自己写一个插件吧。</p>
<h2 id="marked-js-插件实现">Marked JS 插件实现</h2>
<p>我打算集成 Katex 而不是 MathJax。因为网站本身不是为了专业的 Markdown 渲染开发的，支持数学公式只是为了让文章阅读更加方便。MathJax 支持很多高级特性，还支持渲染到不同的格式，似乎功能有些冗余，Katex 足够轻量，看起来完全符合我的需求。</p>
<h3 id="marked-工作机制">Marked 工作机制</h3>
<p>在写插件之前，要先了解一下 <a href="https://marked.js.org/using_pro" target="_blank" rel="noopener noreffer ">marked 的工作机制</a>。marked 的渲染流程如下：</p>
<ul>
<li>用户输入 markdown 格式的纯文本内容；</li>
<li><code>lexer</code> 会把输入的一些片段依次发送给不同的 <code>tokenizer</code>，并从这些 <code>tokenizer</code> 中生成一系列的 <code>token</code>，储存到一个嵌套的树结构中；</li>
<li>每个 <code>tokenizer</code> 接收到文本片段后，便会进行判断这个片段是否匹配某个标记格式，如果匹配的话，便会生成一个包含相关信息的 <code>token</code>，如果没有匹配的片段，就返回一个空值；</li>
<li><code>walkTokens</code> 函数会遍历所有的 <code>token</code>，然后将这些 <code>token</code> 送入对应的 <code>renderer</code> 中进行渲染，并把渲染的结果拼接成最终的 HTML；</li>
</ul>
<p>在了解这些之后，应该可以发现，只要实现一个能够提取数学公式块的 <code>tokenizer</code> 和一个能够渲染的 <code>renderer</code>，并整合进 marked 的工作流程中，就能够实现数学公式的渲染了。</p>
<h3 id="相关-api">相关 API</h3>
<p>marked 提供了<a href="https://marked.js.org/using_pro#extensions" target="_blank" rel="noopener noreffer ">相关的 API</a>，这里就不当翻译官了。</p>
<h3 id="实现-tokenizer">实现 <code>tokenizer</code></h3>
<p><code>tokenizer</code> 需要两个，一个用来解决 <code>$f(x)=x+y$</code> 这样的行内公式，一类用来对付</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">$$
</span></span><span class="line"><span class="cl">f(x) = \frac{1}{x}
</span></span><span class="line"><span class="cl">$$
</span></span></code></pre></div><p>这类的行间公式。匹配这些我们只需要两个正则表达式就可以了，一个匹配单个 <code>$</code>，一个匹配 <code>$$</code>。</p>
<h3 id="实现-render">实现 <code>render</code></h3>
<p>直接一把梭 <code>katex.renderToString(token.text, options)</code></p>
<h2 id="代码片段">代码片段</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-typescript" data-lang="typescript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">katex</span><span class="p">,</span> <span class="p">{</span><span class="kr">type</span> <span class="nx">KatexOptions</span><span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;katex&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="s1">&#39;katex/dist/katex.css&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="kr">type</span> <span class="p">{</span><span class="nx">marked</span><span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;marked&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">options</span>: <span class="kt">KatexOptions</span> <span class="o">=</span> <span class="p">{})</span><span class="o">:</span> <span class="nx">marked</span><span class="p">.</span><span class="nx">MarkedExtension</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">extensions</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="nx">inlineKatex</span><span class="p">(</span><span class="nx">options</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="nx">blockKatex</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">inlineKatex</span><span class="p">(</span><span class="nx">options</span>: <span class="kt">KatexOptions</span><span class="p">)</span><span class="o">:</span> <span class="nx">marked</span><span class="p">.</span><span class="nx">TokenizerAndRendererExtension</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;inlineKatex&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">level</span><span class="o">:</span> <span class="s1">&#39;inline&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">start</span><span class="p">(</span><span class="nx">src</span>: <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nx">src</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;$&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">tokenizer</span><span class="p">(</span><span class="nx">src</span>: <span class="kt">string</span><span class="p">,</span> <span class="nx">_tokens</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kr">const</span> <span class="nx">match</span> <span class="o">=</span> <span class="nx">src</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^\$+([^$\n]+?)\$+/</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="nx">match</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="kr">type</span><span class="o">:</span> <span class="s1">&#39;inlineKatex&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">raw</span>: <span class="kt">match</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">text</span>: <span class="kt">match</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">trim</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">renderer</span><span class="p">(</span><span class="nx">token</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nx">katex</span><span class="p">.</span><span class="nx">renderToString</span><span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">blockKatex</span><span class="p">(</span><span class="nx">options</span>: <span class="kt">KatexOptions</span><span class="p">)</span><span class="o">:</span> <span class="nx">marked</span><span class="p">.</span><span class="nx">TokenizerAndRendererExtension</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;blockKatex&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">level</span><span class="o">:</span> <span class="s1">&#39;block&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">start</span><span class="p">(</span><span class="nx">src</span>: <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nx">src</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;$$&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">tokenizer</span><span class="p">(</span><span class="nx">src</span>: <span class="kt">string</span><span class="p">,</span> <span class="nx">_tokens</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kr">const</span> <span class="nx">match</span> <span class="o">=</span> <span class="nx">src</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^\$\$+\n([^$]+?)\n\$\$/</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="nx">match</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="kr">type</span><span class="o">:</span> <span class="s1">&#39;blockKatex&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">raw</span>: <span class="kt">match</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">text</span>: <span class="kt">match</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">trim</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">renderer</span><span class="p">(</span><span class="nx">token</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">options</span><span class="p">.</span><span class="nx">displayMode</span> <span class="o">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="sb">`&lt;p&gt;</span><span class="si">${</span><span class="nx">katex</span><span class="p">.</span><span class="nx">renderToString</span><span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span><span class="si">}</span><span class="sb">&lt;/p&gt;`</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>保存到 <code>katex_extension.ts</code> 中，使用时只需要导入后 <code>marked.use(KatexExtension({}))</code> 即可，参数中接收的是 Katex 的设置项。</p>
<p>如果需要 lazy load，也可以</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-typescript" data-lang="typescript"><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">katex</span> <span class="o">=</span> <span class="k">await</span> <span class="kr">import</span><span class="p">(</span><span class="s1">&#39;@/path/to/katex_extension.ts&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">marked</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">katex</span><span class="p">.</span><span class="k">default</span><span class="p">({</span><span class="nx">strict</span>: <span class="kt">false</span><span class="p">}))</span>
</span></span></code></pre></div><p>我先使用不带任何插件的 marked 将基础内容渲染出来，然后再加载katex与highlightJS重新渲染一遍，在某些网速不佳的环境下能提供更好的用户体验。</p>
</body></html>