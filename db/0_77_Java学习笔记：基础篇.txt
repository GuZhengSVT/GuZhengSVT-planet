<html><head></head><body><h1 id="序言"><a href="https://mxts.jiujiuer.xyz/2022/01/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87/#%E5%BA%8F%E8%A8%80" class="headerlink" title="序言"></a>序言</h1><p>说起来，自从学完了C语言，很久都没有成系统地学完一门编程语言了。</p><p>Python和PHP比较简单，基本都是边用边查学完的；Kotlin则是最近学Android开发顺便学的；C++倒是系统看过一遍书，不过最近基本没咋写过，忘的也差不多了；C#好久之前学的了，也就是写UWP的时候学了一点；JS？好像会，又好像不会（</p><p>快寒假了，也该摸点鱼了。梳理一下：Android学了大半，ML/DL没碰，Unity还在新建文件夹，算法就看了一点点。仔细想了想，还是先学点Java吧，一来下学期要学，二来和Android开发联系也紧密。最重要的是，这次得认真学学面向对象了。虽然在Python和PHP里都在用，但是终归还是系统学习一遍为上。</p><p>我用的是《Java核心技术》卷一/二。很多人在推荐，试读了一下，感觉不错，不像黑皮系列那么难读，废话也比较少。</p><h1 id="Java简介"><a href="https://mxts.jiujiuer.xyz/2022/01/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87/#Java%E7%AE%80%E4%BB%8B" class="headerlink" title="Java简介"></a>Java简介</h1><p>官方白皮书给出了如下关键字：简单性（接近C++）、面向对象（支持多重继承）、分布式、健壮性（优秀的指针模型）、安全性（复杂的安全模型）、体系结构中立（Java虚拟机）、可移植性（众多平台独立的Java库）、<strong>解释型</strong>（轻量的编译过程）、高性能（即时编译器）、多线程、动态性。</p><blockquote><p>虽然关键字里有“解释型”，然而Java是真正的编译型语言。</p></blockquote><p>虽然说Java是纯粹的面向对象语言，不过它并没有做到完全的面向对象：int，double等基本数据类型仍然不是对象。不过同样基于JVM（Java虚拟机）的Kotlin做到了完全的面向对象。</p><h1 id="Java环境配置"><a href="https://mxts.jiujiuer.xyz/2022/01/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87/#Java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE" class="headerlink" title="Java环境配置"></a>Java环境配置</h1><ul><li><p>在Windows下，访问<a href="https://www.oracle.com/java/technologies/downloads/">Oracle官网</a>，下载JDK（Java Development Kit）后安装，并将<code>jdk/bin/</code>目录加入环境变量（详情百度）即可。</p></li><li><p>Linux使用相应的包管理器（apt，yum等）直接安装即可。</p></li></ul><p>安装完成后，可以安装库源文件：找到<code>jdk/lib</code>目录，将<code>src.zip</code>解压到<code>jdk/javasrc/</code>目录下即可。同时也可下载官方文档，在官网上能找到。</p><h1 id="JDK基本使用"><a href="https://mxts.jiujiuer.xyz/2022/01/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87/#JDK%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8" class="headerlink" title="JDK基本使用"></a>JDK基本使用</h1><p>打开记事本（或其他文本编辑器），写入以下内容：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br/><span class="line">    {</span><br/><span class="line">        <span class="type">String</span> <span class="variable">greeting</span> <span class="operator">=</span> <span class="string">&#34;Hello, world!&#34;</span>;</span><br/><span class="line">        System.out.println(greeting);</span><br/><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;greeting.length();i++)</span><br/><span class="line">            System.out.print(<span class="string">&#34;=&#34;</span>);</span><br/><span class="line">        System.out.println();</span><br/><span class="line">    }</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>另存为<code>Hello.java</code>并打开<code>cmd</code>并切换到当前目录。在<code>cmd</code>中输入以下内容以编译并运行：</p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line">javac Hello.java</span><br/><span class="line">java Hello</span><br/></pre></td></tr></tbody></table></figure><p>这是我们的第一个程序。掌握基础操作后，你可以使用你喜欢的IDE进行开发。我偏向使用VSCode（理论上Android Studio应该也可以）。</p><h1 id="Java基本内容"><a href="https://mxts.jiujiuer.xyz/2022/01/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87/#Java%E5%9F%BA%E6%9C%AC%E5%86%85%E5%AE%B9" class="headerlink" title="Java基本内容"></a>Java基本内容</h1><h2 id="程序结构"><a href="https://mxts.jiujiuer.xyz/2022/01/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87/#%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84" class="headerlink" title="程序结构"></a>程序结构</h2><p>Java程序是以类为单位的，类则是一种自定义数据结构（类似于C中的结构体struct）。上面的程序包含了一个public类型的class（类），Hello是这个类的类名，这名称需和文件名同名。和C语言一样，Java也是大小写敏感的。习惯上将类名的每个单词首字母大写。</p><p>这个类中包含了一个main方法（也就是函数），作为这个Java程序的运行起点。这个方法中包含了该程序的所有逻辑，和C非常相似。</p><h2 id="注释"><a href="https://mxts.jiujiuer.xyz/2022/01/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87/#%E6%B3%A8%E9%87%8A" class="headerlink" title="注释"></a>注释</h2><p>Java注释和C/C++基本一样，支持<code>//</code>和<code>/*</code>、<code>*/</code>，同时也支持另一种：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br/><span class="line"><span class="comment">*这是一个注释</span></span><br/><span class="line"><span class="comment">*它可以自动生成文档</span></span><br/><span class="line"><span class="comment">*/</span></span><br/></pre></td></tr></tbody></table></figure><p>后两种都不能嵌套。这和C/C++一致。</p><h2 id="数据类型"><a href="https://mxts.jiujiuer.xyz/2022/01/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87/#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" class="headerlink" title="数据类型"></a>数据类型</h2><p>Java是强类型语言。它共有8种基本数据类型：</p><ul><li>整型：int（4字节）、short（2字节）、long（8字节）、byte（1字节）</li><li>浮点类型：float（4字节）、double（8字节）</li><li>char类型</li><li>boolean（布尔）类型</li></ul><p>这些都是关键字，用于声明对应类型的变量。</p><p>关于整型，和C差不多，有几点要注意：Java没有无符号类型整数。在整数后加L或l表示long类型整数，前缀0X或0x表示16进制整数，前缀0B或0b表示2进制整数，前缀0表示8进制数。为了可读性，还可以用下划线<code>_</code>分割整数：例如<code>0b1111_0100</code>这样的形式都是合法的。</p><p>关于浮点类型，double的使用相较于float更精确。浮点数后缀有两种：F或f表示float类型，而D或d表示double类型。不加后缀默认为double类型。也可以用16进制表示浮点数值：由于0.125=2的-3次幂，故可表示成0x1.0p-3。同时，还有三个特殊的浮点数值：正无穷大，负无穷大，NaN（Not a Number，不是一个数字）。例如0/0的结果就是NaN。可用Double.isNaN()可以检测一个变量是否为数值。另外，浮点数值采用二进制系统表示，因而不能精确表示1/10。此时可以使用BigDecimal类作为替代。</p><p>关于char类型：char原本表示单个字符。不过如今部分Unicode字符需要两个char来表示。和C一样，单引号表示字符，双引号表示字符串，反斜杠表示转义符。另外，可以直接用诸如<code>\u2122</code>而不加引号的方式表示字符，比如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String\u005B\u005D args)</span></span><br/></pre></td></tr></tbody></table></figure><p>也就是说，这种Unicode转义字符会在编译前被处理。因此<strong>使用反斜杠时一定注意</strong>。</p><p>关于boolean类型：C中没有布尔类型，而是使用int类型替代。Java中boolean类型只有true和false两个值。它和整数不能相互转换。这可以预防很多潜在的编程错误（例如<code>if(x=0)</code>在C语言中永远为假）。</p><p>Java的变量声明和C/C++基本一样，都是<code>关键字 变量名</code>的形式。同样可以在声明时对变量进行初始化（例如<code>int a=5</code>）。和C++一样，Java的声明可以在代码中的任何地方。用关键字final可以声明常量，这种变量只能被赋值一次。final就相当于C中的const关键字（const也是Java的关键字，不过Java并没有用它）。常量名一般习惯全部大写。常量也可以声明在main外部，类内部，使用关键字static final即可：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DAY_OF_WEEK</span> <span class="operator">=</span> <span class="number">7</span>;</span><br/><span class="line">    ...</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="运算符"><a href="https://mxts.jiujiuer.xyz/2022/01/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87/#%E8%BF%90%E7%AE%97%E7%AC%A6" class="headerlink" title="运算符"></a>运算符</h2><p>这和C/C++基本一致：<code>+ - * /</code>表示四则运算，<code>%</code>表示<strong>整数求模运算</strong>。对于除法，整数被0除会产生异常，而浮点数被0除则会得到无穷大或者NaN结果。</p><p>Java中有一个很有用的Math库，用来进行各种数学运算，并且还有一些数学常量。</p><ul><li><code>Math.sqrt(x)</code>：返回一个<em>数值</em>的平方根</li><li><code>Math.pow(x,a)</code>：返回x的a次幂。参数x和a以及返回值都是double类型</li><li><code>Math.floorMod(x,a)</code>：返回x对a取余的结果。它的存在是为了修补%运算不能正确处理负数的问题：负数的模显然应该是正数</li><li><code>Math.sin/cos/tan/atan/atan2</code>：常用三角函数</li><li><code>Math.exp/log/log10</code>：指数函数和它的反函数，以及以10为底的对数</li><li><code>Math.PI/E</code>：两个近似表示π和e的常量</li></ul><p>在源文件顶部加上这行代码，就可以省略这些方法/常量的Math.前缀了：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.*;</span><br/></pre></td></tr></tbody></table></figure><p>数据类型转换和强制类型转换，和C/C++基本相同。此外，Java还有<code>Math.round</code>方法，可以对浮点数进行四舍五入：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">9.997</span>;</span><br/><span class="line"><span class="type">int</span> <span class="variable">nx</span> <span class="operator">=</span> (<span class="type">int</span>)Math.round(x);</span><br/></pre></td></tr></tbody></table></figure><p>由于<code>Math.round</code>返回的是long类型，所以需要用<code>(int)</code>显式转换，避免数据丢失。</p><p>和C/C++一样，Java也有<code>+=</code>,<code>-=</code>,<code>*=</code>,<code>/=</code>和<code>%=</code>这几个结合赋值和运算符的运算符。左右数据类型不同时会发生强制类型转换，将运算结果转换成左值的类型。自增，自减运算符和C/C++完全一样，不需要说明。</p><p>Java中的逻辑运算符和C/C++一致，且支持短路特性。Java也支持三目运算符<code>?:</code>。下面的表达式``</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">x&gt;y?x:y;</span><br/></pre></td></tr></tbody></table></figure><p>返回<code>x</code>和<code>y</code>中较大的值。</p><p>位运算符有<code>&amp; | ^ ~</code>四个，分别表示与，或，异或，非。利用位运算我们可以获得一个整数的各个位，也就是掩码技术。另外它的运算对象如果是布尔类型，则返回值也是布尔类型，但这种方式不使用路求值。</p><p><code>&lt;&lt;</code>和<code>&gt;&gt;</code>是移位运算符，用法和C/C++一样：将左值左移/右移右值相应的位数。<code>&gt;&gt;&gt;</code>会用0填充高位，而<code>&gt;&gt;</code>会用符号位填充高位。没有<code>&lt;&lt;&lt;</code>运算符。</p><p>枚举类型包括有限个命名的值，例如</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Size</span>{SMALL, LARGE};</span><br/><span class="line"><span class="type">Size</span> <span class="variable">s</span> <span class="operator">=</span> Size.LARGE;</span><br/></pre></td></tr></tbody></table></figure><h2 id="字符串"><a href="https://mxts.jiujiuer.xyz/2022/01/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87/#%E5%AD%97%E7%AC%A6%E4%B8%B2" class="headerlink" title="字符串"></a>字符串</h2><p>Java字符串就是Unicode字符序列。Java没有内置字符串类型，而是在标准Java类库中提供了一个String预定义类。每个用双引号括起来的字符串都是String类的一个实例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">e</span> <span class="operator">=</span> <span class="string">&#34;&#34;</span>;</span><br/><span class="line"><span class="type">String</span> <span class="variable">greeting</span> <span class="operator">=</span> <span class="string">&#34;hello&#34;</span>;</span><br/></pre></td></tr></tbody></table></figure><ul><li><code>substring</code>方法可以从一个较大的字符串提取出一个子串：</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">greeting</span> <span class="operator">=</span> <span class="string">&#34;hello&#34;</span>;</span><br/><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> greeting.substring(<span class="number">0</span>,<span class="number">3</span>);</span><br/></pre></td></tr></tbody></table></figure><p><code>s</code>是一个由”hel”组成的字符串。这方法表示从第0个字符开始，复制到第三个（不包括）为止。</p><ul><li><code>+</code>用来连接字符串。非字符串值被应用于这个操作符时，会被转换成字符串类型。<strong>任何一个Java对象都可以转换成字符串。</strong>如果需要用定界符分隔并连接，只需要用<code>String.join</code>静态方法：</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.join(<span class="string">&#34;,&#34;</span>,<span class="string">&#34;a&#34;</span>,<span class="string">&#34;b&#34;</span>,<span class="string">&#34;c&#34;</span>);</span><br/></pre></td></tr></tbody></table></figure><p>上面的<code>s</code>为<code>a,b,c</code>。</p><p>Java的String类对象被称为<strong>不可变字符串</strong>，也就是说一旦创建String对象，就不能对其进行修改。</p><p>利用<code>String.equals</code>方法检测两个字符串是否相等。例如<code>s.equals(t)</code>，返回<code>s</code>和<code>t</code>的比较结果。这里的<code>s</code>和<code>t</code>可以是字符串实例，也可以是字符串字面量。</p><p><code>char</code>类型在Java中并不是很常用，因为现在很多字符需要两个char类型存储单元才能表示。因此尽量不要用<code>char</code>类型。</p><p>下面是常用的String类的方法：</p><ul><li><code>boolean equals(Object other)</code> 字符串比较</li><li><code>boolean equalsIgnoreCase(String other)</code>  字符串比较，忽略大小写</li><li><code>boolean startsWith(String str)</code> 判断字符串是否以<code>str</code>开头</li><li><code>boolean endsWith(String str)</code> 判断字符串是否以<code>str</code>结束</li><li><code>int length()</code> 返回字符串的长度</li><li><code>String substring(int begin)</code></li><li><code>String substring(int begin, int end)</code></li><li><code>String toLowerCase()</code></li><li><code>String toUpperCase()</code></li><li><code>String trim()</code> 返回删除左右空格的字符串</li><li><code>String join(CharSequence delimiter, CharSequence... elements)</code> 就是上面的<code>String.join</code>方法</li></ul><p>构建字符串时，可以用<code>StringBuilder</code>类避免每次都新建一个String对象，节省空间：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br/><span class="line">sb.append(ch);　　<span class="comment">//添加一个字符ch</span></span><br/><span class="line">sb.append(str);　　<span class="comment">//添加一个字符串str</span></span><br/><span class="line"><span class="type">String</span> <span class="variable">completedString</span> <span class="operator">=</span> sb.toString();　　<span class="comment">//完成后的字符串</span></span><br/></pre></td></tr></tbody></table></figure><p>下面是<code>StringBuilder</code>类的方法：</p><ul><li><code>StringBuilder()</code> 构造器</li><li><code>int length()</code></li><li><code>StringBuilder append(String str/char c)</code> 追加字符串/字符并返回<code>this</code></li><li><code>StringBuilder insert(String str/char c)</code> 插入字符并返回<code>this</code></li><li><code>StringBuilder delete(int start, int end)</code> 删除<code>start</code>到<code>end</code>（不包括end）的代码单元并返回<code>this</code></li><li><code>String toString()</code> 返回一个内容相同的字符串</li></ul><h2 id="输入输出"><a href="https://mxts.jiujiuer.xyz/2022/01/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87/#%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA" class="headerlink" title="输入输出"></a>输入输出</h2><p>输入基于<code>Scanner</code>类。首先得声明Scanner对象，并与标准输入流System.in关联：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br/></pre></td></tr></tbody></table></figure><p>随后就可以使用<code>Scanner</code>类的各种方法实现输入操作了。比如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line">System.out.print(<span class="string">&#34;input your name:&#34;</span>);</span><br/><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> in.nextLine();</span><br/></pre></td></tr></tbody></table></figure><p>要使用<code>Scanner</code>类，需要在<strong>源码开头</strong>导入<code>java.util.*</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br/></pre></td></tr></tbody></table></figure><p>下面是Scanner类的方法：</p><ul><li><code>Scanner(InputStream in)</code> 用给定的输入流创建一个Scanner对象</li><li><code>String nextLine()</code> 读取下一行输入的内容</li><li><code>int nextInt()</code> 读取下一个整数</li><li><code>int nextDouble()</code> 读取下一个整数或浮点数</li><li><code>boolean hasNex()</code> 检测输入中是否还有其他单词</li><li><code>boolean hasNextInt()</code></li><li><code>boolean hasNextDouble()</code></li></ul><p>用Scanner类进行格式化输出非常简单。使用<code>System.out.print()</code>方法可以直接输出<code>x</code>，用<code>System.out.printf()</code>可以格式化输出字符串。它的用法和C中的<code>printf()</code>完全一致。同时还新增了一些标志。详见<em>用于printf的标志</em>。同时，printf支持输出格式化日期与时间，但它已经被废弃（Deprecated），应当使用<code>java.time</code>包的方法。</p><p>此外，也可以使用<code>String.format()</code>静态方法创建一个 格式化的字符串而不输出：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> String.format(<span class="string">&#34;Hllo, %s. Next year, you&#39;ll be %d&#34;</span>, name, age);</span><br/></pre></td></tr></tbody></table></figure><p>Scanner类也支持文件输入输出：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(Paths.get(<span class="string">&#34;myfile.exe&#34;</span>), <span class="string">&#34;UTF-8&#34;</span>);</span><br/></pre></td></tr></tbody></table></figure><p>文件名中包含反斜杠的话，则需要再多添加一个反斜杠转义。另外，其中的<code>UTF-8</code>可省略，缺省值为运行  该程序的机器的默认编码。不过为了兼容性尽量不要这么做。还有，路径支持相对路径，不过位置是相对于Java虚拟机的启动路径而言的：即命令解释器的当前路径。也可以用下面的方式得到路径位置：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> System.getProperty(<span class="string">&#34;user.dir&#34;</span>);</span><br/></pre></td></tr></tbody></table></figure><h2 id="流程控制"><a href="https://mxts.jiujiuer.xyz/2022/01/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87/#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6" class="headerlink" title="流程控制"></a>流程控制</h2><p>Java中也有块（block）的概念。大多数内容都和C一致，除了嵌套的块中不能声明重名变量。下面说一下流程控制语句：</p><ul><li><code>if-else if-else</code> 和C一样</li><li><code>while/do-while</code> 和C一样</li><li><code>for</code> 和C一样。不过添加了一种for each循环</li><li><code>switch</code> 和C一样。不过从Java SE 7 开始，case标签可以是字符串字面量</li><li><code>break</code> 后面可以带标签，用法和C中的goto一样。不过只能跳出语句块而不能跳入</li><li><code>continue</code> 和C一样</li></ul><h2 id="大数值"><a href="https://mxts.jiujiuer.xyz/2022/01/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87/#%E5%A4%A7%E6%95%B0%E5%80%BC" class="headerlink" title="大数值"></a>大数值</h2><p>java.math包中有BigInterger和BigDecimal两个类，分别表示任意精度的整数和浮点数。使用静态方法valueOf()将普通数值转换成大数值：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">BigInterger</span> <span class="variable">a</span> <span class="operator">=</span> BigInterger.valueOf(<span class="number">100</span>);</span><br/></pre></td></tr></tbody></table></figure><p>然而因为Java没有提供运算符重载，所以不能用<code>+-*/</code>来进行大数的四则运算，只能使用它们的<code>add subtract mulyiply divide mod compareTo</code>方法进行加减乘除以及求模、比较运算。</p><h2 id="数组"><a href="https://mxts.jiujiuer.xyz/2022/01/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%AF%87/#%E6%95%B0%E7%BB%84" class="headerlink" title="数组"></a>数组</h2><p>和C差不多。不过<code>[]</code>得写在数据类型后而非变量名后：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a;</span><br/><span class="line">a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br/><span class="line"><span class="type">int</span>[] b = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>}</span><br/><span class="line">a = {<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>}</span><br/><span class="line"><span class="type">int</span>[] d = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>]; <span class="comment">//允许数组长度为0</span></span><br/></pre></td></tr></tbody></table></figure><p>可以用<code>a.length</code>获取数组a的长度，其余的用法和C无异：数组长度也是不可变的。如果需要长度可变则应该考虑使用<code>array list</code>。</p><p>数组除了可以用for循环遍历，也可以用for each循环遍历：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(value : collection) statement</span><br/><span class="line"><span class="comment">//例如，对于int数组a而言：</span></span><br/><span class="line"><span class="keyword">for</span>(<span class="type">int</span> num: a){</span><br/><span class="line">    System.out.println(num);</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>不过，打印数组还可以用<code>System.out.println(Arrays.toString(a));</code>来完成。</p><p>和上面类似，用<code>Arrays.copyOf(array, length)</code>可以复制数组。</p><p>现在可以说说main()函数的参数<code>String[] args</code>了。这是一个参数数组，和C的argv参数基本一样。不过这里的args[0]指示的不是程序名，而是第一个参数。</p><p>使用Arrays.sort(a)可以对数组进行排序。Arrays还有很多方法：</p><ul><li><code>Arrays.binarySearch(type[] a, type v)</code> 二分搜索值v，返回下标或负数值（若为未查找到）</li><li><code>Arrays.fill(typr[] a, type v)</code> 用v填充数组</li><li><code>Arrays.equals(type[] a, type[] b)</code> 数组比较，长度和对应位置的值都相等则返回true</li></ul><p>多位数组使用这样的方式声明：<code>int[][] a = new int[100][100];</code> 赋值和迭代等都和C差不多，按照java中一维数组的情况类推即可。</p><hr/><p>好了，这些就是Java的基本内容了。下一节是关于Java的面向对象体系的介绍。</p></body></html>