<html><head></head><body><h2 id="序言"><a href="https://xeonds.github.io/2021/09/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/%E7%94%A8Python%E5%86%99%E4%B8%80%E4%B8%AA%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%99%A8/#%E5%BA%8F%E8%A8%80" class="headerlink" title="序言"></a>序言</h2><blockquote><p>你知道52的7次方有多大吗？我算过，如果存储这么多个7位密码，大概需要13TiB的存储空间。</p></blockquote><p>这就是我写了两个版本字典生成方法的原因：如果真的要全部生成完再去跑字典，那几乎是不可能的事。</p><h2 id="算法1：for循环递归"><a href="https://xeonds.github.io/2021/09/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/%E7%94%A8Python%E5%86%99%E4%B8%80%E4%B8%AA%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%99%A8/#%E7%AE%97%E6%B3%951%EF%BC%9Afor%E5%BE%AA%E7%8E%AF%E9%80%92%E5%BD%92" class="headerlink" title="算法1：for循环递归"></a>算法1：for循环递归</h2><p>这是一个相当简单粗暴的算法。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gen_with_for</span>(<span class="params">length, letters, result = <span class="string">&#39;&#39;</span></span>):</span><br/><span class="line">       length = <span class="built_in">int</span>(length)</span><br/><span class="line">       letters = <span class="built_in">str</span>(letters)</span><br/><span class="line">       <span class="keyword">if</span> length == <span class="number">1</span>:</span><br/><span class="line">           ls = []</span><br/><span class="line">          <span class="keyword">for</span> i <span class="keyword">in</span> letters:</span><br/><span class="line">              ls.append(result+i)</span><br/><span class="line">          <span class="keyword">return</span> ls</span><br/><span class="line">      <span class="keyword">else</span>:</span><br/><span class="line">          ls = []</span><br/><span class="line">          <span class="keyword">for</span> i <span class="keyword">in</span> letters:</span><br/><span class="line">              ls += gen_with_for(length-<span class="number">1</span>,letters,result+i)</span><br/><span class="line">          <span class="keyword">return</span> ls</span><br/></pre></td></tr></tbody></table></figure><p>这个算法优点就是简单。只需要知道密码长度，密码包含的所有字符就可以穷举出所有组合。</p><p>不过缺点也很明显。随着循环层数的增加，最内层循环次数指数级增加。如果密码稍长一点，电脑内存可能就炸了。</p><h2 id="算法2：进制转换"><a href="https://xeonds.github.io/2021/09/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/%E7%94%A8Python%E5%86%99%E4%B8%80%E4%B8%AA%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%99%A8/#%E7%AE%97%E6%B3%952%EF%BC%9A%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2" class="headerlink" title="算法2：进制转换"></a>算法2：进制转换</h2><p>穷举密码的本质，其实也就是将对应的十进制数转换成用一些符号表达的p进制数。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gen_with_convert</span>(<span class="params">number, letters</span>):</span><br/><span class="line">    length = <span class="built_in">len</span>(letters)</span><br/><span class="line">    result = <span class="string">&#39;&#39;</span></span><br/><span class="line">    <span class="keyword">while</span> number:</span><br/><span class="line">        number, rest = <span class="built_in">divmod</span>(number-<span class="number">1</span>, length)</span><br/><span class="line">        result = letters[rest] + result</span><br/><span class="line">    <span class="keyword">return</span> result</span><br/></pre></td></tr></tbody></table></figure><p>相比前一个算法，这个算法虽然慢一些，但是内存占用不会像前一个那么嚣张（</p><p>不过，我要生成所有7位含52个符号的密码，需要从第几个密码开始生成呢？</p><p>我也不知道。所以，我又写了这个函数。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">loop_time_calc</span>(<span class="params">length, l_length</span>):</span><br/><span class="line">    <span class="keyword">if</span> length == <span class="number">0</span>:</span><br/><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br/><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(l_length, length) + loop_time_calc(length -<span class="number">1</span>, l_length)</span><br/></pre></td></tr></tbody></table></figure><p>这样，就大大简化了调用过程。同时因为密码是逐个返回的，所以完全可以把它和破解指令丢在同一个for里，破解和生成同步进行，可以减少破解耗时。</p><p>完整版是这样：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br/><span class="line"><span class="keyword">import</span> optparse</span><br/><span class="line"></span><br/><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>(<span class="params">number, letters</span>):</span><br/><span class="line">    length = <span class="built_in">len</span>(letters)</span><br/><span class="line">    result = <span class="string">&#39;&#39;</span></span><br/><span class="line">    <span class="keyword">while</span> number:</span><br/><span class="line">        number, rest = <span class="built_in">divmod</span>(number-<span class="number">1</span>, length)</span><br/><span class="line">        result = letters[rest] + result</span><br/><span class="line">    <span class="keyword">return</span> result</span><br/><span class="line"></span><br/><span class="line"><span class="keyword">def</span> <span class="title function_">loop_time_calc</span>(<span class="params">length, l_length</span>):</span><br/><span class="line">    <span class="keyword">if</span> length == <span class="number">0</span>:</span><br/><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br/><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(l_length, length) + loop_time_calc(length -<span class="number">1</span>, l_length)</span><br/><span class="line"></span><br/><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br/><span class="line">    parse = optparse.OptionParser(<span class="string">&#34;Param: -l &lt;Length&gt; -c &lt;Characters&gt;&#34;</span>)</span><br/><span class="line">    parse.add_option(<span class="string">&#34;-l&#34;</span>, dest=<span class="string">&#34;length&#34;</span>, <span class="built_in">help</span>=<span class="string">&#34;get password length&#34;</span>)</span><br/><span class="line">    parse.add_option(<span class="string">&#34;-c&#34;</span>, dest=<span class="string">&#34;characters&#34;</span>, <span class="built_in">help</span>=<span class="string">&#34;get characters in password&#34;</span>)</span><br/><span class="line">    (options, args) = parse.parse_args()</span><br/><span class="line">    <span class="keyword">if</span> (options.length == <span class="literal">None</span>) | (options.characters == <span class="literal">None</span>):</span><br/><span class="line">        <span class="built_in">print</span>(parse.usage)</span><br/><span class="line">    <span class="keyword">else</span>:</span><br/><span class="line">        length = options.length</span><br/><span class="line">        characters = options.characters</span><br/><span class="line">        _s, _e = loop_time_calc(<span class="built_in">int</span>(length)-<span class="number">1</span>,<span class="built_in">len</span>(characters)), loop_time_calc(<span class="built_in">int</span>(length),<span class="built_in">len</span>(characters))</span><br/><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(_s, _e):</span><br/><span class="line">            <span class="built_in">print</span>(gen(i, characters))</span><br/><span class="line"></span><br/><span class="line">main()</span><br/></pre></td></tr></tbody></table></figure><p>调用格式：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">root@xeonds:~<span class="comment"># ./pass_gen.py -l 4 -c 0123456789 &gt; pass.txt</span></span><br/></pre></td></tr></tbody></table></figure><p>上面的指令生成所有四位纯数字密码。</p><blockquote><p>所以说纯数字密码不安全嘛.jpg（</p></blockquote><h2 id="小结"><a href="https://xeonds.github.io/2021/09/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/%E7%94%A8Python%E5%86%99%E4%B8%80%E4%B8%AA%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%99%A8/#%E5%B0%8F%E7%BB%93" class="headerlink" title="小结"></a>小结</h2><p>用[[Python|Python]]做这种东西很方便。不过在解密压缩包上，已经有很好用的HashCat了。</p><p>就算法方面来说，说到底，还是要数学好嘛（摊）。进制转换好像小学奥数就有讲？无所谓，反正我已经忘了（逃</p></body></html>