<html><head></head><body><h1 id="对C语言scanf函数机制的浅探究"><a href="https://xeonds.github.io/2022/03/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/%E5%AF%B9C%E8%AF%AD%E8%A8%80scanf%E5%87%BD%E6%95%B0%E6%9C%BA%E5%88%B6%E7%9A%84%E6%B5%85%E6%8E%A2%E7%A9%B6/#%E5%AF%B9C%E8%AF%AD%E8%A8%80scanf%E5%87%BD%E6%95%B0%E6%9C%BA%E5%88%B6%E7%9A%84%E6%B5%85%E6%8E%A2%E7%A9%B6" class="headerlink" title="对C语言scanf函数机制的浅探究"></a>对C语言scanf函数机制的浅探究</h1><p>在使用C语言写程序的时候，往往会使用到<code>scanf()</code>函数，然而如果对这个函数的机制不太清楚，不正确的输入下，产生的结果难以估计。于是通过实验，总结了一下<code>scanf()</code>函数的机制。</p><hr/><h2 id="格式化字符串匹配失败会直接退出函数运行"><a href="https://xeonds.github.io/2022/03/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/%E5%AF%B9C%E8%AF%AD%E8%A8%80scanf%E5%87%BD%E6%95%B0%E6%9C%BA%E5%88%B6%E7%9A%84%E6%B5%85%E6%8E%A2%E7%A9%B6/#%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E5%A4%B1%E8%B4%A5%E4%BC%9A%E7%9B%B4%E6%8E%A5%E9%80%80%E5%87%BA%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C" class="headerlink" title="格式化字符串匹配失败会直接退出函数运行"></a>格式化字符串匹配失败会直接退出函数运行</h2><hr/><pre><code>int a=4;scanf(&#34;x%d&#34;, &amp;a);printf(&#34;%d&#34;, a);</code></pre><p>如果此时输入了<code>a89</code>，格式化字符串匹配失败，将直接退出函数。<code>变量a</code>的值没有被改变。</p><pre><code>int a=4;scanf(&#34;%d&#34;, &amp;a);printf(&#34;%d&#34;, a);</code></pre><p>如果此时输入了字母<code>a</code>，格式化字符串匹配失败，也将直接退出函数。<code>变量a</code>的值也没有被改变。所以这两段代码的输出都是</p><pre><code>4</code></pre><hr/><h2 id="输入缓存区"><a href="https://xeonds.github.io/2022/03/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/%E5%AF%B9C%E8%AF%AD%E8%A8%80scanf%E5%87%BD%E6%95%B0%E6%9C%BA%E5%88%B6%E7%9A%84%E6%B5%85%E6%8E%A2%E7%A9%B6/#%E8%BE%93%E5%85%A5%E7%BC%93%E5%AD%98%E5%8C%BA" class="headerlink" title="输入缓存区"></a>输入缓存区</h2><hr/><p>C语言有输入缓存区，scanf会优先从缓存区读取数据来匹配格式化字符串，输入缓存区为空的话才会向用户请求输入。</p><blockquote><p>注意是为空才请求输入，而不是匹配不成功请求输入</p></blockquote><pre><code>char a;int b=1;scanf(&#34;%c&#34;,&amp;a);scanf(&#34;%d&#34;,&amp;b);printf(&#34;输出:%d&#34;,b);</code></pre><p>例如这串代码，如果第一次请求输入时输入了 <code>ab</code> ，此时字符 ‘a’ 被存入<code>变量a</code>，输入缓存区还剩下 <code>[ &#39;b&#39; , &#39;\n&#39; ]</code> ，所以第二个<code>scanf</code>函数不会再请求用户输入，而是直接去缓存区匹配，而这次匹配不成功，所以<code>变量b</code>的值没有被改变过。这段代码的输出为</p><pre><code>输出:1</code></pre><blockquote><p>使用占位符<code>%d</code>时情况不太一样</p></blockquote><pre><code>scanf(&#34;%d&#34;);</code></pre><p>我们在使用<code>%d</code>接受数字输入时，发现一种情况，即使直接输入回车，也不会匹配不成功，而是一直等待用户输入，直到输入含有<strong>空格</strong>、<strong>回车</strong>之外的字符传入。</p><p>为什么呢？考虑这种情况：<code>scanf(&#34;%d%d&#34;, &amp;a, &amp;b)</code>，用户会在输入第二个数字前先打上空格或者回车，所以设计了这种情况。</p><p>就是说，C语言按<code>%d</code>接受输入时，会把匹配到数字之前匹配到的空格和回车看作分隔符拿出缓存区扔掉，不作匹配使用，继续请求用户输入。</p><p>再看刚才的代码，分析一下。如果输入<code>a</code>，此时字符 ‘a’ 被存入<code>变量a</code>，输入缓存区还剩下 <code>[ &#39;\n&#39; ]</code> ，所以这种情况下，即使缓存区还有一个字符，可因为它是换行符，按<code>%d</code>输入时依旧会把它看作分隔符，此时还是会向用户请求输入。</p><hr/><h2 id="格式化字符串的匹配机制–-gt-逐字符匹配"><a href="https://xeonds.github.io/2022/03/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/%E5%AF%B9C%E8%AF%AD%E8%A8%80scanf%E5%87%BD%E6%95%B0%E6%9C%BA%E5%88%B6%E7%9A%84%E6%B5%85%E6%8E%A2%E7%A9%B6/#%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%8C%B9%E9%85%8D%E6%9C%BA%E5%88%B6%E2%80%93-gt-%E9%80%90%E5%AD%97%E7%AC%A6%E5%8C%B9%E9%85%8D" class="headerlink" title="格式化字符串的匹配机制–&gt; 逐字符匹配"></a>格式化字符串的匹配机制–&gt; <strong>逐字符匹配</strong></h2><hr/><p>如果我们想要以a-b的形式输入系数-指数以此存储一个多项式，a-b之间以英文逗号分隔，我们会怎么写呢？</p><pre><code>int c, e;do{    scanf(&#34;%d-%d&#34;, &amp;c, &amp;e);    /* 省略存储过程 */} while (getchar()==&#39;,&#39;);</code></pre><p>这么写非常好，但是如果用户没有按给定格式输入时，会发生什么错误我们得心里有数。</p><p>比如我输入是：<code>3,4-3,5-,a-5</code> ，发生了什么呢？</p><p>这时候C语言就会采取逐字符匹配的原则来工作。PS：每两次执行之间都会被<code>getchar()</code>函数从缓存区拿走一个 ‘,’ 。</p><table><thead><tr><th align="center">缓存区</th><th align="center">执行顺序</th><th align="center">匹配值</th><th align="center">退出原因</th><th align="center">执行操作</th></tr></thead><tbody><tr><td align="center"><code>3,4-3,5-,a-5\n</code></td><td align="center">1</td><td align="center">3</td><td align="center">‘-‘ 与 ‘,’ 不匹配</td><td align="center">c=3</td></tr><tr><td align="center"><code>4-3,5-,a-5\n</code></td><td align="center">2</td><td align="center">4-3</td><td align="center">格式化字符串匹配结束</td><td align="center">c=4,e=3</td></tr><tr><td align="center"><code>5-,a-5\n</code></td><td align="center">3</td><td align="center">5-</td><td align="center">‘,’ 与<code>%d</code>不匹配</td><td align="center">c=5</td></tr><tr><td align="center"><code>a-5\n</code></td><td align="center">4</td><td align="center"></td><td align="center">‘a’ 与<code>%d</code>不匹配</td><td align="center"></td></tr></tbody></table><p>这么看来，即使没有完全匹配到规定的字符串，<code>sacnf</code>函数也会将现有匹配到的先作使用，即使后面匹配失败，前面匹配成功的部分依然有效。</p><p>结合前面，我们还可以知道如果输入的是 <code>3,  4- 3, 5-, a-5</code> （中间多了空格），因为匹配 <code>%d</code> 时会忽略空格回车的机制，即使逗号后面加了空格，和原输入也还是等价的。这么做还是有一些小缺陷，因为输入时即使按照要求，也可能因为习惯，在逗号前加了空格，我们可以这么处理。</p><pre><code>int c, e;char m;do{    scanf(&#34;%d-%d&#34;, &amp;c, &amp;e);    /* 省略存储过程 */    do{ m = getchar(); }while(m==&#39; &#39;);} while (m==&#39;,&#39;);</code></pre><p>这样处理的代码，即使在分隔符前后都加上空格，我们也能确保它正确处理，代码变得友好了很多。至于其他情况嘛……有精力的话也可以再设计一下，我是不想设计了hhhh，毕竟已经满足以a-b的形式输入系数-指数,以英文逗号分隔的要求了~（不听话的用户活该得不到正确结果！hhhh开玩笑）</p><hr/><h2 id="其他占位符"><a href="https://xeonds.github.io/2022/03/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/%E5%AF%B9C%E8%AF%AD%E8%A8%80scanf%E5%87%BD%E6%95%B0%E6%9C%BA%E5%88%B6%E7%9A%84%E6%B5%85%E6%8E%A2%E7%A9%B6/#%E5%85%B6%E4%BB%96%E5%8D%A0%E4%BD%8D%E7%AC%A6" class="headerlink" title="其他占位符"></a>其他占位符</h2><hr/><p>其他占位符也有类似的情况，在此不再赘述，想要研究的小伙伴可以自行研究一下！</p></body></html>