<html><head></head><body><h2 id="Chap-19-逻辑寻址"><a href="https://xeonds.github.io/2023/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E7%BD%91%E7%BB%9C%E5%B1%82/#Chap-19-%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80" class="headerlink" title="Chap.19.逻辑寻址"></a>Chap.19.逻辑寻址</h2><p>逻辑层通信的实现基础。TCP/IP实现了这个全球寻址方案。IP地址分为IPV4和IPV6两种，后者是前者的升级版本，目前前者在主要使用。</p><p>IPV4地址有$2^{32}$个，因为它的长度是32位，也就是四个字节。下面主要讨论的是IPV4。</p><h3 id="IPV4地址"><a href="https://xeonds.github.io/2023/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E7%BD%91%E7%BB%9C%E5%B1%82/#IPV4%E5%9C%B0%E5%9D%80" class="headerlink" title="IPV4地址"></a>IPV4地址</h3><ul><li>32位长</li><li>唯一且通用</li><li>地址空间是$2^{32}$</li><li>标记法有二进制标记法，和十进制点分标记法（常用每位范围从0-255）</li></ul><h4 id="分类寻址"><a href="https://xeonds.github.io/2023/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E7%BD%91%E7%BB%9C%E5%B1%82/#%E5%88%86%E7%B1%BB%E5%AF%BB%E5%9D%80" class="headerlink" title="分类寻址"></a>分类寻址</h4><p>这种方法将地址空间分为ABCDE这5类。ip地址开头4位就能确定地址的类。</p><table><thead><tr><th align="left">前4位</th><th>第一个字节</th></tr></thead><tbody><tr><td align="left">0000</td><td>0-127</td></tr><tr><td align="left">1000</td><td>128-191</td></tr><tr><td align="left">1100</td><td>192-223</td></tr><tr><td align="left">1110</td><td>224-239</td></tr><tr><td align="left">1111</td><td>240-255</td></tr></tbody></table><h2 id="Chap-23-UDP、TCP和SCTP"><a href="https://xeonds.github.io/2023/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E7%BD%91%E7%BB%9C%E5%B1%82/#Chap-23-UDP%E3%80%81TCP%E5%92%8CSCTP" class="headerlink" title="Chap.23.UDP、TCP和SCTP"></a>Chap.23.UDP、TCP和SCTP</h2><p>这三个是传输层的协议。UDP较为简单，其次是复杂的TCP协议。最后的SCTP仅了解。</p><h3 id="进程到进程的传递"><a href="https://xeonds.github.io/2023/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E7%BD%91%E7%BB%9C%E5%B1%82/#%E8%BF%9B%E7%A8%8B%E5%88%B0%E8%BF%9B%E7%A8%8B%E7%9A%84%E4%BC%A0%E9%80%92" class="headerlink" title="进程到进程的传递"></a>进程到进程的传递</h3><p>传输层负责的是进程到进程的传递。</p><h4 id="客户-x2F-服务器模式"><a href="https://xeonds.github.io/2023/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E7%BD%91%E7%BB%9C%E5%B1%82/#%E5%AE%A2%E6%88%B7-x2F-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A8%A1%E5%BC%8F" class="headerlink" title="客户/服务器模式"></a>客户/服务器模式</h4><p>在web2最常用的就是C/S模式。为了传输时的标识，需要确定本地/远程的主机和进程。</p><ol><li><p>寻址：传输层需要端口号来标识进程ID，服务器和客户端都是如此。不过前者规定比较严格，后者可以随机选择一个。这一般是由IANA统一管理的。</p></li><li><p>套接字地址：将IP和端口号结合起来就得到了套接字地址（socket address）。传输层协议需要客户套接字地址和服务器套接字地址。这四条信息是IP头部和传输层协议头部的组成部分。IP头包含IP地址，UDP/TCP头包含端口号。</p></li></ol><h4 id="复用-x2F-分离"><a href="https://xeonds.github.io/2023/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E7%BD%91%E7%BB%9C%E5%B1%82/#%E5%A4%8D%E7%94%A8-x2F-%E5%88%86%E7%A6%BB" class="headerlink" title="复用/分离"></a>复用/分离</h4><p>寻址机制可以通过传输层进行复用和分离。也就是，同时刻选择一个待发送的分组进行发送（复用），同时刻选择一个待接受的进程分发分组。</p><h4 id="无连接-x2F-面向连接服务"><a href="https://xeonds.github.io/2023/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E7%BD%91%E7%BB%9C%E5%B1%82/#%E6%97%A0%E8%BF%9E%E6%8E%A5-x2F-%E9%9D%A2%E5%90%91%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1" class="headerlink" title="无连接/面向连接服务"></a>无连接/面向连接服务</h4><p>前者对应UDP，分组从一方发送给另一方，不需要建立/释放连接，分组无编号。它们没有确认过程，可能被延迟、丢失、无序到达</p><ul><li>例题：最大窗口64kB，报文的段平均往返时间是20ms，则最大吞吐量是？</li></ul><p>$64\times1024\times8(bit)\div(20\times10^3)s=26.21Mbit/s$</p><ul><li>例题：TCP的MSS是128B，报文的序号长度是8位，报文段在网络的生存时间是30s，计算TCP链接能达到的最大速率。</li></ul><p>30s内不能有重复序号，因此30s最多有$2^8=256$个段。因此结果是$1024bits\times256segments\div30s=8738bit/s$</p><h2 id="Chap-24-拥塞控制"><a href="https://xeonds.github.io/2023/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E7%BD%91%E7%BB%9C%E5%B1%82/#Chap-24-%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6" class="headerlink" title="Chap.24.拥塞控制"></a>Chap.24.拥塞控制</h2><p>它和服务质量是正相关的。</p><h3 id="拥塞控制"><a href="https://xeonds.github.io/2023/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E7%BD%91%E7%BB%9C%E5%B1%82/#%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><p>思想是，利用窗口控制拥塞。窗口有两个，接受/发送窗口</p><p>策略有如下几个：</p><ol><li>慢启动：先以一个MSS（Maximum Segment Size）慢速启动，如果重传之前收到一个确认，则指数（1,2,4,8,…）增加发送速度，直到收到的确认消息数和发送速率不匹配为止.</li><li>加性增加：和上面类似，不过增长速率是线性增长（1,2,3,…）。同时，如果计时器超时（严重拥塞），则作出强烈反应：设置阈值为当前拥塞状态的一半、设置cwnd为1个段的大小、进入慢启动阶段。如果接受到三个连续的ACK，则说明轻度拥塞，一个段可能丢失，其他段可能到达。这时，称为快速重传/快速恢复：设置阈值为拥塞窗口的一半、设置阈值为cwnd一半、进入拥塞避免状态。</li></ol><p>一般，拥塞控制综合这两种启动方式。开始时慢启动，之后达到一个阈值后开始加性增加，并按照丢包严重程度来重新确定阈值。阈值的确定是<strong>取下一次计算得的发送速率和接受到对面ACK时得到的对方缓存空间的最小值</strong>。</p><h3 id="4-SCTP-流控传输协议（Stream-Control-Transmission-Protocol）"><a href="https://xeonds.github.io/2023/05/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E7%BD%91%E7%BB%9C%E5%B1%82/#4-SCTP-%E6%B5%81%E6%8E%A7%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE%EF%BC%88Stream-Control-Transmission-Protocol%EF%BC%89" class="headerlink" title="4.SCTP-流控传输协议（Stream Control Transmission Protocol）"></a>4.SCTP-流控传输协议（Stream Control Transmission Protocol）</h3><p>它允许每个端口有多个IP地址。协议构成方面，了解即可。</p></body></html>