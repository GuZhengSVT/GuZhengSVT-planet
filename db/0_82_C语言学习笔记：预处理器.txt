<html><head></head><body><h2 id="预定义符号"><a href="https://mxts.jiujiuer.xyz/2021/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/#%E9%A2%84%E5%AE%9A%E4%B9%89%E7%AC%A6%E5%8F%B7" class="headerlink" title="预定义符号"></a>预定义符号</h2><p>预处理器定义了一些符号，它们的值是一些常量。</p><p>|:—:|:—:|<br/>|符号|含义|<br/>|<code>_FILE_</code>|进行编译的源文件名|<br/>|<code>_LINE_</code>|文件当前行的行号|<br/>|<code>_DATE_</code>|文件被编译的日期（年月日）|<br/>|<code>_TIME_</code>|文件被编译的时间（时分秒）|<br/>|<code>_STDC_</code>|如果编译器支持ANSI C，它就是1，否则未定义|</p><h2 id="define"><a href="https://mxts.jiujiuer.xyz/2021/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/#define" class="headerlink" title="define"></a>define</h2><p>首先，这是它的正式定义：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> name stuff</span></span><br/></pre></td></tr></tbody></table></figure><p>这样，每当有<code>name</code>出现在<strong>这一行的后面</strong>时，预处理器就会把它替换成<code>stuff</code>。</p><h2 id="宏"><a href="https://mxts.jiujiuer.xyz/2021/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/#%E5%AE%8F" class="headerlink" title="宏"></a>宏</h2><p><code>#define</code>提供了一个机制：可以将参数替换到文本中去。<strong>这种实现被称作宏</strong>。下面是它的声明方式：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> name(parameter-list) stuff</span></span><br/></pre></td></tr></tbody></table></figure><p>parameter-list，也就是参数列表，是一个由逗号分隔，每一项都可能出现在stuff中的列表。此处的括号必须与name紧邻。下面是一个实例：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SQUARE(x) x * x</span></span><br/></pre></td></tr></tbody></table></figure><p>如果把<code>SQUARE(5)</code>放在随后的代码中，预处理器就会把它替换成<code>5 * 5</code>。但是，如果是<code>SQUARE(5+1)</code>呢？很显然是<code>5+1 * 5+1</code>，不是我们预期的结果。要修复这个问题，就把宏改成这样：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SQUARE(x) (x)*(x)</span></span><br/></pre></td></tr></tbody></table></figure><p>那如果宏定义中间的符号是加号而非乘号呢？结果也非预期。我们又要改一改了：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ADD(x) ((x)+(x))</span></span><br/></pre></td></tr></tbody></table></figure><p>这样就安全了吗？并不。如果<code>x</code>是某种值会改变的表达式（例如<code>x=getchar()</code>，或者设想你写了一个用来比较大小的宏<code>MAX(a,b)</code>，然后如此调用：<code>MAX(b++,c++)</code>），那么替换后，两个<code>x</code>的值也不会相等。也就是说，<strong>作为宏参数的表达式会被多次求值</strong>。</p><p>那么为什么要使用宏呢？有三点原因：宏可以做到函数做不到的事；并且，宏的执行效率要高于函数。</p><ul><li><p><strong>宏比函数的效率高</strong>：因为调用函数时，需要为函数分配栈空间等，所以多少会有时间损耗。在某些场景下更是明显。宏唯一的开销是编译时的时间变长，程序体积变大。</p></li><li><p><strong>宏能做到更多</strong>：例如这个：</p></li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MALLOC(n, type) \</span></span><br/><span class="line"><span class="meta">                       ((type*)malloc((n)*sizeof(type)))</span></span><br/></pre></td></tr></tbody></table></figure><p>类型是无法作为函数参数进行传递的。</p><ul><li><strong>宏与类型无关</strong>：例如这个宏：</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></span><br/></pre></td></tr></tbody></table></figure><p>它与类型无关。如果用函数来实现，那么就需要很多不同版本的函数了。</p><p>这里注意，<strong>宏名一般用大写字母表示</strong>。这是约定，为了区分它和函数而设定。因为它和真正的函数还是有着不同之处的。</p><blockquote><p><strong>注意</strong></p><p>这里有两点注意事项：一个是，可以用反斜杠<code>\</code>来让宏换行书写而不间断；另一个是，注意宏定义末尾并没有加分号，这是因为我们希望在书写时，可以像调用函数一样调用它，而不会因为没注意到重复分号，而在一些场合（如<code>if-else</code>）中将两条语句错当成一条，从而造成错误。</p></blockquote><h2 id="undef"><a href="https://mxts.jiujiuer.xyz/2021/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/#undef" class="headerlink" title="undef"></a>undef</h2><p>用于移除一个现存的宏定义：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">undef</span> name</span></span><br/></pre></td></tr></tbody></table></figure><h2 id="命令行定义"><a href="https://mxts.jiujiuer.xyz/2021/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/#%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AE%9A%E4%B9%89" class="headerlink" title="命令行定义"></a>命令行定义</h2><p>编译时，可以在编译选项中定义宏。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"></span><br/><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br/><span class="line">{</span><br/><span class="line">    <span class="type">int</span> <span class="built_in">array</span>[ARRAY_SIZE];</span><br/><span class="line">    ...</span><br/></pre></td></tr></tbody></table></figure><p>源码中并没有给出<code>ARRAY_SIZE</code>的定义，所以我们必须在编译时指定。</p><p>通用格式为：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line">-Dname</span><br/><span class="line">-Dname=stuff</span><br/></pre></td></tr></tbody></table></figure><p>所以我们应该这样给出它的定义：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">gcc main.c -DARRAY_SIZE=100</span><br/></pre></td></tr></tbody></table></figure><h2 id="条件编译"><a href="https://mxts.jiujiuer.xyz/2021/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/#%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91" class="headerlink" title="条件编译"></a>条件编译</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> constant-expression</span></span><br/><span class="line">    statements</span><br/><span class="line"><span class="comment">/* #elif可选 */</span></span><br/><span class="line"><span class="meta">#<span class="keyword">elif</span> constant-expression</span></span><br/><span class="line">    statements</span><br/><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br/><span class="line">    statements</span><br/><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br/></pre></td></tr></tbody></table></figure><p><code>constant-expression</code>，即常量表达式，意思是说要么它是一个字面值常量（比如1），要么就是用define定义的符号。</p><p>此时，预处理器就会根据这几个常量表达式来对源代码选择性地编译了。在进行debug时尤为有用。定义宏<code>DEBUG</code>，若值为1则编译一些测试时才会用的语句；否则只编译其他语句。</p><p>同时它还有个较常用的指令：是否被定义</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/></pre></td><td class="code"><pre><span class="line"><span class="comment">//这几条都是等价的</span></span><br/><span class="line"><span class="meta">#<span class="keyword">if</span> defined(symbol)</span></span><br/><span class="line"><span class="meta">#<span class="keyword">ifdef</span> symbol</span></span><br/><span class="line"><span class="comment">//还可以用逻辑运算</span></span><br/><span class="line"><span class="meta">#<span class="keyword">if</span> !defined(symbol)</span></span><br/><span class="line"><span class="comment">//和下面这条等价</span></span><br/><span class="line"><span class="meta">#<span class="keyword">ifndef</span> symbol</span></span><br/></pre></td></tr></tbody></table></figure><p>上面所说的那些条件编译指令也支持嵌套。</p><h2 id="include"><a href="https://mxts.jiujiuer.xyz/2021/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/#include" class="headerlink" title="include"></a>include</h2><p><code>#include</code>表示将后面跟随的文件的所有内容复制并替换这一行语句。它有两种形式：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/></pre></td><td class="code"><pre><span class="line"><span class="comment">//这表示函数库文件</span></span><br/><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br/><span class="line"><span class="comment">//这表示同目录文件。如果找不到，则会在函数库目录查找</span></span><br/></pre></td></tr></tbody></table></figure><h2 id="其他"><a href="https://mxts.jiujiuer.xyz/2021/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C%C2%B7C++/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/#%E5%85%B6%E4%BB%96" class="headerlink" title="其他"></a>其他</h2><p>包含<code>#error</code>，<code>#line</code>，<code>#progma</code>等。不一一介绍了。</p><hr/><p>宏的内容基本就是这些了。</p></body></html>