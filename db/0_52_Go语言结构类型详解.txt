<html><head></head><body><p>Go允许用户自定义类型，当你需要用代码抽象描述一个事物或者对象的时候，可以声明一个 struct 类型来进行描述。</p><p>当然，Go语言中，用户还可以基于已有的类型来定义其他类型。</p><p>简单来说，Go语言中用户可以有两种方法定义类型，第一种是使用 struct 关键字来创造一个结构类型；第二种是基于已有的类型，将其作为新类型的类型说明。</p><h2 id="01-自定义类型的基本使用"><a href="https://xeonds.github.io/2022/11/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Golang/Go%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3/#01-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8" class="headerlink" title="01. 自定义类型的基本使用"></a><strong>01.</strong> 自定义类型的基本使用</h2><p>基于已有的类型的这种方式比较简单，但需要注意的是，虽然是基于已有类型来定义新类型，但是基础类型和新类型是完全不同的两种类型，不能相互赋值，因为Go语言中，编译器不会对不同类型的值做隐式转换。</p><p>当需要使用一个比较明确的名字类描述一种类型时，使用这种自定义类型就比较合适，比如定义一个表示年龄的类型可以基于整形来定义一个 Age 类型，特指年龄类型。</p><p>下面是基于已有类型的方式定义类型的示例</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于 int64 声明一个 Duration 类型</span></span><br/><span class="line"><span class="comment">// int 是 Duration 的基本类型</span></span><br/><span class="line"><span class="comment">// 但是他们是两个完全不同的类型，在Go中是不能相互赋值的</span></span><br/><span class="line"><span class="keyword">type</span> Duration <span class="type">int</span></span><br/><span class="line"><span class="comment">// 声明一个 Duration 类型的变量 d</span></span><br/><span class="line"><span class="keyword">var</span> d Duration</span><br/><span class="line"><span class="comment">// 声明并初始化int类型的变量i 为 50</span></span><br/><span class="line">i := <span class="number">50</span></span><br/><span class="line"><span class="comment">// 尝试赋值会报错</span></span><br/><span class="line">d = i <span class="comment">// Cannot use &#39;i&#39; (type int) as type Duration</span></span><br/></pre></td></tr></tbody></table></figure><p>使用关键字 struct 来声明一个结构类型时，要求字段是固定并且唯一的，并且字段的类型也是已知的，但是字段类型可以是内置类型（比如 string, bool, int 等等），也可以是用户自定义的类型（比如，本文中介绍的 struct 类型）。</p><p>声明struct 结构体的公式：<code>type 结构体名称 struct {}</code> 。</p><p>在任何时候，创建一个变量并初始化其零值时，我们习惯是使用关键字 var，这种用法是为了更明确的表示变量被设置为零值。</p><p>而如果是变量被初始化为非零值时，则使用短变量操作符 <code>:=</code> 和结构字面量 结构类型{ 字段: 字段值, } 或者 结构类型{ 字段1值, 字段2值 } 来创建变量。</p><p>两种字面量初始化方式的差异与限制：</p><p>结构类型{ 字段1值, 字段2值 } 这种初始化方式时：</p><ol><li><p>在最后一个字段值的结尾可以不用加逗号 ,</p></li><li><p>必须严格按照声明时的字段顺序来进行初始化，不然会得不到预期的结果；如果字段类型不一致，还会导致初始化失败</p></li><li><p>必须要初始化所有的字段，不然会报错 Too few values</p></li></ol><p>结构类型{ 字段: 字段值, } 这种初始化方式时：</p><ol><li><p>每一个字段值的结尾必须要加一个逗号 ,</p></li><li><p>初始化时，不要考虑字段声明的顺序</p></li><li><p>允许只初始化部分字段</p></li></ol><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/></pre></td><td class="code"><pre><span class="line">  <span class="keyword">package</span> main</span><br/><span class="line">  <span class="keyword">import</span> <span class="string">&#34;log&#34;</span></span><br/><span class="line">  </span><br/><span class="line">  <span class="comment">// 声明无状态的空结构体 animal</span></span><br/><span class="line">  <span class="keyword">type</span> animal <span class="keyword">struct</span> {}</span><br/><span class="line">  </span><br/><span class="line">  <span class="comment">// 声明一个结构体 cat</span></span><br/><span class="line">  <span class="comment">// 内部有有 name, age 两个字段</span></span><br/><span class="line">  <span class="comment">// 字段 name 类型为 string类型</span></span><br/><span class="line">  <span class="comment">// 字段 age 类型为 int 类型</span></span><br/><span class="line">  <span class="keyword">type</span> cat <span class="keyword">struct</span> {</span><br/><span class="line">    name <span class="type">string</span></span><br/><span class="line">    age <span class="type">int</span></span><br/><span class="line">  }</span><br/><span class="line">  </span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br/><span class="line">  <span class="comment">// 初始化1</span></span><br/><span class="line">  <span class="keyword">var</span> c1 cat</span><br/><span class="line">  log.Println(c1) <span class="comment">// { 0}</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// 初始化2</span></span><br/><span class="line">  <span class="comment">// c2 := cat{&#34;kitten&#34;} // 报错：Too few values</span></span><br/><span class="line">  c2 := cat{<span class="string">&#34;kitten&#34;</span>, <span class="number">1</span>}</span><br/><span class="line">  log.Println(c2) <span class="comment">// {kitten 1}</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// 初始化3</span></span><br/><span class="line">  c3 := cat{age: <span class="number">2</span>}</span><br/><span class="line">  log.Println(c3, c3.age) <span class="comment">//  { 2} 2</span></span><br/><span class="line">  </span><br/><span class="line">  <span class="comment">// 变量字段赋值</span></span><br/><span class="line">  c3.name = <span class="string">&#34;kk&#34;</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// 字段访问</span></span><br/><span class="line">  <span class="comment">// 变量.字段名称</span></span><br/><span class="line">  log.Println(c3.name) <span class="comment">// kk</span></span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>以上是 struct 结构类型的基本使用，但是在项目开发中会遇到其他的用法，比如解析 json 或者 xml 文件到结构体类型变量中。</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/><span class="line">42</span><br/><span class="line">43</span><br/><span class="line">44</span><br/><span class="line">45</span><br/><span class="line">46</span><br/><span class="line">47</span><br/><span class="line">48</span><br/><span class="line">49</span><br/><span class="line">50</span><br/><span class="line">51</span><br/><span class="line">52</span><br/><span class="line">53</span><br/><span class="line">54</span><br/><span class="line">55</span><br/><span class="line">56</span><br/><span class="line">57</span><br/><span class="line">58</span><br/><span class="line">59</span><br/><span class="line">60</span><br/><span class="line">61</span><br/><span class="line">62</span><br/><span class="line">63</span><br/></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析 json 的示例</span></span><br/><span class="line"><span class="comment">// 数据文件</span></span><br/><span class="line"><span class="comment">// data.json</span></span><br/><span class="line">[</span><br/><span class="line">  {</span><br/><span class="line">    <span class="string">&#34;site&#34;</span> : <span class="string">&#34;npr&#34;</span>,</span><br/><span class="line">    <span class="string">&#34;link&#34;</span> : <span class="string">&#34;http://www.npr.org/rss/rss.php?id=1001&#34;</span>,</span><br/><span class="line">    <span class="string">&#34;type&#34;</span> : <span class="string">&#34;rss&#34;</span></span><br/><span class="line">  },</span><br/><span class="line">  {</span><br/><span class="line">    <span class="string">&#34;site&#34;</span> : <span class="string">&#34;npr&#34;</span>,</span><br/><span class="line">    <span class="string">&#34;link&#34;</span> : <span class="string">&#34;http://www.npr.org/rss/rss.php?id=1008&#34;</span>,</span><br/><span class="line">    <span class="string">&#34;type&#34;</span> : <span class="string">&#34;rss&#34;</span></span><br/><span class="line">  },</span><br/><span class="line">  {</span><br/><span class="line">    <span class="string">&#34;site&#34;</span> : <span class="string">&#34;npr&#34;</span>,</span><br/><span class="line">    <span class="string">&#34;link&#34;</span> : <span class="string">&#34;http://www.npr.org/rss/rss.php?id=1006&#34;</span>,</span><br/><span class="line">    <span class="string">&#34;type&#34;</span> : <span class="string">&#34;rss&#34;</span></span><br/><span class="line">  }</span><br/><span class="line">]</span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// main.go</span></span><br/><span class="line"><span class="keyword">package</span> main</span><br/><span class="line">​</span><br/><span class="line"><span class="keyword">import</span> (</span><br/><span class="line">  <span class="string">&#34;encoding/json&#34;</span></span><br/><span class="line">  <span class="string">&#34;log&#34;</span></span><br/><span class="line">  <span class="string">&#34;os&#34;</span></span><br/><span class="line">)</span><br/><span class="line">​</span><br/><span class="line"><span class="keyword">type</span> Feed <span class="keyword">struct</span> {</span><br/><span class="line">  Site <span class="type">string</span> <span class="string">`json:&#34;site&#34;`</span></span><br/><span class="line">  Link <span class="type">string</span> <span class="string">`json:&#34;link&#34;`</span></span><br/><span class="line">  Type <span class="type">string</span> <span class="string">`json:&#34;type&#34;`</span></span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// 解析 JSON 数据</span></span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseJSON</span><span class="params">(path <span class="type">string</span>)</span></span> ([]*Feed, <span class="type">error</span>) {</span><br/><span class="line">  file, err := os.Open(path)</span><br/><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br/><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br/><span class="line">  }</span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// 注意：打开文件之后，记得要关闭文件</span></span><br/><span class="line">  <span class="keyword">defer</span> file.Close()</span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// 注意：文件读取后，需要结构体来解析json数据</span></span><br/><span class="line">  <span class="keyword">var</span> files []*Feed</span><br/><span class="line">  json.NewDecoder(file).Decode(&amp;files)</span><br/><span class="line">  <span class="keyword">return</span> files, <span class="literal">nil</span></span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br/><span class="line">  <span class="comment">// 读取并解析 json 数据</span></span><br/><span class="line">  <span class="keyword">var</span> path = <span class="string">&#34;./data.json&#34;</span></span><br/><span class="line">  feeds, err := ParseJSON(path)</span><br/><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br/><span class="line">    log.Println(<span class="string">&#34;error: &#34;</span>, err)</span><br/><span class="line">  }</span><br/><span class="line">  <span class="keyword">for</span> i, val := <span class="keyword">range</span> feeds {</span><br/><span class="line">    log.Printf(<span class="string">&#34;%d - site:%s, link:%s, type:%s&#34;</span>, i, val.Site, val.Link, val.Type)</span><br/><span class="line">  }</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/><span class="line">42</span><br/><span class="line">43</span><br/><span class="line">44</span><br/><span class="line">45</span><br/><span class="line">46</span><br/><span class="line">47</span><br/><span class="line">48</span><br/><span class="line">49</span><br/><span class="line">50</span><br/><span class="line">51</span><br/><span class="line">52</span><br/><span class="line">53</span><br/><span class="line">54</span><br/><span class="line">55</span><br/><span class="line">56</span><br/><span class="line">57</span><br/><span class="line">58</span><br/><span class="line">59</span><br/><span class="line">60</span><br/><span class="line">61</span><br/><span class="line">62</span><br/><span class="line">63</span><br/><span class="line">64</span><br/><span class="line">65</span><br/><span class="line">66</span><br/><span class="line">67</span><br/></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析 xml 数据到结构体中示例</span></span><br/><span class="line"><span class="comment">// data.xml</span></span><br/><span class="line">&lt;?xml version=<span class="string">&#34;1.0&#34;</span> encoding=<span class="string">&#34;utf-8&#34;</span> ?&gt;</span><br/><span class="line">&lt;content&gt;</span><br/><span class="line">    &lt;item&gt;</span><br/><span class="line">        &lt;site&gt;npr&lt;/site&gt;</span><br/><span class="line">        &lt;link&gt;http:<span class="comment">//www.npr.org/rss/rss.php?id=1001&lt;/link&gt;</span></span><br/><span class="line">        &lt;<span class="keyword">type</span>&gt;rss&lt;/<span class="keyword">type</span>&gt;</span><br/><span class="line">    &lt;/item&gt;</span><br/><span class="line">    &lt;item&gt;</span><br/><span class="line">        &lt;site&gt;npr&lt;/site&gt;</span><br/><span class="line">        &lt;link&gt;http:<span class="comment">//www.npr.org/rss/rss.php?id=1002&lt;/link&gt;</span></span><br/><span class="line">        &lt;<span class="keyword">type</span>&gt;rss&lt;/<span class="keyword">type</span>&gt;</span><br/><span class="line">    &lt;/item&gt;</span><br/><span class="line">    &lt;item&gt;</span><br/><span class="line">        &lt;site&gt;npr&lt;/site&gt;</span><br/><span class="line">        &lt;link&gt;http:<span class="comment">//www.npr.org/rss/rss.php?id=1003&lt;/link&gt;</span></span><br/><span class="line">        &lt;<span class="keyword">type</span>&gt;rss&lt;/<span class="keyword">type</span>&gt;</span><br/><span class="line">    &lt;/item&gt;</span><br/><span class="line">&lt;/content&gt;</span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// main.go</span></span><br/><span class="line"><span class="keyword">package</span> main</span><br/><span class="line">​</span><br/><span class="line"><span class="keyword">import</span> (</span><br/><span class="line">  <span class="string">&#34;encoding/xml&#34;</span></span><br/><span class="line">  <span class="string">&#34;io/ioutil&#34;</span></span><br/><span class="line">  <span class="string">&#34;log&#34;</span></span><br/><span class="line">  <span class="string">&#34;os&#34;</span></span><br/><span class="line">)</span><br/><span class="line">​</span><br/><span class="line"><span class="keyword">type</span> Content <span class="keyword">struct</span> {</span><br/><span class="line">  XMLName xml.Name <span class="string">`xml:&#34;content&#34;`</span> <span class="comment">// 指定xml中的名称</span></span><br/><span class="line">  Item []item <span class="string">`xml:&#34;item&#34;`</span></span><br/><span class="line">}</span><br/><span class="line"><span class="keyword">type</span> item <span class="keyword">struct</span> {</span><br/><span class="line">  XMLName xml.Name <span class="string">`xml:&#34;item&#34;`</span> <span class="comment">// 指定xml中的名称</span></span><br/><span class="line">  Site <span class="type">string</span> <span class="string">`xml:&#34;site&#34;`</span></span><br/><span class="line">  Link <span class="type">string</span> <span class="string">`xml:&#34;link&#34;`</span></span><br/><span class="line">  Type <span class="type">string</span> <span class="string">`xml:&#34;type&#34;`</span></span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// 解析 XML 数据</span></span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseXML</span><span class="params">(path <span class="type">string</span>)</span></span> (*Content, <span class="type">error</span>) {</span><br/><span class="line">  <span class="comment">// 读取 xml</span></span><br/><span class="line">  data, err := ioutil.ReadFile(path)</span><br/><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br/><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br/><span class="line">  }</span><br/><span class="line">​</span><br/><span class="line">  <span class="keyword">var</span> con Content</span><br/><span class="line">  <span class="comment">// 解析 xml</span></span><br/><span class="line">  xml.Unmarshal(data, &amp;con)</span><br/><span class="line">  <span class="keyword">return</span> &amp;con, <span class="literal">nil</span></span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br/><span class="line">  <span class="comment">// 读取并解析 xml 数据</span></span><br/><span class="line">  <span class="keyword">var</span> xmlpath = <span class="string">&#34;./data.xml&#34;</span></span><br/><span class="line">  content, err := ParseXML(xmlpath)</span><br/><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br/><span class="line">    log.Println(<span class="string">&#34;error: &#34;</span>, err)</span><br/><span class="line">  }</span><br/><span class="line">  <span class="keyword">for</span> i, val := <span class="keyword">range</span> content.Item {</span><br/><span class="line">    log.Printf(<span class="string">&#34;%d - site:%s, link:%s, type:%s&#34;</span>, i, val.Site, val.Link, val.Type)</span><br/><span class="line">  }</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="02-公开或未公开的标识符"><a href="https://xeonds.github.io/2022/11/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Golang/Go%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3/#02-%E5%85%AC%E5%BC%80%E6%88%96%E6%9C%AA%E5%85%AC%E5%BC%80%E7%9A%84%E6%A0%87%E8%AF%86%E7%AC%A6" class="headerlink" title="02. 公开或未公开的标识符"></a><strong>02.</strong> 公开或未公开的标识符</h2><p>在Go语言中，声明类型、函数、方法、变量等标识符时，使用大小写字母开头来区分该标识符是否公开（即是否能在包外访问）。</p><p>大写字母开头表示公开，小写字母开头表示非公开。所以如果某个结构类型以及结构类型的字段，函数，方法，变量等标识符，想要被外部访问到，那必须以大写字母开头。</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/></pre></td><td class="code"><pre><span class="line"><span class="comment">// user 包</span></span><br/><span class="line"><span class="keyword">package</span> user</span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// 基于 int 类型声明一个 duration 类型</span></span><br/><span class="line"><span class="comment">// 未公开的类型（以小写字母开头）</span></span><br/><span class="line"><span class="comment">// 包外部，不能直接访问</span></span><br/><span class="line"><span class="keyword">type</span> duration <span class="type">int</span></span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// 公开的类型（以大写字母开头）</span></span><br/><span class="line"><span class="comment">// 包外部能直接访问</span></span><br/><span class="line"><span class="keyword">type</span> Duration <span class="type">int</span></span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// 未公开的结构类型 user</span></span><br/><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> {</span><br/><span class="line">  name <span class="type">string</span></span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// 公开的结构类型 User</span></span><br/><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> {</span><br/><span class="line">  Name <span class="type">string</span></span><br/><span class="line">  phone <span class="type">string</span></span><br/><span class="line">  address</span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// 未公开的 address 类型</span></span><br/><span class="line"><span class="comment">// 包含公开的字段 City</span></span><br/><span class="line"><span class="keyword">type</span> address <span class="keyword">struct</span> {</span><br/><span class="line">  City <span class="type">string</span></span><br/><span class="line">  position position</span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="keyword">type</span> position <span class="keyword">struct</span> {</span><br/><span class="line">  Longitude <span class="type">string</span></span><br/><span class="line">  Latitude <span class="type">string</span></span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// 通过工厂函数，返回未公开的变量类型</span></span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(num <span class="type">int</span>)</span></span> duration {</span><br/><span class="line">  <span class="keyword">return</span> duration(num)</span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/><span class="line">42</span><br/><span class="line">43</span><br/><span class="line">44</span><br/><span class="line">45</span><br/><span class="line">46</span><br/><span class="line">47</span><br/><span class="line">48</span><br/><span class="line">49</span><br/><span class="line">50</span><br/><span class="line">51</span><br/><span class="line">52</span><br/><span class="line">53</span><br/><span class="line">54</span><br/><span class="line">55</span><br/><span class="line">56</span><br/><span class="line">57</span><br/><span class="line">58</span><br/><span class="line">59</span><br/><span class="line">60</span><br/><span class="line">61</span><br/><span class="line">62</span><br/><span class="line">63</span><br/><span class="line">64</span><br/><span class="line">65</span><br/><span class="line">66</span><br/><span class="line">67</span><br/><span class="line">68</span><br/><span class="line">69</span><br/><span class="line">70</span><br/><span class="line">71</span><br/><span class="line">72</span><br/><span class="line">73</span><br/><span class="line">74</span><br/></pre></td><td class="code"><pre><span class="line"><span class="comment">// main 包</span></span><br/><span class="line"><span class="keyword">package</span> main</span><br/><span class="line">​</span><br/><span class="line"><span class="keyword">import</span> (</span><br/><span class="line">  <span class="string">&#34;go-demo/user&#34;</span></span><br/><span class="line">  <span class="string">&#34;log&#34;</span></span><br/><span class="line">)</span><br/><span class="line">​</span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br/><span class="line">  <span class="comment">// ------</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// 在 main 包中，试图使用 user 包中的为公开的 duration 类型</span></span><br/><span class="line">  <span class="comment">//var d1 user.duration = 10 // 报错：Unexported type &#39;duration&#39; usage</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// ------</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// 在 main 包中，访问一个 user 包中公开的 Duration 类型</span></span><br/><span class="line">  <span class="keyword">var</span> d2 user.Duration = <span class="number">10</span></span><br/><span class="line">  log.Println(d2) <span class="comment">// 结果：10</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// ------</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// 还可以以工厂函数的方式使用，user 包中未公开的类型</span></span><br/><span class="line">  d3 := user.New(<span class="number">100</span>)</span><br/><span class="line">  log.Printf(<span class="string">&#34;type: %T, value:%d&#34;</span>, d3, d3) <span class="comment">// 结果：type: user.duration, value:100</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// ------</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// main包中尝试访问 user 包中未公开的结构类型 user</span></span><br/><span class="line">  <span class="comment">//var u user.user // 报错：Unexported type &#39;user&#39; usage</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// ------</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// main包中尝试访问 user 包中公开的结构类型 User</span></span><br/><span class="line">  <span class="keyword">var</span> u user.User</span><br/><span class="line">  log.Printf(<span class="string">&#34;%#v&#34;</span>, u) <span class="comment">// 结果：user.User{name:&#34;&#34;}</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// 访问公开 User 类型的未公开的字段 phone</span></span><br/><span class="line">  <span class="comment">//log.Println(u.phone) // 报错：Unexported field &#39;phone&#39; usage</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// 初始化未公开的字段 phone</span></span><br/><span class="line">  <span class="comment">//u2 := user.User{phone: &#34;176888888888&#34;} // 报错：Unexported field &#39;phone&#39; usage in struct literal</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// 访问公开 User 类型的公开的字段 Name</span></span><br/><span class="line">  <span class="comment">// 给字段赋值</span></span><br/><span class="line">  <span class="comment">//u.Name = &#34;Jack&#34;</span></span><br/><span class="line">  <span class="comment">//log.Println(u.Name) // 结果：Jack</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// 初始化公开字段</span></span><br/><span class="line">  u3 := user.User{</span><br/><span class="line">    Name: <span class="string">&#34;Jack&#34;</span>,</span><br/><span class="line">  }</span><br/><span class="line">  log.Println(u3.Name) <span class="comment">// 结果：Jack</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// ------</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// main 包中初始化 user 包中公开的 User 类型中嵌套的未公开的 address 类型</span></span><br/><span class="line">  <span class="comment">// 报错：Unexported field &#39;address&#39; usage in struct literal</span></span><br/><span class="line">  <span class="comment">//u4 := user.User{</span></span><br/><span class="line">  <span class="comment">//  address: address{</span></span><br/><span class="line">  <span class="comment">//    City: &#34;Beijing&#34;,</span></span><br/><span class="line">  <span class="comment">//  },</span></span><br/><span class="line">  <span class="comment">//}</span></span><br/><span class="line">​</span><br/><span class="line">​</span><br/><span class="line">  <span class="keyword">var</span> u5 user.User</span><br/><span class="line">  <span class="comment">// 嵌套的结构类型会提升到上级结构中</span></span><br/><span class="line">  u5.City = <span class="string">&#34;Beijing&#34;</span></span><br/><span class="line">  log.Println(u5.City) <span class="comment">// Beijing</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// 尝试访问子孙级别的嵌套结构的公开的字段</span></span><br/><span class="line">  <span class="comment">// 无法访问</span></span><br/><span class="line">  <span class="comment">//u5.Longitude = &#34;xx&#34; //报错：u5.Longitude undefined (type user.User has no field or method Longitude)</span></span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="03-给自定义类型增加方法"><a href="https://xeonds.github.io/2022/11/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Golang/Go%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3/#03-%E7%BB%99%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E5%A2%9E%E5%8A%A0%E6%96%B9%E6%B3%95" class="headerlink" title="03. 给自定义类型增加方法"></a><strong>03.</strong> 给自定义类型增加方法</h2><p>在Go语言中，编译器只允许为命名的用户定义的类型声明方法。方法跟函数类似，只是方法不会单独存在，一般是绑定到某个结构类型中，给类型增加方法的方式很简单，就是在方法名和 func 之间增加一个参数即可, 这个参数称为方法的接收者。</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> {</span><br/><span class="line">  Name <span class="type">string</span></span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// 给 User 类型增加方法 Read</span></span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span></span> Read() {</span><br/><span class="line">  log.Println(u.Name, <span class="string">&#34;is Reading...&#34;</span>)</span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// User 类型变量使用 Read 方法</span></span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br/><span class="line">  u := User{</span><br/><span class="line">    Name: <span class="string">&#34;Jack&#34;</span>,</span><br/><span class="line">  }</span><br/><span class="line">  u.Read() <span class="comment">// 结果 Jack is Reading...</span></span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><p>方法的接收者，可以是值接收者，也可以是指针接收者。</p><p>而应该使用值接收者还是指针接收者，那要看给这个类型增加或删除某个值时，是创建一个新值，还是要更改当前值？如果是要创建一个新值，该类型的方法就使用值接收者；如果是要修改当前值，就使用指针接收者。</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/><span class="line">42</span><br/><span class="line">43</span><br/><span class="line">44</span><br/><span class="line">45</span><br/><span class="line">46</span><br/><span class="line">47</span><br/><span class="line">48</span><br/><span class="line">49</span><br/><span class="line">50</span><br/><span class="line">51</span><br/><span class="line">52</span><br/><span class="line">53</span><br/><span class="line">54</span><br/><span class="line">55</span><br/><span class="line">56</span><br/><span class="line">57</span><br/><span class="line">58</span><br/><span class="line">59</span><br/><span class="line">60</span><br/><span class="line">61</span><br/><span class="line">62</span><br/><span class="line">63</span><br/><span class="line">64</span><br/><span class="line">65</span><br/><span class="line">66</span><br/><span class="line">67</span><br/><span class="line">68</span><br/><span class="line">69</span><br/><span class="line">70</span><br/><span class="line">71</span><br/><span class="line">72</span><br/><span class="line">73</span><br/><span class="line">74</span><br/><span class="line">75</span><br/><span class="line">76</span><br/><span class="line">77</span><br/><span class="line">78</span><br/><span class="line">79</span><br/><span class="line">80</span><br/><span class="line">81</span><br/><span class="line">82</span><br/><span class="line">83</span><br/><span class="line">84</span><br/><span class="line">85</span><br/><span class="line">86</span><br/><span class="line">87</span><br/><span class="line">88</span><br/><span class="line">89</span><br/><span class="line">90</span><br/><span class="line">91</span><br/><span class="line">92</span><br/><span class="line">93</span><br/><span class="line">94</span><br/><span class="line">95</span><br/><span class="line">96</span><br/><span class="line">97</span><br/><span class="line">98</span><br/><span class="line">99</span><br/><span class="line">100</span><br/><span class="line">101</span><br/><span class="line">102</span><br/><span class="line">103</span><br/><span class="line">104</span><br/><span class="line">105</span><br/><span class="line">106</span><br/><span class="line">107</span><br/><span class="line">108</span><br/><span class="line">109</span><br/><span class="line">110</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br/><span class="line">​</span><br/><span class="line"><span class="keyword">import</span> <span class="string">&#34;log&#34;</span></span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// 基于基本类型创建类型</span></span><br/><span class="line"><span class="keyword">type</span> Age <span class="type">int</span></span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// 值接收者</span></span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(age Age)</span></span> ChangeAge() {</span><br/><span class="line">  age = <span class="number">18</span></span><br/><span class="line">}</span><br/><span class="line"><span class="comment">// 指针接收者</span></span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(age *Age)</span></span> ChangeAgeByPointer() {</span><br/><span class="line">  *age = <span class="number">18</span></span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// 基于引用类型创建类型</span></span><br/><span class="line"><span class="keyword">type</span> IP []<span class="type">byte</span></span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// 值接收者</span></span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ip IP)</span></span> ChangeIP() {</span><br/><span class="line">  ip = []<span class="type">byte</span>(<span class="string">&#34;456&#34;</span>)</span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// 指针接收者</span></span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ip *IP)</span></span> ChangeIPByPointer() {</span><br/><span class="line">  *ip = []<span class="type">byte</span>(<span class="string">&#34;456&#34;</span>)</span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="keyword">type</span> Pet <span class="keyword">struct</span> {</span><br/><span class="line">  Name <span class="type">string</span></span><br/><span class="line">  Hobby []<span class="type">string</span></span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// 值接收者</span></span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pet Pet)</span></span> ChangePetValue(name <span class="type">string</span>, hobby []<span class="type">string</span>) {</span><br/><span class="line">  pet.Name = name</span><br/><span class="line">  pet.Hobby = hobby</span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// 指针接收者</span></span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pet *Pet)</span></span> ChangePetValueByPointer(name <span class="type">string</span>, hobby []<span class="type">string</span>) {</span><br/><span class="line">  pet.Name = name</span><br/><span class="line">  pet.Hobby = hobby</span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br/><span class="line">  <span class="comment">// -----基于基本类型来定义类型的示例-----</span></span><br/><span class="line">  <span class="comment">// 值接收者，不会改变原来的值</span></span><br/><span class="line">  <span class="keyword">var</span> age Age = <span class="number">38</span></span><br/><span class="line">  log.Println(<span class="string">&#34;前age=&#34;</span>, age) <span class="comment">// 前age= 38</span></span><br/><span class="line">  <span class="comment">// 值调用方法</span></span><br/><span class="line">  age.ChangeAge()</span><br/><span class="line">  <span class="comment">// 指针调用方法</span></span><br/><span class="line">  <span class="comment">//(&amp;age).ChangeAge()</span></span><br/><span class="line">​</span><br/><span class="line">  log.Println(<span class="string">&#34;后age=&#34;</span>, age) <span class="comment">// 后age= 38</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// 指针接收者，会改变原来的值</span></span><br/><span class="line">  <span class="keyword">var</span> age2 Age = <span class="number">38</span></span><br/><span class="line">  log.Println(<span class="string">&#34;前age2=&#34;</span>, age2) <span class="comment">// 前age= 38</span></span><br/><span class="line">  <span class="comment">// 值调用方法</span></span><br/><span class="line">  age2.ChangeAgeByPointer()</span><br/><span class="line">  <span class="comment">// 指针调用方法</span></span><br/><span class="line">  <span class="comment">//(&amp;age2).ChangeAgeByPointer()</span></span><br/><span class="line">​</span><br/><span class="line">  log.Println(<span class="string">&#34;后age2=&#34;</span>, age2) <span class="comment">// 后age= 18</span></span><br/><span class="line">​</span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// -----基于引用类型来定义类型的示例-----</span></span><br/><span class="line">  <span class="comment">// 值接收者，不会改变原来的值</span></span><br/><span class="line">  <span class="keyword">var</span> ip IP = []<span class="type">byte</span>(<span class="string">&#34;123&#34;</span>)</span><br/><span class="line">  log.Printf(<span class="string">&#34;前ip=%s&#34;</span>, ip) <span class="comment">// 前ip=123</span></span><br/><span class="line">  <span class="comment">// 值调用方法</span></span><br/><span class="line">  ip.ChangeIP()</span><br/><span class="line">  <span class="comment">// 指针调用方法</span></span><br/><span class="line">  <span class="comment">//(&amp;ip).ChangeIP()</span></span><br/><span class="line">  log.Printf(<span class="string">&#34;后ip=%s&#34;</span>, ip) <span class="comment">// 后ip=123</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// 指针接收者，会改变原来的值</span></span><br/><span class="line">  <span class="keyword">var</span> ip2 IP = []<span class="type">byte</span>(<span class="string">&#34;123&#34;</span>)</span><br/><span class="line">  log.Printf(<span class="string">&#34;前ip2=%s&#34;</span>, ip2) <span class="comment">// 前ip2=123</span></span><br/><span class="line">  <span class="comment">// 值调用方法</span></span><br/><span class="line">  ip2.ChangeIPByPointer()</span><br/><span class="line">  <span class="comment">// 指针调用方法</span></span><br/><span class="line">  <span class="comment">//(&amp;ip2).ChangeIPByPointer()</span></span><br/><span class="line">  log.Printf(<span class="string">&#34;后ip2=%s&#34;</span>, ip2) <span class="comment">// 后ip2=456</span></span><br/><span class="line">​</span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// ----- struct 类型 -----</span></span><br/><span class="line">  <span class="comment">// 值接收者，不会改变原来的值</span></span><br/><span class="line">  cat := Pet{</span><br/><span class="line">    Name: <span class="string">&#34;kk&#34;</span>,</span><br/><span class="line">    Hobby: []<span class="type">string</span>{<span class="string">&#34;cookies&#34;</span>, <span class="string">&#34;fishes&#34;</span>},</span><br/><span class="line">  }</span><br/><span class="line">  log.Printf(<span class="string">&#34;前：%#v&#34;</span>, cat) <span class="comment">// 前：method.Pet{Name:&#34;kk&#34;, Hobby:[]string{&#34;cookies&#34;, &#34;fishes&#34;}}</span></span><br/><span class="line">  <span class="comment">// 值调用方法</span></span><br/><span class="line">  cat.ChangePetValue(<span class="string">&#34;kitten&#34;</span>, []<span class="type">string</span>{<span class="string">&#34;meat&#34;</span>})</span><br/><span class="line">  <span class="comment">// 指针调用方法</span></span><br/><span class="line">  <span class="comment">//(&amp;cat).ChangePetValue(&#34;kitten&#34;, []string{&#34;meat&#34;})</span></span><br/><span class="line">  log.Printf(<span class="string">&#34;后：%#v&#34;</span>, cat) <span class="comment">// 后：method.Pet{Name:&#34;kk&#34;, Hobby:[]string{&#34;cookies&#34;, &#34;fishes&#34;}}</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// 指针接收者，会改变原来的值</span></span><br/><span class="line">  log.Printf(<span class="string">&#34;指针前：%#v&#34;</span>, cat) <span class="comment">// 指针前：method.Pet{Name:&#34;kk&#34;, Hobby:[]string{&#34;cookies&#34;, &#34;fishes&#34;}}</span></span><br/><span class="line">  <span class="comment">// 值调用方法</span></span><br/><span class="line">  cat.ChangePetValueByPointer(<span class="string">&#34;kitten&#34;</span>, []<span class="type">string</span>{<span class="string">&#34;meat&#34;</span>}) </span><br/><span class="line">  <span class="comment">// 指针调用方法</span></span><br/><span class="line">  <span class="comment">//(&amp;cat).ChangePetValueByPointer(&#34;kitten&#34;, []string{&#34;meat&#34;})</span></span><br/><span class="line">  log.Printf(<span class="string">&#34;指针后：%#v&#34;</span>, cat) <span class="comment">// 指针后：method.Pet{Name:&#34;kitten&#34;, Hobby:[]string{&#34;meat&#34;}}</span></span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="04-嵌入类型"><a href="https://xeonds.github.io/2022/11/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Golang/Go%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3/#04-%E5%B5%8C%E5%85%A5%E7%B1%BB%E5%9E%8B" class="headerlink" title="04. 嵌入类型"></a><strong>04.</strong> 嵌入类型</h2><p>Go语言通过类型嵌套的方式来复用代码，当多个结构类型相互嵌套时，外部类型会复用内部类型的代码。</p><p>由于内部类型的标识符会提升到外部类型中，所以内部类型实现的字段，方法和接口在外部类型中也能直接访问到。</p><p>当外部类型需要实现一个和内部类型一样的方法或接口时，只需要给外部类型重新绑定方法或实现接口即可。</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/><span class="line">42</span><br/><span class="line">43</span><br/><span class="line">44</span><br/><span class="line">45</span><br/><span class="line">46</span><br/><span class="line">47</span><br/><span class="line">48</span><br/><span class="line">49</span><br/><span class="line">50</span><br/><span class="line">51</span><br/><span class="line">52</span><br/><span class="line">53</span><br/><span class="line">54</span><br/><span class="line">55</span><br/><span class="line">56</span><br/><span class="line">57</span><br/><span class="line">58</span><br/><span class="line">59</span><br/><span class="line">60</span><br/><span class="line">61</span><br/><span class="line">62</span><br/><span class="line">63</span><br/><span class="line">64</span><br/><span class="line">65</span><br/><span class="line">66</span><br/><span class="line">67</span><br/><span class="line">68</span><br/><span class="line">69</span><br/><span class="line">70</span><br/><span class="line">71</span><br/><span class="line">72</span><br/><span class="line">73</span><br/><span class="line">74</span><br/><span class="line">75</span><br/><span class="line">76</span><br/><span class="line">77</span><br/><span class="line">78</span><br/><span class="line">79</span><br/><span class="line">80</span><br/><span class="line">81</span><br/><span class="line">82</span><br/><span class="line">83</span><br/><span class="line">84</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br/><span class="line">​</span><br/><span class="line"><span class="keyword">import</span> <span class="string">&#34;log&#34;</span></span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// user 类型</span></span><br/><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> {</span><br/><span class="line">  name <span class="type">string</span></span><br/><span class="line">  phone <span class="type">string</span></span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// 给 user 实现 Call 方法</span></span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *user)</span></span> Call() {</span><br/><span class="line">  log.Printf(<span class="string">&#34;Call user %s&lt;%s&gt;&#34;</span>, u.name, u.phone)</span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// Admin 类型 （外部类型）</span></span><br/><span class="line"><span class="comment">// 嵌套 user （内部类型）</span></span><br/><span class="line"><span class="keyword">type</span> Admin <span class="keyword">struct</span> {</span><br/><span class="line">  user</span><br/><span class="line">  level <span class="type">string</span></span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// 重新实现 Admin 类型的 Call 方法</span></span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ad *Admin)</span></span> Call() {</span><br/><span class="line">  log.Printf(<span class="string">&#34;Call admin %s&lt;%s&gt;&#34;</span>, ad.name, ad.phone)</span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// 定义一个接口 notifier,</span></span><br/><span class="line"><span class="comment">// 接口需要实现一个 notify 方法</span></span><br/><span class="line"><span class="keyword">type</span> notifier <span class="keyword">interface</span> {</span><br/><span class="line">  notify()</span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// 给 user 实现 notify 方法</span></span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *user)</span></span> notify() {</span><br/><span class="line">  log.Printf(<span class="string">&#34;Sending a message to user %s&lt;%s&gt;&#34;</span>, u.name, u.phone)</span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// 定义一个函数 sendNotification</span></span><br/><span class="line"><span class="comment">// 函数接收一个实现了 notifier 接口的值</span></span><br/><span class="line"><span class="comment">// 然后调用参数的 notify 方法</span></span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendNotification</span><span class="params">(n notifier)</span></span> {</span><br/><span class="line">  n.notify()</span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="comment">// 给 Admin 实现 notify 方法</span></span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ad *Admin)</span></span> notify() {</span><br/><span class="line">  log.Printf(<span class="string">&#34;Sending a message to ADMIN %s&lt;%s&gt;&#34;</span>, ad.name, ad.phone)</span><br/><span class="line">}</span><br/><span class="line">​</span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br/><span class="line">  <span class="comment">// 声明并初始化 Admin 类型的变量 ad</span></span><br/><span class="line">  ad := Admin{</span><br/><span class="line">    user: user{</span><br/><span class="line">      name: <span class="string">&#34;Jack&#34;</span>,</span><br/><span class="line">      phone: <span class="string">&#34;17688888888&#34;</span>,</span><br/><span class="line">    },</span><br/><span class="line">    level: <span class="string">&#34;super&#34;</span>,</span><br/><span class="line">  }</span><br/><span class="line">  <span class="comment">// ad 调用 user 内部的 Call 方法</span></span><br/><span class="line">  ad.user.Call() <span class="comment">// Call user Jack&lt;17688888888&gt;</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// 由于内部类型的标识符提升，所以外部类型值 ad 也可以直接调用其内部类型的标识符(字段，方法，接口等)</span></span><br/><span class="line">  ad.Call() <span class="comment">// Call user Jack&lt;17688888888&gt;</span></span><br/><span class="line">  log.Println(ad.name, ad.phone) <span class="comment">// Jack 17688888888</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// ad 重新实现一个和内部类型 user 一样的 Call 方法</span></span><br/><span class="line">  <span class="comment">// 覆盖内部类型 user 提升的 Call 方法</span></span><br/><span class="line">  ad.Call() <span class="comment">// Call admin Jack&lt;17688888888&gt;</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// user 内部的 Call 方法没有变化</span></span><br/><span class="line">  ad.user.Call() <span class="comment">// Call user Jack&lt;17688888888&gt;</span></span><br/><span class="line">​</span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// 外部类型和内部类型调用接口方法</span></span><br/><span class="line">  sendNotification(&amp;ad) <span class="comment">// Sending a message to user Jack&lt;17688888888&gt;</span></span><br/><span class="line">  ad.notify() <span class="comment">// Sending a message to user Jack&lt;17688888888&gt;</span></span><br/><span class="line">  ad.user.notify() <span class="comment">// Sending a message to user Jack&lt;17688888888&gt;</span></span><br/><span class="line">​</span><br/><span class="line">  <span class="comment">// 外部类型重新实现接口方法后</span></span><br/><span class="line">  sendNotification(&amp;ad) <span class="comment">// Sending a message to ADMIN Jack&lt;17688888888&gt;</span></span><br/><span class="line">  ad.notify() <span class="comment">// Sending a message to ADMIN Jack&lt;17688888888&gt;</span></span><br/><span class="line">  ad.user.notify() <span class="comment">// Sending a message to user Jack&lt;17688888888&gt;</span></span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure><h2 id="05-类型实现接口"><a href="https://xeonds.github.io/2022/11/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Golang/Go%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3/#05-%E7%B1%BB%E5%9E%8B%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3" class="headerlink" title="**05.**类型实现接口"></a>**05.**类型实现接口</h2><p>Go语言中，接口是用来定义行为的类型，这些被定义的行为不由接口直接实现，而是通过方法由用户定义的类型实现。</p><p>如果用户定义的类型实现了某个接口里的一组方法，那么用户定义的这个类型值，就可以赋值给该接口值，此时用户定义的类型称为实体类型。</p><p>而用户定义的类型想要实现一个接口，需要遵循一些规则，这些规则使用方法集来进行定义。</p><p>从类型实现方法的接收者角度来看，可以描述为以下表格。</p><table><thead><tr><th align="center">方法接收者</th><th align="left">类型值或类型值的指针</th></tr></thead><tbody><tr><td align="center">(t T)</td><td align="left">T and *T</td></tr><tr><td align="center">(t *T)</td><td align="left">*T</td></tr></tbody></table><p>表示当类型的方法为指针接收者时，只有类型值的指针，才能实现接口。</p><p>如果类型的方法为值接收者，那么类型值还是类型值的指针都能够实现对应的接口。</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/><span class="line">42</span><br/><span class="line">43</span><br/><span class="line">44</span><br/><span class="line">45</span><br/><span class="line">46</span><br/><span class="line">47</span><br/><span class="line">48</span><br/><span class="line">49</span><br/><span class="line">50</span><br/><span class="line">51</span><br/><span class="line">52</span><br/><span class="line">53</span><br/><span class="line">54</span><br/><span class="line">55</span><br/><span class="line">56</span><br/><span class="line">57</span><br/><span class="line">58</span><br/><span class="line">59</span><br/><span class="line">60</span><br/><span class="line">61</span><br/><span class="line">62</span><br/><span class="line">63</span><br/><span class="line">64</span><br/><span class="line">65</span><br/><span class="line">66</span><br/><span class="line">67</span><br/><span class="line">68</span><br/><span class="line">69</span><br/><span class="line">70</span><br/><span class="line">71</span><br/><span class="line">72</span><br/><span class="line">73</span><br/><span class="line">74</span><br/><span class="line">75</span><br/><span class="line">76</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br/><span class="line"></span><br/><span class="line"><span class="keyword">import</span> <span class="string">&#34;log&#34;</span></span><br/><span class="line"></span><br/><span class="line"><span class="comment">// 定义一个接口 notifier</span></span><br/><span class="line"><span class="comment">// 要实现 notifier 接口必须实现 notify 方法</span></span><br/><span class="line"><span class="keyword">type</span> notifier <span class="keyword">interface</span> {</span><br/><span class="line">  notify()</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> {</span><br/><span class="line">  name <span class="type">string</span></span><br/><span class="line">  phone <span class="type">string</span></span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="comment">// 指针接收者</span></span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *user)</span></span> notify() {</span><br/><span class="line">  log.Println(<span class="string">&#34;Send user a text&#34;</span>)</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="keyword">type</span> Admin <span class="keyword">struct</span> {</span><br/><span class="line">  user</span><br/><span class="line">  level <span class="type">string</span></span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="comment">// 值接收者</span></span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ad Admin)</span></span> notify() {</span><br/><span class="line">  log.Println(<span class="string">&#34;Send admin a message&#34;</span>)</span><br/><span class="line">}</span><br/><span class="line"><span class="comment">// 多态函数</span></span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendNotification</span><span class="params">(n notifier)</span></span> {</span><br/><span class="line">  n.notify()</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br/><span class="line">  <span class="comment">// ---指针接收者方法的类型实现接口示例---</span></span><br/><span class="line">  u := user{</span><br/><span class="line">    name: <span class="string">&#34;Jack&#34;</span>,</span><br/><span class="line">    phone: <span class="string">&#34;17688888888&#34;</span>,</span><br/><span class="line">  }</span><br/><span class="line">  <span class="comment">// 尝试将类型值实现接口 notifier</span></span><br/><span class="line">  <span class="comment">// 因为类型的方法是指针接收者</span></span><br/><span class="line">  <span class="comment">// 使用类型值实现接口时，会编译不通过</span></span><br/><span class="line">  <span class="comment">//var n notifier = u // Cannot use &#39;u&#39; (type user) as type notifier Type does not implement &#39;notifier&#39; as &#39;notify&#39; method has a pointer receiver</span></span><br/><span class="line"></span><br/><span class="line">  <span class="comment">// 使用类型值得指针，可以正常实现接口</span></span><br/><span class="line">  <span class="keyword">var</span> n notifier = &amp;u</span><br/><span class="line">  n.notify() <span class="comment">// Send user a text</span></span><br/><span class="line"></span><br/><span class="line"></span><br/><span class="line">  <span class="comment">// ---值接收者方法的类型实现接口示例---</span></span><br/><span class="line"></span><br/><span class="line">  <span class="comment">// 实现值接收者方法的类型实现接口</span></span><br/><span class="line">  ad := Admin{</span><br/><span class="line">    user: user{<span class="string">&#34;Jack&#34;</span>, <span class="string">&#34;17688888888&#34;</span>},</span><br/><span class="line">    level: <span class="string">&#34;super&#34;</span>,</span><br/><span class="line">  }</span><br/><span class="line">  <span class="comment">// 使用类型值实现接口，成功</span></span><br/><span class="line">  <span class="keyword">var</span> n2 notifier = ad</span><br/><span class="line">  n2.notify() <span class="comment">// Send admin a message</span></span><br/><span class="line"></span><br/><span class="line">  <span class="comment">// 使用类型值的指针实现接口, 成功</span></span><br/><span class="line">  <span class="keyword">var</span> n3 notifier = &amp;ad</span><br/><span class="line">  n3.notify() <span class="comment">// Send admin a message</span></span><br/><span class="line">  </span><br/><span class="line">  </span><br/><span class="line">  <span class="comment">// -------多态示例--------</span></span><br/><span class="line"></span><br/><span class="line">  <span class="comment">// 接口值多态</span></span><br/><span class="line">  <span class="comment">// 因为 Admin 和 user 两个类型都实现了接口</span></span><br/><span class="line">  <span class="comment">// 而 sendNotification 函数接收一个 notifier 接口值</span></span><br/><span class="line">  <span class="comment">// 然后调用接口值对应的 notify 方法</span></span><br/><span class="line">  <span class="comment">// 从而实现了接口值的多态</span></span><br/><span class="line">  sendNotification(n) <span class="comment">// Send user a text</span></span><br/><span class="line">  sendNotification(n3) <span class="comment">// Send admin a message</span></span><br/><span class="line">}</span><br/></pre></td></tr></tbody></table></figure></body></html>