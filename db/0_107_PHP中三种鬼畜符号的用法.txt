<html><head></head><body><h2 id="x3D-gt-的用法"><a href="https://xeonds.github.io/2021/07/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/PHP/PHP%E4%B8%AD%E4%B8%89%E7%A7%8D%E9%AC%BC%E7%95%9C%E7%AC%A6%E5%8F%B7%E7%9A%84%E7%94%A8%E6%B3%95/#x3D-gt-%E7%9A%84%E7%94%A8%E6%B3%95" class="headerlink" title="=&gt;的用法"></a>=&gt;的用法</h2><p>在php中数组默认键名是整数，也可以自己定义任意字符键名（最好是有实际意义），如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/></pre></td><td class="code"><pre><span class="line">$css=array(&#39;style&#39;=&gt;&#39;0&#39;，‘color’=&gt;‘green‘)；</span><br/><span class="line">　则$css[&#39;style&#39;]==&#39;0&#39;，$css[&#39;color&#39;]==&#39;green&#39;。</span><br/><span class="line"></span><br/></pre></td></tr></tbody></table></figure><h2 id="gt-的用法"><a href="https://xeonds.github.io/2021/07/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/PHP/PHP%E4%B8%AD%E4%B8%89%E7%A7%8D%E9%AC%BC%E7%95%9C%E7%AC%A6%E5%8F%B7%E7%9A%84%E7%94%A8%E6%B3%95/#gt-%E7%9A%84%E7%94%A8%E6%B3%95" class="headerlink" title="-&gt;的用法"></a>-&gt;的用法</h2><p>用来引用对象的成员（属性与方法）。相当于其他语言中的“.”。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/></pre></td><td class="code"><pre><span class="line">  $arr=[&#39;a&#39;=&gt;123,&#39;b&#39;=&gt;456];//数组初始化</span><br/><span class="line">  echo $arr[&#39;a&#39;];//数组引用</span><br/><span class="line">  print_r($arr);//查看数组</span><br/><span class="line">  class A{</span><br/><span class="line">    public $a=123;</span><br/><span class="line">    public $b=456;</span><br/><span class="line">  }</span><br/><span class="line">  $obj=new A();</span><br/><span class="line">  echo $obj-&gt;a;//对象引用</span><br/><span class="line">  print_r($obj);//查看对象</span><br/><span class="line">?&gt;</span><br/></pre></td></tr></tbody></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/></pre></td><td class="code"><pre><span class="line">123Array(</span><br/><span class="line">    [a] =&gt; 123</span><br/><span class="line">    [b] =&gt; 456)</span><br/><span class="line">123A Object(</span><br/><span class="line">    [a] =&gt; 123</span><br/><span class="line">    [b] =&gt; 456)</span><br/></pre></td></tr></tbody></table></figure><h2 id="的用法"><a href="https://xeonds.github.io/2021/07/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/PHP/PHP%E4%B8%AD%E4%B8%89%E7%A7%8D%E9%AC%BC%E7%95%9C%E7%AC%A6%E5%8F%B7%E7%9A%84%E7%94%A8%E6%B3%95/#%E7%9A%84%E7%94%A8%E6%B3%95" class="headerlink" title="::的用法"></a>::的用法</h2><p>双冒号操作符即作用域限定操作符Scope Resolution Operator可以访问静态、const和类中重写的属性与方法。</p><p>（1）Program List：用变量在类定义外部访问</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/></pre></td><td class="code"><pre><span class="line">class Fruit {</span><br/><span class="line">    const CONST_VALUE = &#39;Fruit Color&#39;;</span><br/><span class="line">}</span><br/><span class="line">  </span><br/><span class="line">$classname = &#39;Fruit&#39;;</span><br/><span class="line">echo $classname::CONST_VALUE; // As of PHP 5.3.0</span><br/><span class="line">echo Fruit::CONST_VALUE;</span><br/><span class="line">?&gt;</span><br/></pre></td></tr></tbody></table></figure><p>（2）Program List：在类定义外部使用::</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/></pre></td><td class="code"><pre><span class="line">class Fruit {</span><br/><span class="line">    const CONST_VALUE = &#39;Fruit Color&#39;;</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line">class Apple extends Fruit</span><br/><span class="line">{</span><br/><span class="line">    public static $color = &#39;Red&#39;;</span><br/><span class="line">    public static function doubleColon() {</span><br/><span class="line">        echo parent::CONST_VALUE . &#34;\n&#34;;</span><br/><span class="line">        echo self::$color . &#34;\n&#34;;</span><br/><span class="line">    }</span><br/><span class="line">}</span><br/><span class="line"></span><br/><span class="line">Apple::doubleColon();</span><br/><span class="line">?&gt;</span><br/></pre></td></tr></tbody></table></figure><p>（3）Program List：调用parent方法</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/></pre></td><td class="code"><pre><span class="line">class Fruit</span><br/><span class="line">{</span><br/><span class="line">    protected function showColor() {</span><br/><span class="line">        echo &#34;Fruit::showColor()\n&#34;;</span><br/><span class="line">    }</span><br/><span class="line">}</span><br/><span class="line">  </span><br/><span class="line">class Apple extends Fruit</span><br/><span class="line">{</span><br/><span class="line">    // Override parent&#39;s definition</span><br/><span class="line">    public function showColor()</span><br/><span class="line">    {</span><br/><span class="line">        // But still call the parent function</span><br/><span class="line">        parent::showColor();</span><br/><span class="line">        echo &#34;Apple::showColor()\n&#34;;</span><br/><span class="line">    }</span><br/><span class="line">}</span><br/><span class="line"> </span><br/><span class="line">$apple = new Apple();</span><br/><span class="line">$apple-&gt;showColor();</span><br/><span class="line">?&gt;</span><br/></pre></td></tr></tbody></table></figure><p>（4）Program List：使用作用域限定符</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/></pre></td><td class="code"><pre><span class="line">    class Apple</span><br/><span class="line">    {</span><br/><span class="line">        public function showColor()</span><br/><span class="line">        {</span><br/><span class="line">            return $this-&gt;color;</span><br/><span class="line">        }</span><br/><span class="line">    }</span><br/><span class="line"> </span><br/><span class="line">    class Banana12     {</span><br/><span class="line">        public $color;</span><br/><span class="line">        public function __construct()</span><br/><span class="line">        {</span><br/><span class="line">            $this-&gt;color = &#34;Banana is yellow&#34;;</span><br/><span class="line">        }</span><br/><span class="line"> </span><br/><span class="line">        public function GetColor()</span><br/><span class="line">        {</span><br/><span class="line">            return Apple::showColor();</span><br/><span class="line">        }</span><br/><span class="line">    }</span><br/><span class="line"></span><br/><span class="line">    $banana = new Banana;</span><br/><span class="line">    echo $banana-&gt;GetColor();</span><br/><span class="line">?&gt;</span><br/></pre></td></tr></tbody></table></figure><p>（5）Program List：调用基类的方法</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/></pre></td><td class="code"><pre><span class="line">class Fruit</span><br/><span class="line">{</span><br/><span class="line">    static function color()</span><br/><span class="line">    {</span><br/><span class="line">       return &#34;color&#34;;</span><br/><span class="line">    }</span><br/><span class="line"> </span><br/><span class="line">    static function showColor()</span><br/><span class="line">    {</span><br/><span class="line">        echo &#34;show &#34; . self::color();</span><br/><span class="line">    }</span><br/><span class="line">}</span><br/><span class="line"> </span><br/><span class="line">class Apple extends Fruit</span><br/><span class="line">{</span><br/><span class="line">    static function color()</span><br/><span class="line">    {</span><br/><span class="line">        return &#34;red&#34;;</span><br/><span class="line">    }</span><br/><span class="line">}</span><br/><span class="line"> </span><br/><span class="line">Apple::showColor();</span><br/><span class="line">// output is &#34;show color&#34;!</span><br/><span class="line">?&gt;</span><br/></pre></td></tr></tbody></table></figure></body></html>